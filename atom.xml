<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XXX17的个人博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-07-08T01:55:14.024Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>XXX17</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ajax</title>
    <link href="http://example.com/2022/07/07/Ajax/"/>
    <id>http://example.com/2022/07/07/Ajax/</id>
    <published>2022-07-06T16:00:00.000Z</published>
    <updated>2022-07-08T01:55:14.024Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ajax概述"><a href="#Ajax概述" class="headerlink" title="Ajax概述"></a>Ajax概述</h1><h2 id="AJAX-简介"><a href="#AJAX-简介" class="headerlink" title="AJAX 简介"></a>AJAX 简介</h2><div class="tip info"><p>AJAX 全称为Asynchronous JavaScript And XML，就是异步的JS 和XML<br>通过AJAX 可以在浏览器中向服务器发送异步请求，最大的优势：无刷新获取数据<br>AJAX 不是新的编程语言，而是一种将现有的标准组合在一起使用的新方式</p></div><h2 id="XML-简介"><a href="#XML-简介" class="headerlink" title="XML 简介"></a>XML 简介</h2><div class="tip info"><p>XML 可扩展标记语言。<br>XML 被设计用来传输和存储数据。<br>XML 和HTML 类似，不同的是HTML 中都是预定义标签，而XML 中没有预定义标签，<br>全都是自定义标签，用来表示一些数据。</p></div><p>比如说我有一个学生数据：<br>name = “孙悟空” ; age = 18 ; gender = “男” ;<br>用XML 表示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;student&gt;</span><br><span class="line">&lt;name&gt;孙悟空&lt;/name&gt;</span><br><span class="line">&lt;age&gt;18&lt;/age&gt;</span><br><span class="line">&lt;gender&gt;男&lt;/gender&gt;</span><br><span class="line">&lt;/student&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现在已经被<span class='p red'>JSON</span> 取代了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;name&quot;:&quot;孙悟空&quot;,&quot;age&quot;:18,&quot;gender&quot;:&quot;男&quot;&#125;</span><br></pre></td></tr></table></figure><h2 id="AJAX-的特点"><a href="#AJAX-的特点" class="headerlink" title="AJAX 的特点"></a>AJAX 的特点</h2><details class="folding-tag" green open><summary> 优点 </summary>              <div class='content'>              <p>可以无需刷新页面而与服务器端进行通信<br>允许你根据用户事件来更新部分页面内容</p>              </div>            </details><details class="folding-tag" green open><summary> 缺点 </summary>              <div class='content'>              <p>没有浏览历史，不能回退<br>存在跨域问题(同源)<br>SEO 不友好</p>              </div>            </details><h1 id="HTTP相关问题"><a href="#HTTP相关问题" class="headerlink" title="HTTP相关问题"></a>HTTP相关问题</h1><h2 id="MDN-文档"><a href="#MDN-文档" class="headerlink" title="MDN 文档"></a>MDN 文档</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Overview">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Overview</a></p><h2 id="HTTP-请求交互的基本过程"><a href="#HTTP-请求交互的基本过程" class="headerlink" title="HTTP 请求交互的基本过程"></a>HTTP 请求交互的基本过程</h2><div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/ajax/1.png"/></div></div><ol><li>前后应用从浏览器端向服务器发送HTTP 请求(请求报文)</li><li>后台服务器接收到请求后, 调度服务器应用处理请求, 向浏览器端返回HTTP响应(响应报文)</li><li>浏览器端接收到响应, 解析显示响应体/调用监视回调</li></ol><h2 id="HTTP-请求报文"><a href="#HTTP-请求报文" class="headerlink" title="HTTP 请求报文"></a>HTTP 请求报文</h2><ol><li><p>请求行<br>method url<br>GET /product_detail?id=2<br>POST /login</p></li><li><p>多个请求头<br>Host: www.baidu.com<br>Cookie: BAIDUID=AD3B0FA706E; BIDUPSID=AD3B0FA706;<br>Content-Type: application/x-www-form-urlencoded 或者application/json</p></li><li><p>空行</p></li><li><p>请求体<br>username=tom&amp;pwd=123<br>{“username”: “tom”, “pwd”: 123}</p></li></ol><h2 id="HTTP-响应报文"><a href="#HTTP-响应报文" class="headerlink" title="HTTP 响应报文"></a>HTTP 响应报文</h2><ol><li><p>响应状态行<br>status statusText</p></li><li><p>多个响应头<br>Content-Type: text/html;charset=utf-8<br>Set-Cookie: BD_CK_SAM=1;path=/</p></li><li><p>空行</p></li><li><p>响应体<br>html 文本/json 文本/js/css/图片…</p></li></ol><h2 id="post-请求体参数格式"><a href="#post-请求体参数格式" class="headerlink" title="post 请求体参数格式"></a>post 请求体参数格式</h2><ol><li><p>Content-Type: application/x-www-form-urlencoded;charset=utf-8<br>用于键值对参数，参数的键值用=连接, 参数之间用&amp;连接</p></li><li><p>例如: name=%E5%B0%8F%E6%98%8E&amp;age=12<br>Content-Type: application/json;charset=utf-8<br>用于 json 字符串参数</p></li><li><p>例如: {“name”: “%E5%B0%8F%E6%98%8E”, “age”: 12}<br>Content-Type: multipart/form-data<br>用于文件上传请求</p></li></ol><h2 id="常见的响应状态码"><a href="#常见的响应状态码" class="headerlink" title="常见的响应状态码"></a>常见的响应状态码</h2><ol><li>200 OK 请求成功。一般用于GET 与POST 请求</li><li>201 Created 已创建。成功请求并创建了新的资源</li><li>401 Unauthorized 未授权/请求要求用户的身份认证</li><li>404 Not Found 服务器无法根据客户端的请求找到资源</li><li>500 Internal Server Error 服务器内部错误，无法完成请求</li></ol><h2 id="不同类型的请求及其作用"><a href="#不同类型的请求及其作用" class="headerlink" title="不同类型的请求及其作用"></a>不同类型的请求及其作用</h2><ol><li>GET: 从服务器端读取数据（查）</li><li>POST: 向服务器端添加新数据 （增）</li><li>PUT: 更新服务器端已经数据 （改）</li><li>DELETE: 删除服务器端数据 （删）</li></ol><h2 id="API-的分类"><a href="#API-的分类" class="headerlink" title="API 的分类"></a>API 的分类</h2><ol><li>REST API: restful （Representational State Transfer (资源)表现层状态转化）<br>(1) 发送请求进行CRUD 哪个操作由请求方式来决定<br>(2) 同一个请求路径可以进行多个操作<br>(3) 请求方式会用到GET/POST/PUT/DELETE</li><li>非REST API: restless<br>(1) 请求方式不决定请求的CRUD 操作<br>(2) 一个请求路径只对应一个操作<br>(3) 一般只有GET/POST</li></ol><h2 id="区别-一般http请求-与-ajax请求"><a href="#区别-一般http请求-与-ajax请求" class="headerlink" title="区别 一般http请求 与 ajax请求"></a>区别 一般http请求 与 ajax请求</h2><p>ajax请求 是一种特别的 http请求<br>对服务器端来说, 没有任何区别, 区别在浏览器端<br>浏览器端发请求: 只有XHR 或fetch 发出的才是ajax 请求, 其它所有的都是非ajax 请求<br>浏览器端接收到响应<br>(1) 一般请求: 浏览器一般会直接显示响应体数据, 也就是我们常说的刷新/跳转页面<br>(2) ajax请求: 浏览器不会对界面进行任何更新操作, 只是调用监视的回调函数并传入响应相关数据</p><h1 id="原生AJAX-的基本使用-XHR"><a href="#原生AJAX-的基本使用-XHR" class="headerlink" title="原生AJAX 的基本使用 XHR"></a>原生AJAX 的基本使用 XHR</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><p><a href="http://nodejs.cn/">http://nodejs.cn/</a></p><h3 id="安装express（服务端框架）"><a href="#安装express（服务端框架）" class="headerlink" title="安装express（服务端框架）"></a>安装express（服务端框架）</h3><p><a href="https://www.expressjs.com.cn/">https://www.expressjs.com.cn/</a></p><ol><li><p>初始化环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init --yes</span><br></pre></td></tr></table></figure></li><li><p>下载express包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install express --save</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>编写js代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 1. 引入express</span><br><span class="line">const express = require(&#x27;express&#x27;);</span><br><span class="line"></span><br><span class="line">// 2. 创建应用对象</span><br><span class="line">const app = express();</span><br><span class="line"></span><br><span class="line">// 3. 创建路由规则</span><br><span class="line">// request 是对请求报文的封装</span><br><span class="line">// response 是对响应报文的封装</span><br><span class="line">app.get(&#x27;/&#x27;, (request, response) =&gt; &#123;</span><br><span class="line">  //  设置响应</span><br><span class="line">  response.send(&quot;Hello Express&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 4. 监听端口，启动服务</span><br><span class="line">app.listen(8000, () =&gt; &#123;</span><br><span class="line">  console.log(&quot;服务已经启动, 8000 端口监听中...&quot;);</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure></li><li><p>运行js程序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node .\01express使用.js</span><br></pre></td></tr></table></figure></li><li><p>打开网页显示页面</p><div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/ajax/2.png"/></div></div></li><li><p>调试程序可以查看请求和响应</p><div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/ajax/3.png"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/ajax/4.png"/></div></div></li></ol><h2 id="发送ajax-请求"><a href="#发送ajax-请求" class="headerlink" title="发送ajax 请求"></a>发送ajax 请求</h2><div class="tip info"><p>使用XMLHttpRequest (XHR)对象可以与服务器交互, 也就是发送ajax 请求<br>前端可以获取到数据，而无需让整个的页面刷新。<br>这使得Web 页面可以只更新页面的局部，而不影响用户的操作。</p></div><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest">https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest</a><br>XMLHttpRequest，AJAX 的所有操作都是通过该对象进行的</p><h2 id="核心对象使用步骤"><a href="#核心对象使用步骤" class="headerlink" title="核心对象使用步骤"></a>核心对象使用步骤</h2><h3 id="创建XMLHttpRequest-对象"><a href="#创建XMLHttpRequest-对象" class="headerlink" title="创建XMLHttpRequest 对象"></a>创建XMLHttpRequest 对象</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var xhr = new XMLHttpRequest();</span><br></pre></td></tr></table></figure><h3 id="设置请求信息（请求方法和url）"><a href="#设置请求信息（请求方法和url）" class="headerlink" title="设置请求信息（请求方法和url）"></a>设置请求信息（请求方法和url）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 请求方式</span><br><span class="line">xhr.open(method, url);</span><br><span class="line">//可以设置请求头，一般不设置</span><br><span class="line">xhr.setRequestHeader(&#x27;Content-Type&#x27;, &#x27;application/x-www-form-urlencoded&#x27;);</span><br></pre></td></tr></table></figure><h3 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.send(body) //get请求不传 body 参数，只有post请求使用</span><br></pre></td></tr></table></figure><h3 id="接收响应（事件绑定，处理服务端返回的结果）"><a href="#接收响应（事件绑定，处理服务端返回的结果）" class="headerlink" title="接收响应（事件绑定，处理服务端返回的结果）"></a>接收响应（事件绑定，处理服务端返回的结果）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//xhr.responseXML 接收 xml格式 的响应数据</span><br><span class="line">//xhr.responseText 接收 文本格式 的响应数据</span><br><span class="line">xhr.onreadystatechange = function ()&#123;</span><br><span class="line">// readyState 是 xhr对象中的属性, 表示状态 0 1 2 3 4</span><br><span class="line">if(xhr.readyState == 4 &amp;&amp; xhr.status == 200)&#123;</span><br><span class="line">var text = xhr.responseText;</span><br><span class="line">console.log(text);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h2><h3 id="GET-请求"><a href="#GET-请求" class="headerlink" title="GET 请求"></a>GET 请求</h3><p>点击返回响应信息<br><div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/ajax/5.gif"/></div></div></p><p>创建两个文件，浏览器端使用的html文件和服务器端使用的js文件</p><p>服务器端 server.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 1. 引入express</span><br><span class="line">const express = require(&#x27;express&#x27;);</span><br><span class="line"></span><br><span class="line">// 2. 创建应用对象</span><br><span class="line">const app = express();</span><br><span class="line"></span><br><span class="line">// 3. 创建路由规则</span><br><span class="line">app.get(&#x27;/server&#x27;, (request, response) =&gt; &#123;</span><br><span class="line">  // 设置响应头 设置允许跨域</span><br><span class="line">  response.setHeader(&#x27;Access-Control-Allow-Origin&#x27;, &#x27;*&#x27;);</span><br><span class="line">  // 设置响应体</span><br><span class="line">  response.send(&quot;Hello Ajax&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 4. 监听服务</span><br><span class="line">app.listen(8000, () =&gt; &#123;</span><br><span class="line">  console.log(&quot;服务已经启动, 8000 端口监听中...&quot;);</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node server.js</span><br></pre></td></tr></table></figure><p>前端页面 html</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Ajax GET 请求&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    #result &#123;</span><br><span class="line">      width: 200px;</span><br><span class="line">      height: 100px;</span><br><span class="line">      border: solid 1px #90b;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;button&gt;点击发送请求&lt;/button&gt;</span><br><span class="line">  &lt;div id=&quot;result&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    //获取button元素</span><br><span class="line">    const btn = document.getElementsByTagName(&#x27;button&#x27;)[0];</span><br><span class="line">    const result = document.getElementById(&#x27;result&#x27;);</span><br><span class="line">    //绑定事件</span><br><span class="line">    btn.onclick = function()&#123;</span><br><span class="line">      // 1. 创建对象 </span><br><span class="line">      const xhr = new XMLHttpRequest();</span><br><span class="line">      // 2. 初始化 设置请求方法和url</span><br><span class="line">      xhr.open(&#x27;GET&#x27;, &#x27;http://127.0.0.1:8000/server&#x27;)</span><br><span class="line">      // 3. 发送</span><br><span class="line">      xhr.send();</span><br><span class="line">      // 4. 事件绑定 处理服务端返回的结果</span><br><span class="line">      xhr.onreadystatechange = function()&#123;</span><br><span class="line">        // readyState 是 xhr 对象中的属性, 表示状态 0 1 2 3 4</span><br><span class="line">        //判断 (服务端返回了所有的结果)</span><br><span class="line">        if(xhr.readyState === 4)&#123;</span><br><span class="line">          //判断响应状态码 200  404  403 401 500</span><br><span class="line">          if(xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300)&#123;</span><br><span class="line">            // 处理结果 行 头 空行 体</span><br><span class="line">            // 响应</span><br><span class="line">            console.log(&#x27;状态码&#x27;, xhr.status); // 状态码</span><br><span class="line">            console.log(&#x27;状态字符串&#x27;, xhr.statusText); // 状态字符串</span><br><span class="line">            console.log(&#x27;所有响应头&#x27;, xhr.getAllResponseHeaders()); // 所有响应头</span><br><span class="line">            console.log(&#x27;响应体&#x27;, xhr.response); // 响应体</span><br><span class="line">            </span><br><span class="line">            //设置 result 的文本</span><br><span class="line">            result.innerHTML=xhr.response;</span><br><span class="line">          &#125;else&#123;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; </span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>GET 请求设置请求参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(&#x27;GET&#x27;, &#x27;http://127.0.0.1:8000/server?a=100&amp;b=200&amp;c=300&#x27;);</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/ajax/6.png"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/ajax/7.png"/></div></div><h3 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h3><p>鼠标放到div中，发post请求，将响应体放在div中呈现</p><p>server.js添加post</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.post(&#x27;/server&#x27;, (request, response) =&gt; &#123;</span><br><span class="line">  // 设置响应头, 设置允许跨域</span><br><span class="line">  response.setHeader(&#x27;Access-Control-Allow-Origin&#x27;, &#x27;*&#x27;);</span><br><span class="line">  // 设置响应体</span><br><span class="line">  response.send(&quot;Hello Ajax POST&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>post.html</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Ajax POST 请求&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    #result &#123;</span><br><span class="line">      width: 200px;</span><br><span class="line">      height: 100px;</span><br><span class="line">      border: solid 1px #903;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;result&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    // 获取元素对象</span><br><span class="line">    const result = document.getElementById(&#x27;result&#x27;);</span><br><span class="line">    // 绑定事件</span><br><span class="line">    result.addEventListener(&quot;mouseover&quot;, function()&#123;</span><br><span class="line">      // 1. 创建对象</span><br><span class="line">      const xhr = new XMLHttpRequest();</span><br><span class="line">      // 2. 初始化 设置类型（请求方式）与url</span><br><span class="line">      xhr.open(&#x27;POST&#x27;, &#x27;http://127.0.0.1:8000/server&#x27;);</span><br><span class="line">      // 3. 发送   设置请求参数（请求体）</span><br><span class="line">      xhr.send(&#x27;a=100&amp;b=200&amp;c=300&#x27;);</span><br><span class="line">      // 4. 事件绑定</span><br><span class="line">      xhr.onreadystatechange = function()&#123;</span><br><span class="line">        // 判断</span><br><span class="line">        if(xhr.readyState === 4)&#123;</span><br><span class="line">          if(xhr.status &gt;=200 &amp;&amp; xhr.status &lt; 300)&#123;</span><br><span class="line">            // 处理服务端返回的结果</span><br><span class="line">            result.innerHTML = xhr.response;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/ajax/8.gif"/></div></div><p>设置请求头信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 设置请求体内容的类型</span><br><span class="line">xhr.setRequesHeader(&#x27;Content-Type&#x27;,&#x27;application/x-www-from-urlencoded&#x27;);</span><br><span class="line">// 自定义头信息</span><br><span class="line">xhr.setRequesHeader(&#x27;name&#x27;, &#x27;ykyk&#x27;);</span><br></pre></td></tr></table></figure><p>server.js中设置响应头允许自定义请求头 post改成all<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setHeader(&#x27;Access-Control-Allow-Header&#x27;,&#x27;*&#x27;);</span><br></pre></td></tr></table></figure></p><h2 id="json数据请求"><a href="#json数据请求" class="headerlink" title="json数据请求"></a>json数据请求</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">app.all(&#x27;/json-server&#x27;, (request, response) =&gt; &#123;</span><br><span class="line">  // 设置响应头, 设置允许跨域</span><br><span class="line">  response.setHeader(&#x27;Access-Control-Allow-Origin&#x27;, &#x27;*&#x27;);</span><br><span class="line">  // 设置响应头, 设置允许自定义头信息</span><br><span class="line">  response.setHeader(&#x27;Access-Control-Allow-Headers&#x27;, &#x27;*&#x27;);</span><br><span class="line">  // 响应一个数据</span><br><span class="line">  const data = &#123;</span><br><span class="line">    name: &#x27;atguigu&#x27;</span><br><span class="line">  &#125;;</span><br><span class="line">  // 对 对象 进行 字符串 转换</span><br><span class="line">  let str = JSON.stringify(data)</span><br><span class="line">  // 设置响应体 </span><br><span class="line">  response.send(str);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;JSON&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    #result &#123;</span><br><span class="line">      width: 200px;</span><br><span class="line">      height: 100px;</span><br><span class="line">      border: solid 1px #89b;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;result&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    const result = document.getElementById(&#x27;result&#x27;);</span><br><span class="line">    // 绑定键盘按下事件</span><br><span class="line">    window.onkeydown = function()&#123;</span><br><span class="line">      // 发送请求</span><br><span class="line">      const xhr = new XMLHttpRequest();</span><br><span class="line">      // *2*.(自动转换) 设置响应体数据的类型(自动转换)</span><br><span class="line">      xhr.responseType = &#x27;json&#x27;;</span><br><span class="line">      // 初始化</span><br><span class="line">      xhr.open(&#x27;GET&#x27;, &#x27;http://127.0.0.1:8000/json-server&#x27;);</span><br><span class="line">      // 发送</span><br><span class="line">      xhr.send();</span><br><span class="line">      // 事件绑定</span><br><span class="line">      xhr.onreadystatechange = function()&#123;</span><br><span class="line">        if(xhr.readyState === 4)&#123;</span><br><span class="line">          if(xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300)&#123;</span><br><span class="line">            console.log(xhr.response);</span><br><span class="line">            // 1. 手动对数据转化 (字符串再转换成json)</span><br><span class="line">            // let data = JSON.parse(xhr.response); //转换成json</span><br><span class="line">            // result.innerHTML = data.name;</span><br><span class="line">            // *2*. (自动转换)自动转换(自动转换)</span><br><span class="line">            result.innerHTML = xhr.response.name; //已经自动变成json</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/ajax/9.gif"/></div></div><h2 id="请求超时与网络异常"><a href="#请求超时与网络异常" class="headerlink" title="请求超时与网络异常"></a>请求超时与网络异常</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 超时设置 （2秒）</span><br><span class="line">xhr.timeout = 2000;</span><br><span class="line">// 超时回调</span><br><span class="line">xhr.ontimeout = function()&#123;</span><br><span class="line">alert(&#x27;网络超时，请稍后重试&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">// 网络异常回调</span><br><span class="line">xhr.onerror = function()&#123;</span><br><span class="line">alert(&#x27;网络异常，请稍后重试&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="取消请求"><a href="#取消请求" class="headerlink" title="取消请求"></a>取消请求</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 手动取消</span><br><span class="line">xhr.abort()</span><br></pre></td></tr></table></figure><h2 id="请求重复发送问题"><a href="#请求重复发送问题" class="headerlink" title="请求重复发送问题"></a>请求重复发送问题</h2><h2 id="解决-IE-缓存问题"><a href="#解决-IE-缓存问题" class="headerlink" title="解决 IE 缓存问题"></a>解决 IE 缓存问题</h2><p>问题：在一些浏览器中(IE),由于缓存机制的存在，ajax 只会发送的第一次请求，剩余多次请求不会在发送给浏览器而是直接加载缓存中的数据。<br>解决方式：浏览器的缓存是根据url 地址来记录的，所以我们只需要修改url 地址即可避免缓存问题<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(&quot;get&quot;,&quot;/testAJAX?t=&quot;+Date.now());</span><br></pre></td></tr></table></figure></p><h2 id="AJAX-请求状态"><a href="#AJAX-请求状态" class="headerlink" title="AJAX 请求状态"></a>AJAX 请求状态</h2><p>xhr.readyState 可以用来查看请求当前的状态<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/readyState">https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/readyState</a><br><div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/ajax/10.png"/></div></div></p><details class="folding-tag" blue open><summary>  </summary>              <div class='content'>              <p>0: 表示XMLHttpRequest 实例已经生成，但是open()方法还没有被调用<br>1: 表示send()方法还没有被调用，仍然可以使用setRequestHeader()，设定HTTP请求的头信息<br>2: 表示send()方法已经执行，并且头信息和状态码已经收到<br>3: 表示正在接收服务器传来的body 部分的数据<br>4: 表示服务器数据已经完全接收，或者本次接收已经失败了</p>              </div>            </details><h2 id="API总结"><a href="#API总结" class="headerlink" title="API总结"></a>API总结</h2><div class="tip successful"><p>XMLHttpRequest()：创建 XHR 对象的构造函数<br>status：响应状态码值，如 200、404<br>statusText：响应状态文本，如 ’ok‘、‘not found’<br>readyState：标识请求状态的只读属性 0-1-2-3-4<br>onreadystatechange：绑定 readyState 改变的监听<br>responseType：指定响应数据类型，如果是 ‘json’，得到响应后自动解析响应<br>response：响应体数据，类型取决于 responseType 的指定<br>timeout：指定请求超时时间，默认为 0 代表没有限制<br>ontimeout：绑定超时的监听<br>onerror：绑定请求网络错误的监听<br>open()：初始化一个请求，参数为：(method, url[, async])<br>send(data)：发送请求<br>abort()：中断请求 （发出到返回之间）<br>getResponseHeader(name)：获取指定名称的响应头值<br>getAllResponseHeaders()：获取所有响应头组成的字符串<br>setRequestHeader(name, value)：设置请求头</p></div><h1 id="jQuery中的AJAX"><a href="#jQuery中的AJAX" class="headerlink" title="jQuery中的AJAX"></a>jQuery中的AJAX</h1><h2 id="get-请求"><a href="#get-请求" class="headerlink" title="get 请求"></a>get 请求</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.get(url, [data], [callback], [type])</span><br></pre></td></tr></table></figure><p>url:请求的URL 地址<br>data:请求携带的参数<br>callback:载入成功时回调函数<br>type:设置返回内容格式，xml, html, script, json, text, _default</p><h2 id="post-请求"><a href="#post-请求" class="headerlink" title="post 请求"></a>post 请求</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.post(url, [data], [callback], [type])</span><br></pre></td></tr></table></figure><p>url:请求的URL 地址<br>data:请求携带的参数<br>callback:载入成功时回调函数<br>type:设置返回内容格式，xml, html, script, json, text, _default</p><h2 id="通用方法"><a href="#通用方法" class="headerlink" title="通用方法"></a>通用方法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">// url</span><br><span class="line">url: &#x27;http://127.0.0.1:8000/jquery-server&#x27;,</span><br><span class="line">// 参数</span><br><span class="line">data: &#123;a:100, b:200&#125;,</span><br><span class="line">// 请求类型</span><br><span class="line">type: &#x27;GET&#x27;,</span><br><span class="line">// 响应体结果</span><br><span class="line">dataType: &#x27;json&#x27;,</span><br><span class="line">// 成功的回调</span><br><span class="line">success: function(data)&#123;console.log(data);&#125;,</span><br><span class="line">// 超时时间</span><br><span class="line">timeout: 2000,</span><br><span class="line">// 失败的回调</span><br><span class="line">error: function()&#123;console.log(&#x27;出错拉~&#x27;);&#125;,</span><br><span class="line">// 头信息</span><br><span class="line">headers: &#123;</span><br><span class="line">c: 300,</span><br><span class="line">d: 400</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h1><h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><div class="tip info"><p>同源策略(Same-Origin Policy)最早由Netscape 公司提出，是浏览器的一种安全策略<br>同源： 协议、域名、端口号必须完全相同<br>跨域： 违背同源策略就是跨域</p></div><h2 id="如何解决跨域"><a href="#如何解决跨域" class="headerlink" title="如何解决跨域"></a>如何解决跨域</h2><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><div class="tip info"><p>JSONP 是什么<br>JSONP(JSON with Padding)，是一个非官方的跨域解决方案，纯粹凭借程序员的聪明<br>才智开发出来，只支持get 请求。</p><p>JSONP 怎么工作的？<br>在网页有一些标签天生具有跨域能力，比如：img link iframe script。<br>JSONP 就是利用script 标签的跨域能力来发送请求的。</p></div><ul><li>JSONP 的使用</li></ul><p>动态的创建一个script 标签<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var script = document.createElement(&quot;script&quot;);</span><br></pre></td></tr></table></figure></p><p>设置script 的src，设置回调函数<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">script.src = &quot;http://localhost:3000/testAJAX?callback=abc&quot;;</span><br><span class="line">function abc(data) &#123;</span><br><span class="line">alert(data.name);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>将script 添加到body 中<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.body.appendChild(script);</span><br></pre></td></tr></table></figure></p><p>服务器中路由的处理<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">router.get(&quot;/testAJAX&quot; , function (req , res) &#123;</span><br><span class="line">console.log(&quot;收到请求&quot;);</span><br><span class="line">var callback = req.query.callback;</span><br><span class="line">var obj = &#123;</span><br><span class="line">name:&quot;孙悟空&quot;,</span><br><span class="line">age:18</span><br><span class="line">&#125;</span><br><span class="line">res.send(callback+&quot;(&quot;+JSON.stringify(obj)+&quot;)&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><ul><li>jQuery 中的JSONP</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button id=&quot;btn&quot;&gt;按钮&lt;/button&gt;</span><br><span class="line">&lt;ul id=&quot;list&quot;&gt;&lt;/ul&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;./jquery-1.12.3.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">window.onload = function () &#123;</span><br><span class="line">var btn = document.getElementById(&#x27;btn&#x27;)</span><br><span class="line">btn.onclick = function () &#123;</span><br><span class="line">$.getJSON(&quot;http://api.douban.com/v2/movie/in_theaters?callback=?&quot;,function(data) &#123;</span><br><span class="line">console.log(data);</span><br><span class="line">//获取所有的电影的条目</span><br><span class="line">var subjects = data.subjects;</span><br><span class="line">//遍历电影条目</span><br><span class="line">for(var i=0 ; i&lt;subjects.length ; i++)&#123;</span><br><span class="line">$(&quot;#list&quot;).append(&quot;&lt;li&gt;&quot;+</span><br><span class="line">subjects[i].title+&quot;&lt;br /&gt;&quot;+</span><br><span class="line">&quot;&lt;img src=\&quot;&quot;+subjects[i].images.large+&quot;\&quot; &gt;&quot;+</span><br><span class="line">&quot;&lt;/li&gt;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><div class="tip info"><p>CORS 是什么？<br>CORS（Cross-Origin Resource Sharing），跨域资源共享。CORS 是官方的跨域解决方案，它的特点不需要在客户端做任何特殊的操作，完全在服务器中进行处理，支持get 和post 请求。跨域资源共享标准新增了一组HTTP 首部字段，允许服务器声明哪些源站通过浏览器有权限访问哪些资源</p><p>CORS 怎么工作的？<br>CORS 是通过设置一个响应头来告诉浏览器，该请求允许跨域，浏览器收到该响应以后就会对响应放行。</p></div><ul><li>CORS 的使用</li></ul><p>主要是服务器端的设置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">router.get(&quot;/testAJAX&quot; , function (req , res) &#123;</span><br><span class="line">//通过res 来设置响应头，来允许跨域请求</span><br><span class="line">//res.set(&quot;Access-Control-Allow-Origin&quot;,&quot;http://127.0.0.1:3000&quot;);</span><br><span class="line">res.set(&quot;Access-Control-Allow-Origin&quot;,&quot;*&quot;);</span><br><span class="line">res.send(&quot;testAJAX 返回的响应&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Ajax概述&quot;&gt;&lt;a href=&quot;#Ajax概述&quot; class=&quot;headerlink&quot; title=&quot;Ajax概述&quot;&gt;&lt;/a&gt;Ajax概述&lt;/h1&gt;&lt;h2 id=&quot;AJAX-简介&quot;&gt;&lt;a href=&quot;#AJAX-简介&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="笔记" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>关于Butterfly主题</title>
    <link href="http://example.com/2022/07/01/butterfly%E4%B8%BB%E9%A2%98/"/>
    <id>http://example.com/2022/07/01/butterfly%E4%B8%BB%E9%A2%98/</id>
    <published>2022-06-30T16:00:00.000Z</published>
    <updated>2022-07-04T03:37:20.965Z</updated>
    
    <content type="html"><![CDATA[<div align="right">  語言:  中文  <a title="English" href="/README.md">英文</a></div><h1 id="hexo-theme-butterfly"><a href="#hexo-theme-butterfly" class="headerlink" title="hexo-theme-butterfly"></a>hexo-theme-butterfly</h1><p><img src="https://img.shields.io/github/package-json/v/jerryc127/hexo-theme-butterfly/master?color=%231ab1ad&amp;label=master" alt="master version"><br><img src="https://img.shields.io/github/package-json/v/jerryc127/hexo-theme-butterfly/dev?label=dev" alt="master version"><br><img src="https://img.shields.io/npm/v/hexo-theme-butterfly?color=%09%23bf00ff" alt="https://img.shields.io/npm/v/hexo-theme-butterfly?color=%09%23bf00ff"><br><img src="https://img.shields.io/badge/hexo-5.3.0+-0e83c" alt="hexo version"><br><img src="https://img.shields.io/github/license/jerryc127/hexo-theme-butterfly?color=FF5531" alt="license"></p><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@m2/img/theme-butterfly-readme.png" alt=""></p><p>預覽: 👍 <a href="https://butterfly.js.org/">Butterfly</a>  ||  🤞 <a href="https://crazywong.com/">CrazyWong</a></p><p>文檔: 📖 <a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly Docs</a></p><p>一款基於<a href="https://github.com/Molunerfinn/hexo-theme-melody">hexo-theme-melody</a>修改的主題</p><p><a href="https://butterfly.js.org/posts/21cfbf15/">详细教程</a></p><h2 id="💻-安裝"><a href="#💻-安裝" class="headerlink" title="💻 安裝"></a>💻 安裝</h2><h3 id="Git-安裝"><a href="#Git-安裝" class="headerlink" title="Git 安裝"></a>Git 安裝</h3><blockquote><p>本倉庫同時上傳到 <a href="https://gitee.com/immyw/hexo-theme-butterfly.git">Gitee</a>，如果你訪問 Github 緩慢，可從 Gitee 中下載。</p></blockquote><p>在博客根目錄裡安裝穩定版【推薦】</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone <span class="literal">-b</span> master https://github.com/jerryc127/hexo<span class="literal">-theme-butterfly</span>.git themes/butterfly</span><br></pre></td></tr></table></figure><p>如果想要安裝比較新的dev分支，可以</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone <span class="literal">-b</span> dev https://github.com/jerryc127/hexo<span class="literal">-theme-butterfly</span>.git themes/butterfly</span><br></pre></td></tr></table></figure><h3 id="npm-安裝"><a href="#npm-安裝" class="headerlink" title="npm 安裝"></a>npm 安裝</h3><blockquote><p>此方法只支持Hexo 5.0.0以上版本</p></blockquote><p>在博客根目錄裡</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo<span class="literal">-theme-butterfly</span></span><br></pre></td></tr></table></figure><h2 id="⚙-應用主題"><a href="#⚙-應用主題" class="headerlink" title="⚙ 應用主題"></a>⚙ 應用主題</h2><p>修改hexo配置文件<code>_config.yml</code>，把主題改為<code>Butterfly</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure><blockquote><p>如果你沒有pug以及stylus的渲染器，請下載安裝： npm install hexo-renderer-pug hexo-renderer-stylus —save</p></blockquote><h2 id="🎉-特色"><a href="#🎉-特色" class="headerlink" title="🎉 特色"></a>🎉 特色</h2><ul><li>[x] 卡片化設計</li><li>[X] 支持二級目錄</li><li>[x] 雙欄設計</li><li>[x] 響應式主題</li><li>[x] 夜間模式</li><li>[x] Pjax</li><li>[x] 文章閲讀模式</li><li>[x] 簡體和繁體轉換</li><li>[X] 電腦和手機都可查看TOC目錄</li><li>[X] 內置多種代碼配色（darker/pale night/light/ocean/mac/mac light），可自定義代碼配色</li><li>[X] 代碼塊顯示代碼語言/關閉或展開代碼塊/代碼複製/代碼自動換行</li><li>[X] 可關閉文字複製/可開啟內容複製增加版權信息）</li><li>[X] 兩種搜索（Algolia搜索和本地搜索）</li><li>[x] Mathjax 和 Katex</li><li>[x] 內置404頁面</li><li>[x] 顯示字數統計</li><li>[x] 顯示相關文章</li><li>[x] 過期文章提醒</li><li>[x] 多種分享系統（AddThis/Sharejs/Addtoany）</li><li>[X] 多種評論系統（Disqus/Disqusjs/Livere/Gitalk/Valine/Waline/Utterances/Facebook Comments/Twikoo/Giscus）</li><li>[x] 支持雙評論部署</li><li>[x] 多種在線聊天（Chatra/Tidio/Daovoice/Gitter/Crisp）</li><li>[x] 多種分析系統</li><li>[x] 谷歌廣告/手動廣告位置</li><li>[x] 各種站長驗證（Google/Bing/Baidu/360/Yandex）</li><li>[x] 修改網站配色</li><li>[x] 打字特效 activate_power_mode</li><li>[x] 多種背景特效（靜止彩帶/動態彩帶/Canvas Nest）</li><li>[x] 多種鼠標點擊特效（煙花/文字/愛心）</li><li>[x] 內置一種 Preloader 加載動畫</li><li>[x] 不蒜子訪問統計</li><li>[x] 兩種大圖模式（Medium Zoom/Fancybox）</li><li>[x] Mermaid 圖表顯示</li><li>[x] 照片牆</li><li>[x] 圖片懶加載</li><li>[x] Instantpage/Pangu/Snackbar彈窗/PWA……</li></ul><h2 id="✨-贡献者"><a href="#✨-贡献者" class="headerlink" title="✨ 贡献者"></a>✨ 贡献者</h2><p><a href="https://github.com/jerryc127/hexo-theme-butterfly/graphs/contributors"><br>  <img src="https://contrib.rocks/image?repo=jerryc127/hexo-theme-butterfly" /></a></p><h2 id="📷-截圖"><a href="#📷-截圖" class="headerlink" title="📷 截圖"></a>📷 截圖</h2><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@m2/img/butterfly-readme-screenshots-1.jpg" alt=""><br><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@m2/img/butterfly-readme-screenshots-2.jpg" alt=""><br><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@m2/img/butterfly-readme-screenshots-3.jpg" alt=""><br><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@m2/img/butterfly-readme-screenshots-4.jpg" alt=""><br><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/theme-butterfly-readme-homepage-1.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/theme-butterfly-readme-homepage-2.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;div align=&quot;right&quot;&gt;
  語言:
  中文
  &lt;a title=&quot;English&quot; href=&quot;/README.md&quot;&gt;英文&lt;/a&gt;
&lt;/div&gt;

&lt;h1 id=&quot;hexo-theme-butterfly&quot;&gt;&lt;a href=&quot;#hexo-theme-butt</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>外挂标签</title>
    <link href="http://example.com/2022/07/01/%E5%A4%96%E6%8C%82%E6%A0%87%E7%AD%BE/"/>
    <id>http://example.com/2022/07/01/%E5%A4%96%E6%8C%82%E6%A0%87%E7%AD%BE/</id>
    <published>2022-06-30T16:00:00.000Z</published>
    <updated>2022-07-04T03:18:19.320Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo-butterfly-tag-plugins-plus"><a href="#hexo-butterfly-tag-plugins-plus" class="headerlink" title="hexo-butterfly-tag-plugins-plus"></a>hexo-butterfly-tag-plugins-plus</h1><p>给<code>hexo-theme-butterfly</code>添加 <a href="https://akilar.top/posts/615e2dec/">大量外挂标签</a></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol><li>安装插件,在博客根目录<code>[Blogroot]</code>下打开终端，运行以下指令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-butterfly-tag-plugins-plus --save</span><br></pre></td></tr></table></figure></li><li><p>考虑到hexo自带的markdown渲染插件<code>hexo-renderer-marked</code>与外挂标签语法的兼容性较差，建议您将其替换成<a href="https://www.npmjs.com/package/hexo-renderer-kramed">hexo-renderer-kramed</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure></li><li><p>添加配置信息，以下为写法示例<br>在站点配置文件<code>_config.yml</code>或者主题配置文件<code>_config.butterfly.yml</code>中添加</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tag-plugins-plus</span></span><br><span class="line"><span class="comment"># see https://akilar.top/posts/615e2dec/</span></span><br><span class="line"><span class="attr">tag_plugins:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">issues:</span> <span class="literal">false</span> <span class="comment">#issues标签开关</span></span><br><span class="line">  <span class="attr">link:</span></span><br><span class="line">    <span class="attr">placeholder:</span> <span class="string">/img/link.png</span> <span class="comment">#link_card标签默认的图标图片</span></span><br><span class="line">  <span class="attr">CDN:</span></span><br><span class="line">    <span class="attr">anima:</span> <span class="string">https://unpkg.zhimg.com/hexo-butterfly-tag-plugins-plus@latest/lib/assets/font-awesome-animation.min.css</span> <span class="comment">#动画标签anima的依赖</span></span><br><span class="line">    <span class="attr">jquery:</span> <span class="string">https://unpkg.zhimg.com/jquery@latest/dist/jquery.min.js</span> <span class="comment">#issues标签依赖</span></span><br><span class="line">    <span class="attr">issues:</span> <span class="string">https://unpkg.zhimg.com/hexo-butterfly-tag-plugins-plus@latest/lib/assets/issues.js</span> <span class="comment">#issues标签依赖</span></span><br><span class="line">    <span class="attr">iconfont:</span> <span class="string">//at.alicdn.com/t/font_2032782_8d5kxvn09md.js</span> <span class="comment">#参看https://akilar.top/posts/d2ebecef/</span></span><br><span class="line">    <span class="attr">carousel:</span> <span class="string">https://unpkg.zhimg.com/hexo-butterfly-tag-plugins-plus@latest/lib/assets/carousel-touch.js</span></span><br><span class="line">    <span class="attr">tag_plugins_css:</span> <span class="string">https://unpkg.zhimg.com/hexo-butterfly-tag-plugins-plus@latest/lib/tag_plugins.css</span></span><br></pre></td></tr></table></figure></li><li><p>参数释义</p><p>|参数|备选值/类型|释义|<br>|:—|:—|:—|<br>|enable|true/false|【必选】控制开关|<br>|priority|number|【可选】过滤器优先级，数值越小，执行越早，默认为10，选填|<br>|issues|true/false|【可选】issues标签控制开关，默认为false|<br>|link.placeholder|【必选】link卡片外挂标签的默认图标|<br>|CDN.anima|URL|【可选】动画标签anima的依赖|<br>|CDN.jquery|URL|【可选】issues标签依赖|<br>|CDN.issues|URL|【可选】issues标签依赖|<br>|CDN.iconfont|URL|【可选】iconfont标签symbol样式引入，如果不想引入，则设为false|<br>|CDN.carousel|URL|【可选】carousel旋转相册标签鼠标拖动依赖，如果不想引入则设为false|<br>|CDN.tag_plugins_css|URL|【可选】外挂标签样式的CSS依赖，为避免CDN缓存延迟，建议将@latest改为具体版本号|</p></li></ol><h1 id="外挂标签文档"><a href="#外挂标签文档" class="headerlink" title="外挂标签文档"></a>外挂标签文档</h1><p><a href="https://akilar.top/posts/615e2dec/">Tag Plugins Plus</a></p><h1 id="update-log"><a href="#update-log" class="headerlink" title="update-log"></a>update-log</h1><ul><li><code>2022-04-29：1.0.17</code><ol><li>在bubble气泡外挂标签基础上新增reference引用文献标签</li><li>修复了bubble气泡外挂标签层级过高遮挡提示框的bug</li></ol></li><li><code>2022-04-28：1.0.16</code><ol><li>移除timeline外挂标签，请使用butterfly新版自带的timeline标签，效果更好。</li><li>修复tip标签自定义图标无效的bug</li></ol></li><li><code>2022-04-07：1.0.15</code><ol><li>调整bubble气泡标签样式动画逻辑，避免透明度变化瞬间遮挡正文。</li></ol></li><li><code>2022-04-07：1.0.14</code><ol><li>新增气泡注释bubble标签样式。效果比nota标签更好。</li><li>支持自定义气泡背景色。</li></ol></li><li><code>2022-03-03：1.0.13</code><ol><li>新增开关逻辑，iconfont，carousel设为false则不引入。</li><li>site标签新增灯箱屏蔽，不再支持点击放大图片。</li></ol></li><li><code>2022-02-14：1.0.12</code><ol><li>剔除了link卡片的无效css属性。</li></ol></li><li><code>2022-01-26：1.0.11</code><ol><li>butterfly_v4.0新增了<code>timeline</code>标签，与本插件标签名冲突。可以选择改用标签文档中的源码配置方案或者删除主题原有的timeline标签文件<code>Blogroot\themes\butterfly\scripts\tag\timeline.js</code>和<code>Blogroot\themes\butterfly\source\css\_tags\timeline.styl</code>。</li><li>修复了carousel标签刷新后不加载的bug。</li></ol></li><li><code>2021-12-23：1.0.10</code><ol><li>将所有CDN链接迁移至<code>unpkg.zhimg.com</code>。</li><li>外露所有CDN配置项，支持读者自行更改CDN源。</li></ol></li><li><code>2021-12-09：1.0.9</code><ol><li>调整<code>link</code>标签的默认图片缺省值适配，新增<code>tag_plugins.link.placeholder</code>配置项。</li><li>因为新增了默认图片，新增配置项，所以需要更新版本。如果本身使用<code>link</code>标签就有自己加图片的习惯的，无需升级。</li><li>修复img-alt靠左的问题</li></ol></li><li><code>2021-12-07：1.0.5</code><ol><li>调整 <code>folding</code>标签，解决与 twikoo 设置面板样式的冲突问题</li><li>因为调整了 <code>folding</code> 标签的编译函数，低版本会出现 <code>folding</code> 样式失效的情况，请各位更新至最新版本。</li></ol></li><li><code>2021-12-01：1.0.4</code><ol><li>调整<code>tip</code>标签，字体垂直居中</li></ol></li><li><code>2021-08-06：1.0.3</code><ol><li>新增<code>carousel</code>旋转相册标签</li></ol></li><li><code>2021-07-07：1.0.0</code><ol><li>使用 npm 插件安装。</li><li>测试版本为 <code>butterfly_v3.1.0、3.3.0、3.7.8、3.8.0</code></li><li>插件写法调整为高内聚，理论上不受 butterfly 主题版本影响。<del>除非主题又整同名标签</del></li><li>为了获得完整效果，建议打开主题的<code>beautify</code>配置项和<code>theme_color</code>配置项。</li></ol></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hexo-butterfly-tag-plugins-plus&quot;&gt;&lt;a href=&quot;#hexo-butterfly-tag-plugins-plus&quot; class=&quot;headerlink&quot; title=&quot;hexo-butterfly-tag-plugins-plu</summary>
      
    
    
    
    <category term="插件" scheme="http://example.com/categories/%E6%8F%92%E4%BB%B6/"/>
    
    
    <category term="插件" scheme="http://example.com/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>标签插件样式</title>
    <link href="http://example.com/2022/07/01/%E6%A0%87%E7%AD%BE%E6%8F%92%E4%BB%B6%E6%A0%B7%E5%BC%8F/"/>
    <id>http://example.com/2022/07/01/%E6%A0%87%E7%AD%BE%E6%8F%92%E4%BB%B6%E6%A0%B7%E5%BC%8F/</id>
    <published>2022-06-30T16:00:00.000Z</published>
    <updated>2022-07-04T03:18:22.890Z</updated>
    
    <content type="html"><![CDATA[<h1 id="行内文本样式-text"><a href="#行内文本样式-text" class="headerlink" title="行内文本样式 text"></a>行内文本样式 text</h1><p><span style = "color:red">红色</span></p><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol><h1 id="行内文本-span"><a href="#行内文本-span" class="headerlink" title="行内文本 span"></a>行内文本 span</h1><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<span class='p center logo large'>Volantis</span><span class='p center small'>A Wonderful Theme for Hexo</span></li></ul><h1 id="引用-note"><a href="#引用-note" class="headerlink" title="引用 note"></a>引用 note</h1><div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div><h1 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h1><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>黄色 + 默认选中</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>青色 + 默认选中</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>蓝色 + 默认选中</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div><div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div><h1 id="单选列表-radio"><a href="#单选列表-radio" class="headerlink" title="单选列表 radio"></a>单选列表 radio</h1><div class='checkbox'><input type="radio" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="radio" />            <p>支持自定义颜色</p>            </div><div class='checkbox green'><input type="radio" />            <p>绿色</p>            </div><div class='checkbox yellow'><input type="radio" />            <p>黄色</p>            </div><div class='checkbox cyan'><input type="radio" />            <p>青色</p>            </div><div class='checkbox blue'><input type="radio" />            <p>蓝色</p>            </div><h1 id="分栏tab"><a href="#分栏tab" class="headerlink" title="分栏tab"></a>分栏tab</h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><details class="folding-tag" cyan open><summary> text </summary>              <div class='content'>              <p>hhhhhhhhh<br>hhhhhhhhh</p>              </div>            </details><p>臣亮言：<mark class="hl-label default">先帝</mark> 创业未半，而<mark class="hl-label blue">中道崩殂</mark> 。今天下三分，<mark class="hl-label pink">益州疲敝</mark> ，此诚<mark class="hl-label red">危急存亡之秋</mark> 也！然侍衞之臣，不懈于内；<mark class="hl-label purple">忠志之士</mark> ，忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。<br>宫中、府中，俱为一体；陟罚臧否，不宜异同。若有<mark class="hl-label orange">作奸</mark> 、<mark class="hl-label green">犯科</mark> ，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;行内文本样式-text&quot;&gt;&lt;a href=&quot;#行内文本样式-text&quot; class=&quot;headerlink&quot; title=&quot;行内文本样式 text&quot;&gt;&lt;/a&gt;行内文本样式 text&lt;/h1&gt;&lt;p&gt;&lt;span style = &quot;color:red&quot;&gt;红色&lt;/span</summary>
      
    
    
    
    <category term="插件" scheme="http://example.com/categories/%E6%8F%92%E4%BB%B6/"/>
    
    
    <category term="插件" scheme="http://example.com/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>markdown渲染插件</title>
    <link href="http://example.com/2022/07/01/markdown/"/>
    <id>http://example.com/2022/07/01/markdown/</id>
    <published>2022-06-30T16:00:00.000Z</published>
    <updated>2022-07-04T09:18:56.355Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo-renderer-kramed"><a href="#hexo-renderer-kramed" class="headerlink" title="hexo-renderer-kramed"></a>hexo-renderer-kramed</h1><p><a href="https://travis-ci.org/sun11/hexo-renderer-kramed"><img src="https://travis-ci.org/sun11/hexo-renderer-kramed.svg?branch=master" alt="Build Status"></a>  <a href="http://badge.fury.io/js/hexo-renderer-kramed"><img src="https://badge.fury.io/js/hexo-renderer-kramed.svg" alt="NPM version"></a></p><p>This plugin uses <a href="https://github.com/GitbookIO/kramed">kramed</a> but not <a href="https://github.com/chjj/marked">marked</a> as render engine, it is a fork of <a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked</a>. You need to uninstall hexo-renderer-marked to avoid conflicts.</p><h2 id="Why-use-kramed"><a href="#Why-use-kramed" class="headerlink" title="Why use kramed?"></a>Why use kramed?</h2><p>Just for the support of mathjax. I’ve modified the inline math format, like this example below:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`$\sigma$`</span><br></pre></td></tr></table></figure><p>But this renderer will only wrap your inline tex and display tex with a <code>&lt;script&gt;</code> tag, to fully enable mathjax, you need to add some js code in your theme, what I did in my theme <a href="https://github.com/sun11/hexo-theme-paperbox">hexo-theme-paperbox</a> is:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/x-mathjax-config&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">MathJax</span>.<span class="property">Hub</span>.<span class="title class_">Config</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">menuSettings</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">zoom</span>: <span class="string">&quot;None&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">showMathMenu</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">jax</span>: [<span class="string">&quot;input/TeX&quot;</span>,<span class="string">&quot;output/CommonHTML&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">extensions</span>: [<span class="string">&quot;tex2jax.js&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">TeX</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">extensions</span>: [<span class="string">&quot;AMSmath.js&quot;</span>,<span class="string">&quot;AMSsymbols.js&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">equationNumbers</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">autoNumber</span>: <span class="string">&quot;AMS&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">tex2jax</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">inlineMath</span>: [[<span class="string">&quot;\\(&quot;</span>, <span class="string">&quot;\\)&quot;</span>]],</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">displayMath</span>: [[<span class="string">&quot;\\[&quot;</span>, <span class="string">&quot;\\]&quot;</span>]]</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//cdnjs.cloudflare.com/ajax/libs/mathjax/2.6.1/MathJax.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>You can use the following formats for your equations:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">inlineMath: `$\sigma$`</span><br><span class="line"></span><br><span class="line">displayMath: $$\sigma$$</span><br></pre></td></tr></table></figure><p>If you need to contain <code>$</code> in \<code\> tag:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">` $some code$ `</span><br></pre></td></tr></table></figure><p>If you need to contain $$$$ in your text:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\$\$</span><br></pre></td></tr></table></figure><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm uninstall hexo-renderer-marked --save</span><br><span class="line">$ npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure><ul><li>Hexo 3: &gt;= 0.2</li><li>Hexo 2: 0.1.x</li></ul><h2 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h2><p>You can configure this plugin in <code>_config.yml</code>.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kramed:</span></span><br><span class="line">  <span class="attr">gfm:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">pedantic:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">sanitize:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tables:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">breaks:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">smartLists:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">smartypants:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li><strong>gfm</strong> - Enables <a href="https://help.github.com/articles/github-flavored-markdown">GitHub flavored markdown</a></li><li><strong>pedantic</strong> - Conform to obscure parts of <code>markdown.pl</code> as much as possible. Don’t fix any of the original markdown bugs or poor behavior.</li><li><strong>sanitize</strong> - Sanitize the output. Ignore any HTML that has been input.</li><li><strong>tables</strong> - Enable GFM <a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#wiki-tables">tables</a>. This option requires the <code>gfm</code> option to be true.</li><li><strong>breaks</strong> - Enable GFM <a href="https://help.github.com/articles/github-flavored-markdown#newlines">line breaks</a>. This option requires the <code>gfm</code> option to be true.</li><li><strong>smartLists</strong> - Use smarter list behavior than the original markdown.</li><li><strong>smartypants</strong> - Use “smart” typograhic punctuation for things like quotes and dashes.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hexo-renderer-kramed&quot;&gt;&lt;a href=&quot;#hexo-renderer-kramed&quot; class=&quot;headerlink&quot; title=&quot;hexo-renderer-kramed&quot;&gt;&lt;/a&gt;hexo-renderer-kramed&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="插件" scheme="http://example.com/categories/%E6%8F%92%E4%BB%B6/"/>
    
    
    <category term="插件" scheme="http://example.com/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
</feed>
