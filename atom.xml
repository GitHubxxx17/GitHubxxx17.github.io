<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XXX17的个人博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-01-21T10:32:44.918Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>XXX17</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue笔记（三）</title>
    <link href="http://example.com/2023/01/05/vue%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://example.com/2023/01/05/vue%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/</id>
    <published>2023-01-04T16:00:00.000Z</published>
    <updated>2023-01-21T10:32:44.918Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h1><div class="tip info"><p><strong>概念</strong><br>在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。<br><strong>何时使用？</strong><br>​多个组件需要共享数据时</p></div><h2 id="搭建vuex环境"><a href="#搭建vuex环境" class="headerlink" title="搭建vuex环境"></a>搭建vuex环境</h2><ol><li><strong>创建文件</strong>：<code>src/store/index.js</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//应用Vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备actions对象——响应组件中用户的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;</span><br><span class="line"><span class="comment">//准备mutations对象——修改state中的数据</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;&#125;</span><br><span class="line"><span class="comment">//准备state对象——保存具体的数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">actions,</span><br><span class="line">mutations,</span><br><span class="line">state</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>在<code>main.js</code>中创建vm时传入<code>store</code>配置项<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="comment">//引入store</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2></li><li>初始化数据、配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//引用Vuex</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="comment">//响应组件中加的动作</span></span><br><span class="line"><span class="title function_">jia</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;actions中的jia被调用了&#x27;,miniStore,value)</span></span><br><span class="line">context.<span class="title function_">commit</span>(<span class="string">&#x27;JIA&#x27;</span>,value)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="comment">//执行加</span></span><br><span class="line"><span class="title function_">JIA</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;mutations中的JIA被调用了&#x27;,state,value)</span></span><br><span class="line">state.<span class="property">sum</span> += value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">   <span class="attr">sum</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">actions,</span><br><span class="line">mutations,</span><br><span class="line">state,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>组件中读取vuex中的数据：<code>$store.state.sum</code></li><li>组件中修改vuex中的数据：<code>$store.dispatch(&#39;action中的方法名&#39;,数据)</code>或 <code>$store.commit(&#39;mutations中的方法名&#39;,数据)</code><blockquote><p><strong>备注</strong>：若没有网络请求或其他业务逻辑，组件中也可以越过<code>actions</code>，即不写<code>dispatch</code>，直接编写<code>commit</code></p></blockquote></li></ol><h2 id="getters的使用"><a href="#getters的使用" class="headerlink" title="getters的使用"></a>getters的使用</h2><ol><li><strong>概念</strong>：当<code>state</code>中的数据需要经过加工后再使用时，可以使用<code>getters</code>加工。</li><li>在<code>store.js</code>中追加<code>getters</code>配置<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line"><span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">......</span><br><span class="line">getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>组件中读取数据：<code>$store.getters.bigSum</code></li></ol><h2 id="四个map方法的使用"><a href="#四个map方法的使用" class="headerlink" title="四个map方法的使用"></a>四个map方法的使用</h2><ol><li><strong>mapState方法</strong>：用于帮助我们映射<code>state</code>中的数据为计算属性<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（对象写法）</span></span><br><span class="line">     ...<span class="title function_">mapState</span>(&#123;<span class="attr">sum</span>:<span class="string">&#x27;sum&#x27;</span>,<span class="attr">school</span>:<span class="string">&#x27;school&#x27;</span>,<span class="attr">subject</span>:<span class="string">&#x27;subject&#x27;</span>&#125;),</span><br><span class="line">         </span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><strong>mapGetters方法</strong>：用于帮助我们映射<code>getters</code>中的数据为计算属性<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（对象写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>(&#123;<span class="attr">bigSum</span>:<span class="string">&#x27;bigSum&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;bigSum&#x27;</span>])</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><strong>mapActions方法</strong>：用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>(&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>([<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="string">&#x27;jiaWait&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>mapMutations方法</strong>：用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：increment、decrement（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>(&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//靠mapMutations生成：JIA、JIAN（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;JIA&#x27;</span>,<span class="string">&#x27;JIAN&#x27;</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>备注</strong>：mapActions与mapMutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。</p></blockquote></li></ol><h2 id="模块化-命名空间"><a href="#模块化-命名空间" class="headerlink" title="模块化+命名空间"></a>模块化+命名空间</h2><ol><li><strong>目的</strong>：让代码更好维护，让多种数据分类更加明确。</li><li>修改<code>store.js</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> countAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123; ... &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    countAbout,</span><br><span class="line">    personAbout</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>开启命名空间后，组件中读取state数据：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">personAbout</span>.<span class="property">list</span></span><br><span class="line"><span class="comment">//方式二：借助mapState读取：</span></span><br><span class="line">...<span class="title function_">mapState</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br></pre></td></tr></table></figure></li><li>开启命名空间后，组件中读取getters数据：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>[<span class="string">&#x27;personAbout/firstPersonName&#x27;</span>]</span><br><span class="line"><span class="comment">//方式二：借助mapGetters读取：</span></span><br><span class="line">...<span class="title function_">mapGetters</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;bigSum&#x27;</span>])</span><br></pre></td></tr></table></figure></li><li>开启命名空间后，组件中调用dispatch<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接dispatch</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;personAbout/addPersonWang&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapActions：</span></span><br><span class="line">...<span class="title function_">mapActions</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure></li><li>开启命名空间后，组件中调用commit<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接commit</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;personAbout/ADD_PERSON&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapMutations：</span></span><br><span class="line">...<span class="title function_">mapMutations</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vuex&quot;&gt;&lt;a href=&quot;#vuex&quot; class=&quot;headerlink&quot; title=&quot;vuex&quot;&gt;&lt;/a&gt;vuex&lt;/h1&gt;&lt;div class=&quot;tip info&quot;&gt;&lt;p&gt;&lt;strong&gt;概念&lt;/strong&gt;&lt;br&gt;在Vue中实现集中式状态（数据）管</summary>
      
    
    
    
    <category term="笔记" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>vue笔记（二）</title>
    <link href="http://example.com/2022/12/30/vue%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://example.com/2022/12/30/vue%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2022-12-29T16:00:00.000Z</published>
    <updated>2023-01-19T09:13:34.264Z</updated>
    
    <content type="html"><![CDATA[<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><h2 id="非单文件组件"><a href="#非单文件组件" class="headerlink" title="非单文件组件"></a>非单文件组件</h2><blockquote><p>Vue中使用组件的三大步骤：<strong>定义组件（创建组件）</strong>-&gt;<strong>注册组件</strong>-&gt;<strong>使用组件（写组件标签）</strong><br>   一、<strong>如何定义一个组件？</strong><br>    使用<code>Vue.extend(options)</code>创建，其中options和 <code>new Vue(options)</code>时传入的哪个options几乎一样，但也有点区别：<br>    1、el不要写，为什么？—-最终所有的组件都要经过一个vm的管理，由vm中的el决定服务哪个容器<br>    2、data必须写成函数，为什么？ —-避免组件被复用时，数据存在引用关系<br>    备注：使用template可以配置组件结构<br>   二、<strong>如何注册组件？</strong><br>     1、局部注册：靠new Vue的时候传入components选项<br>     2、全局注册：靠<code>Vue.component(&#39;组件名&#39;,组件)</code><br>   三、<strong>编写组件标签：</strong><br>     <code>&lt;student&gt;&lt;/student&gt;</code></p></blockquote><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">关于组件名</button></li><li class="tab"><button type="button" data-href="#test1-2">关于组件标签</button></li><li class="tab"><button type="button" data-href="#test1-3">一个简写方式</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>一个单词组成</strong>：<br>第一种写法（首字母小写）：school<br>第二种写法（首字母大写）：School</p><p><strong>多个单词组成</strong>：<br>第一种写法（kebab-case命名）：my-school<br>第二种写法（CamelCase命名）：MySchool（需要Vue脚手架支持）</p><p><strong>备注</strong>：<br>(1). 组件名尽可能回避HTML中已有的元素名称，例如：h2，H2都不行<br>(2). 可以使用name的配置项指定组件在开发者工具中呈现的名字</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>第一种写法</strong>：<code>&lt;school&gt;&lt;/school&gt;</code><br><strong>第二种写法</strong>：<code>&lt;school/&gt;</code><br><strong>备注</strong>：不使用脚手架时，<code>&lt;school/&gt;</code>会导致后续组件不能渲染</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><code>const school = Vue.extend(options)</code>可简写为 <code>const school = options</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>基本使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 第三步：编写组件标签 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xuexiao</span>&gt;</span><span class="tag">&lt;/<span class="name">xuexiao</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">student</span>&gt;</span><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;root2&#x27;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        Vue.config.productionTip = false</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        //第一步：创建school组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        const school = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            template:`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校名称：</span><span class="template-variable">&#123;&#123;<span class="name">schoolName</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校地址：</span><span class="template-variable">&#123;&#123;<span class="name">address</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showName&quot;</span>&gt;</span>点击，提示学校名<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            `,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            //el:&#x27;#root&#x27;, //组件定义时，一定不要写el配置项，因为最终所有的组件都要被一个vm管理，由vm决定服务于谁</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            data () &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    schoolName:&#x27;湖南大学&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    address:&#x27;湖南省长沙市&#x27;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            methods: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                showName()&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    alert(this.schoolName)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        const student = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            template:`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生姓名：</span><span class="template-variable">&#123;&#123;<span class="name">studentName</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生年龄：</span><span class="template-variable">&#123;&#123;<span class="name">age</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            `,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            data () &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    studentName:&#x27;张三&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    age:18,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        const hello = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            template:`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>你好！</span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            `,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            data () &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    name:&#x27;Tom&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        //注册组件(全局注册)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        Vue.component(&#x27;hello&#x27;,hello)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        //创建vm</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            el:&#x27;#root&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            data:&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                msg:&#x27;你好，同学&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            //第二步：注册组件（局部注册）</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            components:&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                xuexiao:school,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                student  //它就是student:student，前是组件名，后是创建时的名字</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            el:&#x27;#root2&#x27;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="tip "><p>关于VueComponent：<br>  1、school组件本质是一个名为VueComponent的构造函数，且不是程序员定义的，是Vue.extend生成的.<br>  2、我们只需要写<code>&lt;school/&gt;</code> 或 <code>&lt;school&gt;&lt;school/&gt;</code>，Vue解析时会帮我们创建school组件的实例对象，<br>     即Vue会帮我们执行的: <code>new VueComponent(options)</code><br>  3、特别注意：每次调用Vue.extend，返回的都是一个全新的VueComponent！！！<br>  4、关于this指向：<br>     1）组件配置中：<br>       data函数、methods中的函数、watch中的函数、computed中的函数，它们的this均是【VueComponent实例对象】<br>     2）new Vue(options)配置中：<br>       data函数、methods中的函数、watch中的函数、computed中的函数，它们的this均是【Vue实例对象】<br>  5、VueComponent的实例对象，以后简称vc（也可称之为：组件实例对象）<br>     Vue的实例对象，以后简称vm</p><p>1、一个重要的内置关系：<code>VueComponent.prototype.__proto__ === Vue.prototype</code><br>2、为什么要有这个关系：让组件实例对象（vc）可以访问到Vue原型上的属性、方法</p></div>    <div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/vue/5.jpg"/></div></div><h2 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h2><h3 id="安装脚手架"><a href="#安装脚手架" class="headerlink" title="安装脚手架"></a>安装脚手架</h3><p><strong>简介</strong><br>Vue CLI（全名：command Line Interface）是一个基于 Vue.js 进行快速开发的完整系统。</p><p><strong>安装</strong><br><strong>命令行操作步骤</strong>：</p><ol><li>下载速度慢先配置淘宝镜像：<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry http://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li><li>全局安装：<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure></li><li>测试是否安装成功<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue -V </span><br></pre></td></tr></table></figure></li><li>创建脚手架<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create vue_test</span><br></pre></td></tr></table></figure></li><li>选择vue版本</li><li>进入创建好的文件夹并在cmd输入指令<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure></li></ol><details class="folding-tag" green close><summary> 关闭语法检查 </summary>              <div class='content'>              <p>找到vue.config.js文件，在其中添加代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">lintOnSave</span>:<span class="literal">false</span> <span class="comment">//关闭语法检查</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>              </div>            </details><h3 id="脚手架文件结构"><a href="#脚手架文件结构" class="headerlink" title="脚手架文件结构"></a>脚手架文件结构</h3><blockquote><p>├── node_modules<br>├── public<br>│   ├── favicon.ico: 页签图标<br>│   └── index.html: 主页面<br>├── src<br>│   ├── assets: 存放静态资源<br>│   │   └── logo.png<br>│   │── component: 存放组件<br>│   │   └── HelloWorld.vue<br>│   │── App.vue: 汇总所有组件<br>│   │── main.js: 入口文件<br>├── .gitignore: git版本管制忽略的配置<br>├── babel.config.js: babel的配置文件<br>├── package.json: 应用包配置文件<br>├── README.md: 应用描述文件<br>├── package-lock.json：包版本控制文件</p></blockquote><div class="tip "><p><strong>关于不同版本的Vue</strong>:</p><ol><li><code>vue.js</code>与<code>vue.runtime.xxx.js</code>的区别:<br>(1). <code>vue.js</code>是完整版的Vue，包含:<strong>核心功能</strong>+<strong>模板解析器</strong><br>(2). <code>vue.runtime.xxx.js</code>是运行版的Vue，只包含: <strong>核心功能</strong>;<strong>没有模板解析器</strong></li><li>因为<code>vue.runtime.xxx.js</code>没有模板解析器，所以不能使用template配置项，需要使用<code>render</code>函数接收到的<code>createElement</code>函数去指定具体内容。</li></ol></div>   <h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p><strong>vue.config.js配置文件</strong></p><ul><li>使用<code>vue inspect &gt; output.js</code>可以查看到Vue脚手架的默认配置。</li><li>使用<code>vue.config.js</code>可以对脚手架进行个性化定制，详情见：<a href="https://cli.vuejs.org/zh/config/">前往官网查看修改配置参考</a></li></ul><h3 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h3><ol><li>被用来给元素或子组件注册引用信息（<strong>id的替代者</strong>）</li><li>应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）</li><li><strong>使用方式</strong>：<ul><li>打标识：<code>&lt;h1 ref=&quot;xxx&quot;&gt;.....&lt;/h1&gt;</code>或 <code>&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</code></li><li>获取：this.$refs.xxx</li></ul></li></ol><h3 id="prop属性"><a href="#prop属性" class="headerlink" title="prop属性"></a>prop属性</h3><ol><li><strong>功能</strong>：让组件接收外部传过来的数据</li><li><strong>传递数据</strong>：<code>&lt;Demo name=&quot;xxx&quot;/&gt;</code></li><li><strong>接收数据</strong>：<ul><li>第一种方式（只接收）：<code>props:[&#39;name&#39;]</code></li><li>第二种方式（限制类型）：<code>props:&#123;name:String&#125;</code></li><li>第三种方式（限制类型、限制必要性、指定默认值）：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line"><span class="attr">name</span>:&#123;</span><br><span class="line"><span class="attr">type</span>:<span class="title class_">String</span>, <span class="comment">//类型</span></span><br><span class="line"><span class="attr">required</span>:<span class="literal">true</span>, <span class="comment">//必要性</span></span><br><span class="line"><span class="attr">default</span>:<span class="string">&#x27;老王&#x27;</span> <span class="comment">//默认值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><details class="folding-tag" green close><summary> 备注 </summary>              <div class='content'>              <p>props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。</p>              </div>            </details><h3 id="mixin-混入"><a href="#mixin-混入" class="headerlink" title="mixin(混入)"></a>mixin(混入)</h3><ol><li><strong>功能</strong>：可以把多个组件共用的配置提取成一个混入对象</li><li><strong>使用方式</strong>：<ul><li><strong>第一步定义混合</strong>：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;....&#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;....&#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>第二步使用混入</strong>：<br>​  <strong>全局混入</strong>：<code>Vue.mixin(xxx)</code><br>​  <strong>局部混入</strong>：<code>mixins:[&#39;xxx&#39;]</code></li></ul></li></ol><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><ol><li><strong>功能</strong>：用于增强Vue</li><li><strong>本质</strong>：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。</li><li><strong>定义插件</strong>：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">对象.<span class="property">install</span> = <span class="keyword">function</span> (<span class="params">Vue, options</span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 添加全局过滤器</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">filter</span>(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 添加全局指令</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">directive</span>(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 配置全局混入(合)</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 添加实例方法</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myMethod</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;...&#125;</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myProperty</span> = xxxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>4.<strong>使用插件</strong>：<code>Vue.use()</code></li></ol><h3 id="scoped样式"><a href="#scoped样式" class="headerlink" title="scoped样式"></a>scoped样式</h3><ol><li><strong>作用</strong>：让样式在局部生效，防止冲突。</li><li><strong>写法</strong>：<code>&lt;style scoped&gt;</code></li></ol><h3 id="总结TodoList案例"><a href="#总结TodoList案例" class="headerlink" title="总结TodoList案例"></a>总结TodoList案例</h3><blockquote><ol><li>组件化编码流程：<br>​ (1).拆分静态组件：组件要按照功能点拆分，命名不要与html元素冲突。<br>​ (2).实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：<ul><li>一个组件在用：放在组件自身即可。</li><li>一些组件在用：放在他们共同的父组件上（状态提升）。<br>​ (3).实现交互：从绑定事件开始。</li></ul></li><li>props适用于：<br>​ (1).父组件 ==&gt; 子组件 通信<br>​ (2).子组件 ==&gt; 父组件 通信（要求父先给子一个函数）</li><li>使用v-model时要切记：v-model绑定的值不能是props传过来的值，因为props是不可以修改的！</li><li>props传过来的若是对象类型的值，修改对象中的属性时Vue不会报错，但不推荐这样做。</li></ol></blockquote><h3 id="webStorage"><a href="#webStorage" class="headerlink" title="webStorage"></a>webStorage</h3><ol><li>存储内容大小一般支持5MB左右（不同浏览器可能还不一样）</li><li>浏览器端通过 <code>Window.sessionStorage</code> 和 <code>Window.localStorage</code> 属性来实现本地存储机制。</li><li><strong>相关API</strong>：</li></ol><ul><li><code>xxxxxStorage.setItem(&#39;key&#39;, &#39;value&#39;)</code>:<br>该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。</li><li><code>xxxxxStorage.getItem(&#39;person&#39;)</code>:<br>​ 该方法接受一个键名作为参数，返回键名对应的值。</li><li><code>xxxxxStorage.removeItem(&#39;key&#39;)</code>:<br>​ 该方法接受一个键名作为参数，并把该键名从存储中删除。</li><li><code>xxxxxStorage.clear()</code>:<br>​ 该方法会清空存储中的所有数据。</li></ul><p><strong>备注</strong>：</p><ol><li>SessionStorage存储的内容会随着浏览器窗口关闭而消失。</li><li>LocalStorage存储的内容，需要手动清除才会消失。</li><li><code>xxxxxStorage.getItem(xxx)</code>如果xxx对应的value获取不到，那么getItem的返回值是null。</li><li><code>JSON.parse(null)</code>的结果依然是null。</li></ol><h3 id="组件的自定义事件"><a href="#组件的自定义事件" class="headerlink" title="组件的自定义事件"></a>组件的自定义事件</h3><ol><li>一种组件间通信的方式，适用于：<strong>子组件</strong> ===&gt; <strong>父组件</strong></li><li>使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（事件的回调在A中）。</li><li>绑定自定义事件：<br>第一种方式，在父组件中：<code>&lt;Demo @atguigu=&quot;test&quot;/&gt;</code>或 <code>&lt;Demo v-on:atguigu=&quot;test&quot;/&gt;</code><br>第二种方式，在父组件中：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Demo</span> ref=<span class="string">&quot;demo&quot;</span>/&gt;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">xxx</span>.$on(<span class="string">&#x27;atguigu&#x27;</span>,<span class="variable language_">this</span>.<span class="property">test</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>若想让自定义事件只能触发一次，可以使用once修饰符，或<code>$once</code>方法。</li><li>触发自定义事件：<code>this.$emit(&#39;atguigu&#39;,数据)</code></li><li>解绑自定义事件<code>this.$off(&#39;atguigu&#39;)</code></li><li>组件上也可以绑定原生DOM事件，需要使用native修饰符。</li><li>注意：通过<code>this.$refs.xxx.$on(&#39;atguigu&#39;,回调)</code>绑定自定义事件时，回调要么配置在methods中，要么用箭头函数，否则this指向会出问题！</li></ol><h3 id="全局事件总线"><a href="#全局事件总线" class="headerlink" title="全局事件总线"></a>全局事件总线</h3><ol><li>一种组件间通信的方式，适用于<strong>任意组件间通信</strong>。</li><li><strong>安装全局事件总线</strong>：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span> <span class="comment">//安装全局事件总线，$bus就是当前应用的vm</span></span><br><span class="line">&#125;,</span><br><span class="line">    ......</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure></li><li><strong>使用事件总线</strong>：</li></ol><ul><li><strong>接收数据</strong>：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的回调留在A组件自身。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">demo</span>(<span class="params">data</span>)&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;xxxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>提供数据</strong>：<code>this.$bus.$emit(&#39;xxxx&#39;,数据)</code></li></ul><ol><li>最好在<code>beforeDestroy</code>钩子中，用$off去解绑当前组件所用到的事件。</li></ol><h3 id="消息订阅与发布（pubsub）"><a href="#消息订阅与发布（pubsub）" class="headerlink" title="消息订阅与发布（pubsub）"></a>消息订阅与发布（pubsub）</h3><ol><li>一种组件间通信的方式，适用于<strong>任意组件间通信</strong>。</li><li><strong>使用步骤</strong>：</li></ol><ul><li><strong>安装pubsub</strong>：<code>npm i pubsub-js</code></li><li><strong>引入</strong>: <code>import pubsub from &#39;pubsub-js&#39;</code></li><li><strong>接收数据</strong>：A组件想接收数据，则在A组件中订阅消息，订阅的回调留在A组件自身。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">demo</span>(<span class="params">data</span>)&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">pid</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&#x27;xxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>) <span class="comment">//订阅消息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol><li>提供数据：<code>pubsub.publish(&#39;xxx&#39;,数据)</code></li><li>最好在beforeDestroy钩子中，用<code>PubSub.unsubscribe(pid)</code>去取消订阅。</li></ol><h3 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h3><ol><li><strong>语法</strong>：<code>this.$nextTick</code>(回调函数)</li><li><strong>作用</strong>：在下一次 DOM 更新结束后执行其指定的回调。</li><li><strong>什么时候用</strong>：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行。</li></ol><h3 id="Vue封装的过度与动画"><a href="#Vue封装的过度与动画" class="headerlink" title="Vue封装的过度与动画"></a>Vue封装的过度与动画</h3><p><strong>作用</strong>：在插入、更新或移除DOM元素时，在合适的时候给元素添加样式类名。<br><strong>写法</strong>：</p><ol><li><strong>准备好样式</strong>：<ul><li>元素进入的样式：<br><code>v-enter</code>：进入的起点<br><code>v-enter-active</code>：进入过程中<br><code>v-enter-to</code>：进入的终点</li><li>元素离开的样式：<br><code>v-leave</code>：离开的起点<br><code>v-leave-active</code>：离开过程中<br><code>v-leave-to</code>：离开的终点</li></ul></li><li>使用<code>&lt;transition&gt;</code>包裹要过度的元素，并配置name属性：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition name=<span class="string">&quot;hello&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>你好啊！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure><strong>备注</strong>：若有多个元素需要过度，则需要使用：<code>&lt;transition-group&gt;</code>，且每个元素都要指定key值。</li></ol><h3 id="vue脚手架配置代理"><a href="#vue脚手架配置代理" class="headerlink" title="vue脚手架配置代理"></a>vue脚手架配置代理</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>在<code>vue.config.js</code>中添加如下配置：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>:&#123;</span><br><span class="line">  <span class="attr">proxy</span>:<span class="string">&quot;http://localhost:5000&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>说明</strong>：<br><strong>优点</strong>：配置简单，请求资源时直接发给前端（8080）即可。<br><strong>缺点</strong>：不能配置多个代理，不能灵活的控制请求是否走代理。<br>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）</p></blockquote><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>​编写<code>vue.config.js</code>配置具体代理规则：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">      <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api1&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api1&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5000&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api1&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;/api2&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api2&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5001&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api2&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span></span><br><span class="line"><span class="comment">   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080</span></span><br><span class="line"><span class="comment">   changeOrigin默认值为true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><blockquote><p><strong>说明</strong>：<br><strong>优点</strong>：可以配置多个代理，且可以灵活的控制请求是否走代理。<br><strong>缺点</strong>：配置略微繁琐，请求资源时必须加前缀。</p></blockquote><h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h3><p><strong>作用</strong>：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 <strong>父组件</strong> ===&gt; <strong>子组件</strong> 。</p><p><strong>分类</strong>：默认插槽、具名插槽、作用域插槽<br><strong>默认插槽</strong>：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        <span class="tag">&lt;<span class="name">Category</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span>&gt;</span>html结构1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line">子组件Category中：</span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!-- 定义插槽 --&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">slot</span>&gt;</span>插槽默认内容...<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>具名插槽</strong>：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        <span class="tag">&lt;<span class="name">Category</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span>&gt;</span>html结构1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span>&gt;</span>html结构2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line">子组件Category中：</span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!-- 定义插槽 --&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;center&quot;</span>&gt;</span>插槽默认内容...<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>插槽默认内容...<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><br><strong>作用域插槽</strong>：<br><strong>理解</strong>：数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）<br><strong>具体编码</strong>：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line"><span class="comment">&lt;!-- 父组件中展示下面两种不同的子组件结构。使用的都是子组件中的同一个数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Category</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">scope</span>=<span class="string">&quot;scopeData&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成的是ul列表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;g in scopeData.games&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;g&quot;</span>&gt;</span>&#123;&#123;g&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Category</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scopeData&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成的是h4标题 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">v-for</span>=<span class="string">&quot;g in scopeData.games&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;g&quot;</span>&gt;</span>&#123;&#123;g&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line">子组件中Category：</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:games</span>=<span class="string">&quot;games&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&#x27;Category&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>:[<span class="string">&#x27;title&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//数据在子组件自身</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">games</span>:[<span class="string">&#x27;红色警戒&#x27;</span>,<span class="string">&#x27;穿越火线&#x27;</span>,<span class="string">&#x27;劲舞团&#x27;</span>,<span class="string">&#x27;超级玛丽&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;组件&quot;&gt;&lt;a href=&quot;#组件&quot; class=&quot;headerlink&quot; title=&quot;组件&quot;&gt;&lt;/a&gt;组件&lt;/h1&gt;&lt;h2 id=&quot;非单文件组件&quot;&gt;&lt;a href=&quot;#非单文件组件&quot; class=&quot;headerlink&quot; title=&quot;非单文件组件&quot;&gt;&lt;/a&gt;非</summary>
      
    
    
    
    <category term="笔记" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>vue笔记（一）</title>
    <link href="http://example.com/2022/12/11/vue%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://example.com/2022/12/11/vue%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2022-12-10T16:00:00.000Z</published>
    <updated>2023-01-06T15:13:52.222Z</updated>
    
    <content type="html"><![CDATA[<details class="folding-tag" green close><summary> 参考 </summary>              <div class='content'>              <ol><li><p>学习视频链接：</p><div class="tag link"><a class="link-card" title="尚硅谷Vue2.0+Vue3.0全套教程" href="https://www.bilibili.com/video/BV1Zy4y1K7SH/"><div class="left"><img src="http://GitHubxxx17.github.io/img/bilibili.jpeg"/></div><div class="right"><p class="text">尚硅谷Vue2.0+Vue3.0全套教程</p><p class="url">https://www.bilibili.com/video/BV1Zy4y1K7SH/</p></div></a></div></li><li><p>官方文档：</p><div class="tag link"><a class="link-card" title="vue.js" href="https://v2.cn.vuejs.org/"><div class="left"><img src="https://v2.cn.vuejs.org/images/logo.svg"/></div><div class="right"><p class="text">vue.js</p><p class="url">https://v2.cn.vuejs.org/</p></div></a></div></li></ol>              </div>            </details><h1 id="Vue入门"><a href="#Vue入门" class="headerlink" title="Vue入门"></a>Vue入门</h1><div class="tip info"><p>Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p></div><h2 id="搭建Vue开发环境"><a href="#搭建Vue开发环境" class="headerlink" title="搭建Vue开发环境"></a>搭建Vue开发环境</h2><ol><li><p>在<a href="https://v2.cn.vuejs.org/v2/guide/installation.html">官方文档</a>中下载<code>开发版本</code>和<code>生产版本</code>;</p></li><li><p>在html中引入Vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;本地vue.js的路径&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 例如 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>搭建Vue开发环境<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>处理控制台出现的警告<div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/vue/1.jpg"/></div></div></li></ol><ul><li><p>安装开发者工具<br><code>Vue.js devtools</code>是基于chrome的一款浏览器插件，是开发过程中必不可少的，其高效、简洁、方便的特点深受vue开发者的喜爱。<br><a href="https://chrome.pictureknow.com/extension?id=d50143a5f53d406dbe992277bfc90521">前往下载</a></p></li><li><p>下载完成后点击谷歌浏览器右上角的<code>扩展程序</code>-&gt;<code>管理扩展程序</code>-&gt;打开<code>开发者模式</code>,将下载好的文件拖入页面。</p></li><li><p>最后再点击谷歌浏览器右上角的<code>扩展程序</code>，可以看到<code>Vue.js devtools</code>，点击右边的小图钉将它固定在页面导航栏里面，以后方便使用。</p></li><li><p>阻止 vue 在启动时生成生产提示：</p><div class="tabs" id="解决方法"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#解决方法-1">方法一</button></li><li class="tab"><button type="button" data-href="#解决方法-2">方法二</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="解决方法-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;<span class="comment">//设置为 false 以阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="解决方法-2"><p>将vue.js中第367行<code>productionTip: true</code>改成<code>productionTip: false</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></li></ul><h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><blockquote><p><strong>Vue模板语法有2大类:</strong></p><ol><li><strong>插值语法</strong><br>功能: 用于解析标签体内容。<br>写法: <code>&#123;&#123;xxx&#125;&#125;</code>，xxx是js表达式，且可以直接读取到data中的所有属性</li><li><strong>指令语法</strong><br>功能: 用于解析标签(包括: 标签属性、标签体内容、绑定事件…..)。<br>举例: <code>v-bind:href=&quot;xxx&quot;</code>或简写为 <code>:href=&quot;xxx&quot;</code>，xxx同样要写js表达式且可以直接读取到data中的所有属性。<br>备注: Vue中有很多的指令，且形式都是: <code>v-????</code>，此处我们只是拿v-bind举个例子。</li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备一个容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>插值标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>hello,&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>指令语法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>点我去博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;a v-bind:href=&quot;url&quot; target=&quot;_blank&quot;&gt;点我去博客&lt;/a&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;.box1&#x27;</span>, <span class="comment">//el用于指定当前vue实例为哪个容器服务</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;      <span class="comment">//data中用于存储数据</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">name</span>: <span class="string">&#x27;hhh&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">url</span>: <span class="string">&#x27;http://githubxxx17.github.io&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><blockquote><p><strong>Vue中有2种数据绑定的方式:</strong></p><ol><li><strong>单向绑定(v-bind)</strong>: 数据只能从data流向页面。</li><li><strong>双向绑定(v-model)</strong>: 数据不仅能从data流向页面，还可以从页面流向data。<br>备注:<br>双向绑定一般都应用在表单类元素上 (如: input、select等)<br><code>v-model:value</code> 可以简写为 <code>v-model</code>，因为v-model默认收集的就是value值。</li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 普通写法 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;div class=&quot;box2&quot;&gt;</span></span><br><span class="line"><span class="comment">    单向数据绑定：&lt;input type=&quot;text&quot; v-bind:value=&quot;name&quot;&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="comment">    双向数据绑定：&lt;input type=&quot;text&quot; v-model:value=&quot;name&quot;&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="comment">&lt;/div&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 简写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span></span><br><span class="line">    单向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    双向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-model只能用在表单类元素（输入类元素）上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;.box2&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">name</span>: <span class="string">&#x27;xxx&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="el和data的两种写法"><a href="#el和data的两种写法" class="headerlink" title="el和data的两种写法"></a>el和data的两种写法</h2><blockquote><p><strong>data与el的2种写法</strong></p><ol><li><strong>e1有2种写法:</strong><br>(1).new Vue时候配置el属性。<br>(2).先创建Vue实例，随后再通过<code>vm.$mount(&#39;#root&#39;)</code>指定el的值</li><li><strong>data有2种写法:</strong><br>(1).对象式<br>(2).函数式<br>如何选择: 目前哪种写法都可以，以后学习到组件时，data必须使用函数式，否则会报错。</li><li><strong>一个重要的原则:</strong><br>由Vue管理的函数，一定不要写箭头函数，一旦写了箭头函数，this就不再是Vue实例了。</li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello,&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//el的两种写法</span></span><br><span class="line"><span class="keyword">const</span> x = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="comment">// el: &#x27;#root&#x27;, //第一种写法</span></span><br><span class="line">  <span class="attr">data</span>: &#123; </span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;world&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">x.$mount(<span class="string">&#x27;#root&#x27;</span>);<span class="comment">//第二种写法 mount:挂载</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//data的两种写法</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">  <span class="comment">//data的第一种写法：对象式</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;world&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//data的第二种写法：函数式</span></span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 函数this为Vue实例对象</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;world&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h2><details class="folding-tag" green close><summary> 回顾Object.defineProperty方法 </summary>              <div class='content'>              <p>Object.defineProperty（对象，属性，{value:值}）;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">18</span></span><br><span class="line"><span class="keyword">let</span> person  = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;h&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person,<span class="string">&#x27;age&#x27;</span>,&#123;</span><br><span class="line">  <span class="comment">// value: 18,</span></span><br><span class="line">  <span class="attr">enumerable</span>:<span class="literal">true</span>,<span class="comment">//控制属性是否可以枚举，默认值为false</span></span><br><span class="line">  <span class="attr">writable</span>:<span class="literal">true</span>, <span class="comment">//控制属性是否可以修改，默认值为false</span></span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,<span class="comment">//控制属性是否可以被删除，默认值为false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//当有人读取person的age属性时，get函数(getter)就会被调用，且返回值就是age的值</span></span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//当有人修改person的age属性时，set函数(setter)就会被调用，且会收到修改的具体值</span></span><br><span class="line">  <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    num = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>              </div>            </details><p><strong>数据代理概念</strong>：通过一个对象代理对另一个对象中属性的操作(读/写)</p><blockquote><ol><li><strong>Vue中的数据代理</strong>:<br>通过vm对象来代理data对象中属性的操作(读/写)</li><li><strong>vue中数据代理的好处</strong>:<br>更加方便的操作data中的数据</li><li><strong>基本原理</strong>:<br>通过<code>object.defineProperty()</code>把data对象中所有属性添加到vm上。<br>为每一个添加到vm上的属性，都指定一个getter/setter。<br>在getter/setter内部去操作 (读/写)data中对应的属性。</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">x</span>: <span class="number">100</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; <span class="attr">y</span>: <span class="number">200</span> &#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineproperty</span>(obj2, <span class="string">&#x27;x&#x27;</span>, &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj.<span class="property">x</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">set</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    obj.<span class="property">x</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><blockquote><p><strong>事件的基本使用</strong>:</p><ol><li>使用<code>v-on:xxx</code> 或 <code>@xxx</code> 绑定事件，其中xxx是事件名;</li><li>事件的回调需要配置在methods对象中，最终会在vm上;</li><li>methods中配置的函数，不要用箭头函数! 否则this就不是vm了;</li><li>methods中配置的函数，都是被Vue所管理的函数，this的指向是vm 或 组件实例对象;</li><li><code>@click=&quot;demo&quot;</code>和 <code>@click=&quot;demo($event)&quot;</code> 效果一致，但后者可以传参。</li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学习数据处理<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;button v-on:click = &quot;showinfo&quot;&gt;点我显示提示信息&lt;/button&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span> = <span class="string">&quot;showinfo1&quot;</span>&gt;</span>点我显示提示信息(不传参)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span> = <span class="string">&quot;showinfo2($event,6)&quot;</span>&gt;</span>点我显示提示信息(传参)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>:&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">showinfo1</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;你好&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">showinfo2</span>(<span class="params">event,num</span>)&#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;你好&#x27;</span>+num);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>.<span class="property">innerText</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p><strong>Vue中的事件修饰符</strong>:</p><ol><li><strong>prevent</strong>：阻止默认事件 (常用);</li><li><strong>stop</strong>：阻止事件冒泡(常用);</li><li><strong>once</strong>：事件只触发一次(常用);</li><li><strong>capture</strong>：使用事件的捕获模式;</li><li><strong>self</strong>：只有<code>event.target</code>是当前操作的元素是才触发事件;</li><li><strong>passive</strong>：事件的默认行为立即执行，无需等待事件回调执行完毕。</li></ol></blockquote><p><strong>注意</strong>：修饰符可以连续写，例如<code>@click.stop.prevent</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 阻止默认事件 (常用) --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://githubxxx17.github.io&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;goto&quot;</span>&gt;</span>点我去博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 阻止事件冒泡(常用) --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showinfo1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;showinfo1&quot;</span>&gt;</span>点我显示提示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 事件只触发一次(常用) --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;showinfo1&quot;</span>&gt;</span>点我显示提示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 使用事件的捕获模式 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span> @<span class="attr">click.capture</span> = <span class="string">&quot;showMsg(1)&quot;</span>&gt;</span></span><br><span class="line">    div1</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span> @<span class="attr">click</span> = <span class="string">&quot;showMsg(2)&quot;</span>&gt;</span></span><br><span class="line">      div2</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 只有event.target是当前操作的元素是才触发事件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span> @<span class="attr">click.self</span>=<span class="string">&quot;showinfo1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showinfo1&quot;</span>&gt;</span>点我显示提示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 事件的默认行为立即执行，无需等待事件回调执行完毕 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> @<span class="attr">wheel</span>=<span class="string">&quot;wheel&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn1</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: beige;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">103</span>, <span class="number">230</span>, <span class="number">255</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: antiquewhite;</span><br><span class="line">  <span class="attribute">overflow</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>:&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">showinfo1</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;你好&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">showinfo2</span>(<span class="params">event,num</span>)&#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;你好&#x27;</span>+num);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>.<span class="property">innerText</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">goto</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;去博客&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">showMsg</span>(<span class="params">a</span>)&#123;</span><br><span class="line">      <span class="title function_">alert</span>(a);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">wheel</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; <span class="number">10000</span>;i++)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><ol><li><strong>Vue中常用的按键别名</strong>:<br> 回车 =&gt; enter<br> 删除 =&gt; delete (捕获“删除”和“退格”键)<br> 退出 =&gt; esc<br> 空格 =&gt;space<br> 换行 =&gt;tab (特殊，必须配合keydown去使用)<br> 上 =&gt; up<br> 下 =&gt; down<br> 左 =&gt;left<br> 右 =&gt;right</li><li>Vue未提供别名的按键，可以使用按键原始的key值去绑定，但注意要转为kebab-case (短横线命名)。</li><li>系统修饰键(用法特殊) : ctrl、alt、shift、meta<br>(1). 配合keyup使用: 按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发。<br>(2). 配合keydown使用: 正常触发事件。</li><li>也可以使用keycode去指定具体的按键 (不推荐)。</li><li><code>Vue.config.keyCodes</code>.自定义键名 = 键码，可以去定制按键别名。</li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;keyup&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Vue未提供别名的按键，可以使用按键原始的key值去绑定，但注意要转为kebab-case --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.caps-lock</span>=<span class="string">&quot;keyup&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 按下ctrl的同时，再按下其他键，随后释放其他键，事件才被触发 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.ctrl.y</span>=<span class="string">&quot;keyup&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 使用keycode去指定具体的按键(不推荐) --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.13</span>=<span class="string">&quot;keyup&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 自定义键名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.huiche</span>=<span class="string">&quot;keyup&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义键名</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">keyCodes</span>.<span class="property">huiche</span> = <span class="number">13</span>；</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>:&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">keyup</span>(<span class="params">e</span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><details class="folding-tag" green close><summary> 姓名案例（methods实现） </summary>              <div class='content'>              <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  姓名：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullName()&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>:&#123;</span><br><span class="line">    <span class="attr">firstName</span>:<span class="string">&#x27;张&#x27;</span>,</span><br><span class="line">    <span class="attr">lastName</span>:<span class="string">&#x27;三&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">fullName</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>              </div>            </details><blockquote><p><strong>计算属性</strong>：</p><ol><li><strong>定义</strong>：要用的属性不存在，要通过已有属性计算得来。</li><li><strong>原理</strong>：底层借助了<code>objcet.defineproperty</code>方法提供的getter和setter。</li><li><strong>get函数什么时候执行?</strong><br>(1).初次读取时会执行一次。<br>(2).当依赖的数据发生改变时会被再次调用。</li><li><strong>优势</strong>：与<code>methods</code>实现相比，内部有缓存机制(复用) ，效率更高，调试方便。</li><li><strong>备注</strong>：<br>(1).计算属性最终会出现在vm上，直接读取使用即可。<br>(2).如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时依赖的数据发生改变。</li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  姓名：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>:&#123;</span><br><span class="line">    <span class="attr">firstName</span>:<span class="string">&#x27;张&#x27;</span>,</span><br><span class="line">    <span class="attr">lastName</span>:<span class="string">&#x27;三&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="attr">fullName</span>:&#123;</span><br><span class="line">      <span class="comment">//get有什么作用?   </span></span><br><span class="line">      <span class="comment">//当有人读取fulIName时，get就会被调用，且返回值就作为fulIName的值</span></span><br><span class="line">      <span class="comment">//get什么时候调用? </span></span><br><span class="line">      <span class="comment">//1.初次读取fulName时。2.所依赖的数据发生变化时。</span></span><br><span class="line">      <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//get什么时候调用? </span></span><br><span class="line">      <span class="comment">//当fulIName被修改时。</span></span><br><span class="line">      <span class="title function_">set</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;set&#x27;</span>,value);</span><br><span class="line">        <span class="keyword">const</span> arr = value.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">firstName</span> = arr[o];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">lastName</span> = arr[<span class="number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//简写,只调用get时</span></span><br><span class="line">    <span class="comment">// fullName()&#123;</span></span><br><span class="line">    <span class="comment">//   return this.firstName + &#x27;-&#x27; + this.lastName;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="监视属性"><a href="#监视属性" class="headerlink" title="监视属性"></a>监视属性</h2><blockquote><p><strong>监视属性watch</strong>:</p><ol><li>当被监视的属性变化时，回调函数自动调用，进行相关操作</li><li>监视的属性必须存在，才能进行监视!!</li><li>监视的两种写法:<br>(1). new Vue时传入watch配置<br>(2). 通过<code>vm.$watch</code>监视</li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>今天天气很&#123;&#123;info&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeWeather&quot;</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>:&#123;</span><br><span class="line">    <span class="attr">ishot</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="title function_">info</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">ishot</span> ? <span class="string">&quot;炎热&quot;</span> : <span class="string">&quot;凉爽&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">changeWeather</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">ishot</span> = !<span class="variable language_">this</span>.<span class="property">ishot</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">watch</span>:&#123;<span class="comment">//watch第一种写法</span></span><br><span class="line">    <span class="attr">ishot</span>:&#123;</span><br><span class="line">      <span class="attr">immediate</span>:<span class="literal">true</span>,<span class="comment">//初始化时让handler调用一下，默认值为false</span></span><br><span class="line">      <span class="comment">//handler什么时候调用? 当isHot发生改变时。</span></span><br><span class="line">      <span class="title function_">handler</span>(<span class="params">newValue,oldValue</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;isHot被修改了&quot;</span> ,newValue,oldValue);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//简写</span></span><br><span class="line">    <span class="comment">// ishot(newValue,oldValue)&#123;</span></span><br><span class="line">    <span class="comment">//   console.log(&quot;isHot被修改了&quot; ,newValue,oldValue);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//watch第二种写法</span></span><br><span class="line">vm.$watch(<span class="string">&#x27;ishot&#x27;</span>,&#123;</span><br><span class="line">    <span class="title function_">handler</span>(<span class="params">newValue,oldValue</span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;isHot被修改了&quot;</span> ,newValue,oldValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p><strong>深度监视</strong>:<br>  (1).Vue中的watch默认不监测对象内部值的改变 (一层)。<br>  (2).配置deep:true可以监测对象内部值改变(多层)。<br><strong>备注</strong>:<br>  (1).Vue自身可以监测对象内部值的改变，但Vue提供的watch默认不可以!<br>  (2).使用watch时根据数据的具体结构，决定是否采用深度监视。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>a的值是:&#123;&#123;numbers.a&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;numbers.a++&quot;</span>&gt;</span>点我让a+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>b的值是:&#123;&#123;numbers.b&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;numbers.b++&quot;</span>&gt;</span>点我b+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;numbers = &#123;a:666,b:888&#125;&quot;</span>&gt;</span>彻底替换numbers<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>:&#123;</span><br><span class="line">    <span class="attr">numbers</span>: &#123;</span><br><span class="line">      <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">b</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">watch</span>:&#123;</span><br><span class="line">    <span class="comment">//监视多级结构中某个属性的变化</span></span><br><span class="line">    <span class="string">&#x27;numbers.a&#x27;</span>: &#123;</span><br><span class="line">      <span class="title function_">handler</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a被改变了&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//监视多级结构中所有属性的变化</span></span><br><span class="line">    <span class="attr">numbers</span>: &#123;   </span><br><span class="line">      <span class="attr">deep</span>:<span class="literal">true</span>,</span><br><span class="line">      <span class="title function_">handler</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;numbers改变了&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><div class="tip cogs"><p><strong>computed和watch之间的区别</strong>:</p><ol><li>computed能完成的功能，watch都可以完成。</li><li>watch能完成的功能，computed不一定能完成，例如: watch可以进行异步操作。<br><strong>两个重要的小原则</strong>:</li><li>所被Vue管理的函数，最好写成普通函数，这样this的指向才是vm 或 组件实例对象。</li><li>所有不被Vue所管理的函数(定时器的回调函数、ajax的回调函数等) ，最好写成箭头函数,这样this的指向才是vm 或 组件实例对象。</li></ol></div><h2 id="绑定样式"><a href="#绑定样式" class="headerlink" title="绑定样式"></a>绑定样式</h2><blockquote><ol><li><strong>class样式</strong><br>写法:<code>class=&quot;xxx&quot;</code>,xxx可以是字符串、对象、数组。<br>字符串写法适用于:类名不确定，要动态获取。<br>对象写法适用于:要绑定多个样式，个数不确定，名字也不确定。<br>数组写法适用于:要绑定多个样式，个数确定，名字也确定，但不确定用不用</li><li><strong>style样式</strong><br><code>:style=&quot;&#123;fontsize: xxx&#125;&quot;</code>其中xxx是动态值。<br><code>:style=&quot;[a,b]&quot;</code>其中a、b是样式对象。</li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 绑定class样式--字符串写法，适用于:样式的类名不确定，需要动态指定 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;color&quot;</span>  @<span class="attr">click</span>=<span class="string">&quot;changeColor&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span>&gt;</span>点我变色<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 绑定class样式--数组写法，适用于: 要绑定的样式个数不确定、名字也不确定 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classArr&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span>&gt;</span>数组写法<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 绑定class样式--对象写法，适用于: 要绑定的样式个数确定、名字也确定，但要动态决定用不用 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classObj&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span>&gt;</span>对象写法<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 绑定style样式--对象写法 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;styleObj&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span>&gt;</span>绑定style样式<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 绑定style样式--对象写法 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;styleArr&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span>&gt;</span>绑定style样式<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  user-select: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.blue</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: aqua;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.green</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: greenyellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.red</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.yellow</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fontcolor</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">239</span>, <span class="number">98</span>, <span class="number">255</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.border</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span>,</span><br><span class="line">    <span class="attr">classArr</span>: [<span class="string">&#x27;yellow&#x27;</span>,<span class="string">&#x27;fontcolor&#x27;</span>,<span class="string">&#x27;border&#x27;</span>],</span><br><span class="line">    <span class="attr">classObj</span>: &#123;</span><br><span class="line">      <span class="attr">yellow</span>: <span class="literal">true</span>,</span><br><span class="line">      fontcolor : <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">border</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">styleObj</span>: &#123;</span><br><span class="line">      <span class="attr">fontSize</span>: <span class="string">&#x27;40px&#x27;</span>,</span><br><span class="line">      <span class="attr">backgroundColor</span>: <span class="string">&#x27;aqua&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">styleArr</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">fontSize</span>: <span class="string">&#x27;30px&#x27;</span>,</span><br><span class="line">        <span class="attr">backgroundColor</span>: <span class="string">&#x27;aqua&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">border</span>: <span class="string">&#x27;1px solid #000&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">changeColor</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">const</span> color = [<span class="string">&#x27;blue&#x27;</span>,<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;yellow&#x27;</span>];</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">color</span> = color[<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">3</span>)];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><blockquote><ol><li><strong>V-if</strong><br>写法：<br> (1).<code>v-if=&quot;表达式&quot;</code><br> (2).<code>V-else-if=&quot;表达式&quot;</code><br> (3).<code>v-else=&quot;表达式&quot;</code><br>适用于：切换频率较低的场景。<br>特点：不展示的DOM元素直接被移除。<br>注意： v-if可以和:v-else-if、v-else一起使用，但要求结构不能被“打断”。</li><li><strong>V-show</strong><br>写法： <code>v-show=&quot;表达式&quot;</code><br>适用于：切换频率较高的场景。<br>特点：不展示的BOM元素未被移除，仅仅是使用样式隐藏掉。</li><li><strong>备注</strong>：使用v-if的时，元素可能无法获取到，而使用v-show一定可以获取到。</li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的n值是:&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 使用v-show做条件渲染 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-show</span>=<span class="string">&quot;false&quot;</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-show</span>=<span class="string">&quot;1 === 1&quot;</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 使用v-if做条件渲染 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">&quot;false&quot;</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">&quot;1 === 1&quot;</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- V-else利v-else-if --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;n === 1&quot;</span>&gt;</span>Angular<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">V-else-if</span>=<span class="string">&quot;n === 2&quot;</span>&gt;</span>React<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">V-else-if</span>=<span class="string">&quot;n1=== 3&quot;</span>&gt;</span>Vue<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">V-else</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- v-if与template的配合使用 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;n === 1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>尚硅谷<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>:&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;xxx17的博客&#x27;</span>,</span><br><span class="line">    <span class="attr">n</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><blockquote><p><strong>v-for指令</strong>:</p><ol><li>用于展示列表数据</li><li>语法: <code>v-for=&quot;(item， index) in xxx&quot;</code> <code>:key=&quot;yyy&quot;</code></li><li>可遍历: 数组、对象、字符串 (用的很少)、指定次数(用的很少)</li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 遍历数组 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;p in person&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;p.id&quot;</span>&gt;</span>&#123;&#123;p.id&#125;&#125;-&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) in person&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;index&#125;&#125;-&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 遍历对象 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,k) in car&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;k&quot;</span>&gt;</span>&#123;&#123;k&#125;&#125;-&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 遍历字符串(用得少) --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(char,index) in str&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;index&#125;&#125;-&#123;&#123;char&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 遍历指定次数(用得少)  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(num,index) in 6&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;index&#125;&#125;-&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">person</span>: [</span><br><span class="line">      &#123;<span class="attr">id</span>:<span class="number">001</span>,<span class="attr">name</span>:<span class="string">&#x27;a&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">id</span>:<span class="number">002</span>,<span class="attr">name</span>:<span class="string">&#x27;b&#x27;</span>,<span class="attr">age</span>:<span class="number">19</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">id</span>:<span class="number">003</span>,<span class="attr">name</span>:<span class="string">&#x27;c&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">car</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;奥迪A8&#x27;</span>,</span><br><span class="line">      <span class="attr">price</span>: <span class="string">&#x27;70w&#x27;</span>,</span><br><span class="line">      <span class="attr">color</span>: <span class="string">&#x27;黑色&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">str</span>: <span class="string">&#x27;abcde&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><details class="folding-tag" green close><summary> key的原理 </summary>              <div class='content'>              <div class="tip "><p><strong>面试题： react、vue中的key有什么作用? (key的内部原理)</strong></p><ol><li><strong>虚拟DOM中key的作用</strong>：<br>key是虚拟DOM对象的标识，当状态中的数据发生变化时，Vue会根据<code>新数据</code>生成<code>新的虚拟DOM</code>,随后Vue进行<code>新虚拟DOM</code>与<code>旧虚拟DOM</code> 的差异比较，比较规则如下：</li><li><strong>对比规则</strong>：<br>(1).旧虚拟DOM中找到了与新虚拟DOM相同的key：<br> ①.若虚拟DOM中内容没变，直接使用之前的真实DOM!<br> ②.若虚拟DOM中内容变了，则生成新的真实DOM，随后替换掉页面中之前的真实DOM。<br>(2).旧虚拟DOM中未找到与新虚拟DOM相同的key：<br> 创建新的真实DOM，随后渲染到到页面。 </li><li><strong>用index作为key可能会引发的问题</strong>：<br>(1).若对数据进行逆序添加、逆序删除等破坏顺序操作：<br> 会产生没有必要的真实DOM更新 ==&gt; 界面效果没问题，但效率低<br>(2).如果结构中还包含输入类的DOM：<br> 会产生错误DOM更新 ==&gt; 界面有问题。</li><li><strong>开发中如何选择key?</strong>：<br>(1).最好使用每条数据的唯一标识作为key，比如id、手机号、身份证号、学号等唯一值。<br>(2).如果不存在对数据的逆序添加、逆序则除等破坏顺序操作，仅用于渲染列表用于展示,使用index作为key是没有问题的。</li></ol></div><div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/vue/2.png"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/vue/3.png"/></div></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>key为index<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>添加一个d<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) in person&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;index&#125;&#125;-&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>key为id<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>添加一个d<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) in person&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;p.id&quot;</span>&gt;</span>&#123;&#123;index&#125;&#125;-&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">person</span>: [</span><br><span class="line">      &#123;<span class="attr">id</span>:<span class="number">001</span>,<span class="attr">name</span>:<span class="string">&#x27;a&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">id</span>:<span class="number">002</span>,<span class="attr">name</span>:<span class="string">&#x27;b&#x27;</span>,<span class="attr">age</span>:<span class="number">19</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">id</span>:<span class="number">003</span>,<span class="attr">name</span>:<span class="string">&#x27;c&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">add</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">const</span> p = &#123;<span class="attr">id</span>:<span class="number">004</span>,<span class="attr">name</span>:<span class="string">&#x27;d&#x27;</span>,<span class="attr">age</span>:<span class="number">40</span>&#125;;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">person</span>.<span class="title function_">unshift</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="列表过滤"><a href="#列表过滤" class="headerlink" title="列表过滤"></a>列表过滤</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>人员列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keyword&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) in filperson&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">keyword</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">person</span>: [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">001</span>, <span class="attr">name</span>: <span class="string">&#x27;马冬梅&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">002</span>, <span class="attr">name</span>: <span class="string">&#x27;周冬雨&#x27;</span>, <span class="attr">age</span>: <span class="number">19</span>, <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">003</span>, <span class="attr">name</span>: <span class="string">&#x27;周杰伦&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">003</span>, <span class="attr">name</span>: <span class="string">&#x27;温兆伦&#x27;</span>, <span class="attr">age</span>: <span class="number">21</span>, <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// filperson: []</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//监视属性写法</span></span><br><span class="line">  <span class="comment">// watch: &#123;</span></span><br><span class="line">  <span class="comment">//     keyword(val)&#123;</span></span><br><span class="line">  <span class="comment">//         this.filperson = this.person.filter((p)=&gt;&#123;</span></span><br><span class="line">  <span class="comment">//             return p.name.indexOf(val) != -1;</span></span><br><span class="line">  <span class="comment">//         &#125;)</span></span><br><span class="line">  <span class="comment">//     &#125;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">//计算属性写法</span></span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="title function_">filperson</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">person</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">p</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> p.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="variable language_">this</span>.<span class="property">keyword</span>) != -<span class="number">1</span>;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h3 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>人员列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keyword&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType = 2&quot;</span>&gt;</span>年龄升序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType = 1&quot;</span>&gt;</span>年龄降序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType = 0&quot;</span>&gt;</span>原排序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) in filperson&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">keyword</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">sortType</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">person</span>: [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">001</span>, <span class="attr">name</span>: <span class="string">&#x27;马冬梅&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">002</span>, <span class="attr">name</span>: <span class="string">&#x27;周冬雨&#x27;</span>, <span class="attr">age</span>: <span class="number">19</span>, <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">003</span>, <span class="attr">name</span>: <span class="string">&#x27;周杰伦&#x27;</span>, <span class="attr">age</span>: <span class="number">22</span>, <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">003</span>, <span class="attr">name</span>: <span class="string">&#x27;温兆伦&#x27;</span>, <span class="attr">age</span>: <span class="number">21</span>, <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="title function_">filperson</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> arr = <span class="variable language_">this</span>.<span class="property">person</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">p</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> p.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="variable language_">this</span>.<span class="property">keyword</span>) != -<span class="number">1</span>;</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">sortType</span>)&#123;</span><br><span class="line">        arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">p1,p2</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">sortType</span> == <span class="number">1</span> ? p2.<span class="property">age</span> - p1.<span class="property">age</span> : p1.<span class="property">age</span> - p2.<span class="property">age</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> arr</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="数据监测"><a href="#数据监测" class="headerlink" title="数据监测"></a>数据监测</h3><div class="tip "><p><strong>Vue监视数据的原理:</strong></p><ol><li><strong>vue会监视data中所有层次的数据</strong></li><li><p><strong>如何监测对象中的数据?</strong><br>通过setter实现监视，且要在new Vue时就传入要监测的数据<br>(1).对象中后追加的属性，Vue默认不做响应式处理<br>(2).如需给后添加的属性做响应式，请使用如下API:<br><code>Vue.set(target，propertyName/index，value)</code> 或<code>vm.$set(target，propertyName/index，value)</code></p></li><li><p><strong>如何监测数组中的数据?</strong><br>通过包裹数组更新元素的方法实现，本质就是做了两件事:<br>(1).调用原生对应的方法对数组进行更新。<br>(2).重新解析模板，进而更新页面。</p></li><li><p><strong>在Vue修改数组中的某个元素一定要用如下方法:</strong><br>(1).使用这些API:<code>push()</code>、<code>pop()</code>、<code>shift()</code>、<code>unshift()</code>、<code>splice()</code>、<code>sort()</code>、<code>reverse()</code><br>(2).<code>Vue.set()</code>或 <code>vm.$set()</code></p></li></ol><p><strong>特别注意</strong>: <code>Vue.set()</code> 和 <code>vm.$set()</code> 不能给vm 或 vm的根数据对象 添加属性!!</p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>学生信息<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>年龄+1岁<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addSex&quot;</span>&gt;</span>添加性别属性，默认值: 男<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addFriend&quot;</span>&gt;</span>在列表首位添加一个朋友<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updateFriend&quot;</span>&gt;</span>修改第一个朋友的名字为: 张三<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addHobby&quot;</span>&gt;</span>添加一个爱好<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updateHobby&quot;</span>&gt;</span>修改第一个爱好为: 开车<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>姓名: &#123;&#123;student.name&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>年龄: &#123;&#123;student.age&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-if</span>=<span class="string">&quot;student.sex&quot;</span>&gt;</span>性别：&#123;&#123;student.sex&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>爱好: <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(h,index) in student.hobby&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;h&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>朋友们: <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(f,index) in student.friends&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;f.name&#125;&#125;--&#123;&#123;f.age&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">student</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">      <span class="attr">hobby</span>: [<span class="string">&#x27;抽烟&#x27;</span>, <span class="string">&#x27;喝酒&#x27;</span>, <span class="string">&#x27;烫头&#x27;</span>],</span><br><span class="line">      <span class="attr">friends</span>: [</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&#x27;jerry&#x27;</span>, <span class="attr">age</span>: <span class="number">35</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&#x27;tony&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">addSex</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">student</span>,<span class="string">&#x27;sex&#x27;</span>,<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">      <span class="comment">// Vue.set(this.student,&#x27;sex&#x27;,&#x27;男&#x27;);</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">addFriend</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">friends</span>.<span class="title function_">unshift</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;tim&#x27;</span>,<span class="attr">age</span>:<span class="number">11</span>&#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">updateFriend</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">friends</span>[<span class="number">0</span>].<span class="property">name</span> = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">addHobby</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">hobby</span>.<span class="title function_">push</span>(<span class="string">&#x27;学习&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">updateHobby</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="comment">// this.student.hobby.splice(0,1,&#x27;开车&#x27;)</span></span><br><span class="line">      <span class="comment">// Vue.set(this.student.hobby,0,&#x27;开车&#x27;);</span></span><br><span class="line">      <span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">hobby</span>,<span class="number">0</span>,<span class="string">&#x27;开车&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h2 id="收集表单数据"><a href="#收集表单数据" class="headerlink" title="收集表单数据"></a>收集表单数据</h2><blockquote><p><strong>收集表单数据</strong>:<br>若:<code>&lt;input type=&quot;text&quot;/&gt;</code>，则v-model收集的是value值，用户输入的就是value值。<br>若:<code>&lt;input type=&quot;radio&quot;/&gt;</code>，则v-model收集的是value值，且要给标签配置value值<br>若:<code>&lt;input type=&quot;checkbox&quot;/&gt;</code></p><ol><li>没有配置input的value属性，那么收集的就是checked (勾选 or 未勾选，是布尔值)</li><li>配置input的value属性:<br>(1)v-model的初始值是非数组，那么收集的就是checked (勾选 or 未勾选，是布尔值)<br>(2)v-model的初始值是数组，那么收集的的就是value组成的数组<br>备注: v-model的三个修饰符:<ul><li><code>lazy</code>:失去焦点再收集数据</li><li><code>number</code>:输入字符串转为有效的数字</li><li><code>trim</code>:输入首尾空格过滤</li></ul></li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">  账号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;userInfo.account&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;userInfo.age&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  性别：</span><br><span class="line">  男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span></span><br><span class="line">  女<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  爱好：</span><br><span class="line">  学习<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;study&quot;</span>&gt;</span></span><br><span class="line">  吃饭<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;eat&quot;</span>&gt;</span></span><br><span class="line">  玩游戏<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;playGame&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  所属校区：</span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.city&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择校区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;beijing&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;shanghai&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;guangzhou&quot;</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  其他信息：</span><br><span class="line">  <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model.lazy</span>=<span class="string">&quot;userInfo.other&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.agree&quot;</span>&gt;</span>阅读并接受 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>《用户协议》<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">userInfo</span>: &#123;</span><br><span class="line">      <span class="attr">account</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">password</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">      <span class="attr">sex</span>: <span class="string">&#x27;female&#x27;</span>,</span><br><span class="line">      <span class="attr">hobby</span>: [],</span><br><span class="line">      <span class="attr">city</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">other</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">agree</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>.<span class="property">userInfo</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><blockquote><p>定义：对要显示的数据进行特定格式化后再显示(适用于一些简单逻辑的处理)<br>语法：</p><ol><li>注册过滤器： <code>Vue.filter(name,callback)</code> 或 <code>new Vue&#123;filters:&#123;&#125;&#125;</code></li><li>使用过滤器：<code>&#123;&#123;xxx过滤器名&#125;&#125;</code> 或 <code>v-bind:属性 =&quot;xxx过滤器名&quot;</code><br>备注：</li><li>过滤器也可以接收额外参数、多个过滤器也可以串联</li><li>并没有改变原本的数据，是产生新的对应的数据</li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>显示格式化后的时间<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 计算属性实现 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在是：&#123;&#123;fmtTime&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- methods实现 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在是：&#123;&#123;getFmtTime()&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 过滤器实现 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在是：&#123;&#123;time | timeFormater&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 过滤器实现(传参) --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在是：&#123;&#123;time | timeFormater(&#x27;YYYY-MM-DD&#x27;) | mySlice&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局过滤器</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;mySlice&#x27;</span>,<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> value.<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">4</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">time</span>: <span class="number">1672311332525</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="title function_">fmtTime</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">dayjs</span>(<span class="variable language_">this</span>.<span class="property">time</span>).<span class="title function_">format</span>(<span class="string">&#x27;YYYY年MM月DD日 HH-mm-ss&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">getFmtTime</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">dayjs</span>(<span class="variable language_">this</span>.<span class="property">time</span>).<span class="title function_">format</span>(<span class="string">&#x27;YYYY年MM月DD日 HH-mm-ss&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">filters</span>: &#123;</span><br><span class="line">    <span class="title function_">timeFormater</span>(<span class="params">value,str=<span class="string">&#x27;YYYY年MM月DD日 HH-mm-ss&#x27;</span></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">dayjs</span>(value).<span class="title function_">format</span>(str)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="内置指令"><a href="#内置指令" class="headerlink" title="内置指令"></a>内置指令</h2><details class="folding-tag" green close><summary> 我们学过的指令 </summary>              <div class='content'>              <p><strong>我们学过的指令</strong>:</p><ul><li><code>v-bind</code>：单向绑定解析表达式，可简写为 :xxx</li><li><code>v-model</code>：双向数据绑定</li><li><code>v-for</code>：遍历数组/对象/字符串</li><li><code>v-on</code>：绑定事件监听，可简写为@</li><li><code>v-if</code>：条件渲染(动态控制节点是否存存在)</li><li><code>v-else</code>：条件渲染(动态控制节点是否存存在)</li><li><code>v-show</code>：条件渲染(动态控制节点是否展示)</li></ul>              </div>            </details><blockquote><p><strong>v-text指令</strong>:</p><ol><li>作用:向其所在的节点中渲染文本内容</li><li>与插值语法的区别: v-text会替换掉节点中的内容，则不会。<br><strong>v-html指令</strong>:</li><li>作用:向指定节点中渲染包含html结构的内容。</li><li>与插值语法的区别:<br>(1).v-html会替换掉节点中所有的内容，则不会。<br>(2).v-html可以识别html结构。</li><li>严重注意: v-html有安全性问题! ! ! !<br>(1).在网站上动态渲染任意HTML是非常危险的，容易导致XSS攻击。<br>(2).一定要在可信的内容上使用v-html，永不要用在用户提交的内容上!<br><strong>v-cloak指令(没有值)</strong> :</li><li>本质是一个特殊属性，Vue实例创建完毕并接管容器后，会删掉v-cloak届性。</li><li>使用css配合v-cloak可以解决网速慢时页面展示出的问题。<br><strong>V-once指令</strong>:</li><li>v-once所在节点在初次动态渲染后，就视为静态内容了</li><li>以后数据的改变不会引起v-once所在结构的更新，可以用于优化性能。<br><strong>v-pre指令</strong>:</li><li>跳过其所在节点的编译过程。</li><li>可利用它跳过:没有使用指令语法、没有使用插值语法的节点，会加快编译。</li></ol></blockquote><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><blockquote><p><strong>自定义指令</strong>:</p><ol><li><strong>定义语法</strong>:<br>(1).局部指令：<code>new Vue(&#123;directives:&#123;指令名:配置对象&#125;&#125;)</code>或<code>new Vue(&#123;directives()&#123;&#125;&#125;)</code><br>(2).全局指令：<code>Vue.directive(指令名,配置对象)</code> 或<code>Vue.directive(指令名，回调函数)</code></li><li>配置对象中常用的3个回调:<br>(1).<code>bind</code>：指令与元素成功绑定时调用。<br>(2).<code>inserted</code>：指令所在元素被插入页面时调用。<br>(3).<code>update</code>：指令所在模板结构被重新解析时调用。</li><li><strong>备注</strong>：<br>(1).指令定义时不加v-，但使用时要加v-;<br>(2).指令名如果是多个单词，要使用kebab-case命名方式，不要用camelCase命名。</li></ol></blockquote><p>需求1: 定义一个v-big指令，和v-text功能类似，但会把绑定的数值放大10倍。<br>需求2: 定义一个v-fbind指令，和v-bind功能类似，但可以让其所绑定的input元素默认获取焦点。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的n的值是：<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>放大10倍后的n值<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-big</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n++<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-fbind:value</span>=<span class="string">&quot;n&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">n</span>: <span class="string">&#x27;1&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">directives</span>: &#123;</span><br><span class="line">    <span class="title function_">big</span>(<span class="params">element, binding</span>) &#123;</span><br><span class="line">      element.<span class="property">innerText</span> = binding.<span class="property">value</span> * <span class="number">10</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">fbind</span>: &#123;</span><br><span class="line">      <span class="comment">// 指令与元素成功绑定时</span></span><br><span class="line">      <span class="title function_">bind</span>(<span class="params">element, binding</span>) &#123;</span><br><span class="line">        element.<span class="property">value</span> = binding.<span class="property">value</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//指令所在元素插入页面时</span></span><br><span class="line">      <span class="title function_">inserted</span>(<span class="params">element, binding</span>) &#123;</span><br><span class="line">        element.<span class="title function_">focus</span>()</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//指令所在的模板被重新解析时</span></span><br><span class="line">      <span class="title function_">update</span>(<span class="params">element, binding</span>) &#123;</span><br><span class="line">          element.<span class="property">value</span> = binding.<span class="property">value</span></span><br><span class="line">        element.<span class="title function_">focus</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><blockquote><p>生命周期：</p><ol><li>又名：生命周期回调函数、生命周期函数、生命周期钩子。</li><li>是什么： Vue在关键时刻帮我们调用的一些特殊名称的函数。</li><li>生命周期函数的名字不可更改，但函数的具体内容是程序员根据需求编写的。</li><li>生命周期函数中的<code>this</code>指向是vm或组件实例对象。</li></ol></blockquote><div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/vue/4.png"/></div></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;opacity&#125;&quot;</span>&gt;</span>学习vue<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;stop()&quot;</span>&gt;</span>点击暂停<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">opacity</span>: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">stop</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.$destroy()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">opacity</span> -= <span class="number">0.01</span>;</span><br><span class="line">      <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">opacity</span> &lt;= <span class="number">0</span>) <span class="variable language_">this</span>.<span class="property">opacity</span> = <span class="number">1</span>;</span><br><span class="line">    &#125;,<span class="number">20</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timer</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><div class="tip cogs"><p>常用的生命周期钩子:</p><ol><li><strong>mounted</strong>：发送ajax请求、启动定时器、绑定自定义事件、订阅消息等初始化操作。</li><li><strong>beforeDestroy</strong>：清除定时器、解绑自定义事件、取消订阅消息等收尾工作。<br>关于销毁Vue实例：</li><li>销毁后借助Vue开发者工具看不到任何信息。</li><li>销毁后自定义事件会失效，但原生DOM事件依然有效。</li><li>一般不会在beforeDestroy操作数据，因为即便操作数据，也不会再触发更新流程了。</li></ol></div>]]></content>
    
    
      
      
    <summary type="html">&lt;details class=&quot;folding-tag&quot; green close&gt;&lt;summary&gt; 参考 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;ol&gt;&lt;li&gt;&lt;p&gt;学习视频链接：&lt;/p&gt;&lt;di</summary>
      
    
    
    
    <category term="笔记" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>mysql笔记二</title>
    <link href="http://example.com/2022/11/29/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B02/"/>
    <id>http://example.com/2022/11/29/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B02/</id>
    <published>2022-11-28T16:00:00.000Z</published>
    <updated>2022-12-15T13:28:29.034Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库中的对象"><a href="#数据库中的对象" class="headerlink" title="数据库中的对象"></a>数据库中的对象</h1><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><div class="tip info"><p>索引是数据库随机检索的常用手段，它实际上就是记录的关键字与其相应地址的对应表。</p><p>索引之所以能加快查询速度，是因为索引文件只有两个字段。一个是排序后的索引宇段，用于快速查找:另一个是该记录在数据表中的记录号，用于定位读取。这样索引文件的大小就要比数据表小得多，并且使用二分法对索引字段进行查找，从而比无索引时的顺序查找速度要快得多。</p></div><p>索引的作用可归纳为:</p><ol><li>可以加快数据的检索速度;</li><li>唯一索引可以保证数据记录的唯一性:</li><li>在使用排序和分组进行数据查询时，可以显著减少查询中排序和分组的时间;</li><li>在进行连接查询时可以加快表与表之间的连接，这在实现数据的参照完整性方面有特别的意义。</li></ol><details class="folding-tag" red open><summary> 注意 </summary>              <div class='content'>              <p>建立索引是加快表的查询速度的有效手段。SOL 语句支持用户根据应用环境的需要在基本表上建立一个或多个索引，以提供多种存取路径。一般说来，建立与删除索引由数据库管理员或表的属主负责完成。DBMS 在存取数据时会自动选择合适的索引作为存取路径，用户不必也不能人为选择索引。<br>虽然索引可以提高数据的查询效率，但它会占用一定的存储空间，并且为了维护索引的有效性，在向表中插人、删除或者更新数据时，数据库还要自动执行额外的操作来维护索引。随着数据量的增加，创建和维护索引所消耗的时间也会随之而增加。因此，使用索引时，应综合考虑它的优缺点来科学地设计，才能提高数据库的性能。</p>              </div>            </details><h3 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h3><ol><li><b>普通索引</b><br>普通索引是 MySQL 中的基本索引类型。它允许索引字段有重复值和空值，由关键字 KEY或INDEX 定义，可以创建在任何数据类型中。普通索引的唯一任务是加快对数据的访问速度。</li><li><b>唯一索引</b><br>唯一索引由关键字 UNIOUE 定义，要求索引字段的值不能重复，但允许为空值。创建唯一索引的目的往往不是为了提高访问速度，而只是为了避免数据出现重复。另外 MySQL 中的主键索引是一种特殊的唯一索引，它不允许有空值。</li><li><b>全文索引</b><br>全文索引是由 FULLTEXT 定义的索引，是指在定义索引的字段上支持值的全文查找。该索引类型允许在索引字段上插人重复值和空值，它只能创建在 CHARVARCHAR或TEXT 等字符类型的字段上。</li><li><b>空间索引</b><br>空间索引是由 SPATIAL 定义的索引，是只能在 CEOMETRY、POINTLINESTRING 和POLYGON 等空间数据类型的字段上建立的索引。需要注意的是，创建空间索引的字段，必须将其声明为 NOT NULL。</li><li><b>单列索引</b><br>单列索引指在表中单个字段上创建的索引。它可以是普通索引、唯一索引或者全文索引，只要保证该索引关键字为表中的一个字段即可。</li><li><b>多列索引</b><br>多列索引指在表中多个字段上创建的索引。只有在查询条件中使用了这些字段中的第一个字段时，该索引才会被使用。例如已在“成绩表”上建立了以“学号”和“课程编号”两个字段为索引字段的多列索引，那么只有在查询条件中使用了“学号”字段时，该索引才会被使用。</li></ol><h3 id="索引的设计原则"><a href="#索引的设计原则" class="headerlink" title="索引的设计原则"></a>索引的设计原则</h3><ol><li><b>索引并非越多越好</b><br>一个表中如有大量的索引，不仅占用磁盘空间，而且会影响INSERT、UPDATE、DELETE 等语句的性能。因为在更改表中的数据的同时，索引也会被DBMS 自动地进行调整和更新。对经常查询的字段应该建立索引，但要避免对不必要的字段建立索引。</li><li><b>避免对经常更新的表建立过多的索引</b><br>需要经常更新数据的表应该避免建立过多的索引，并且索引中的字段要尽可能少，这样系统消耗在索引维护上的代价才小。</li><li><b>数据量小的表不建议使用索引</b><br>当数据量较少时，花费在查询上的时间可能比遍历索引的时间还要短，索引可能不会产生优化的效果</li><li><b>在取值重复率较大的字段上不要建立索引</b><br>例如“教师表”中的“性别”字段，其取值基本只有“男”和“女”两个值，这样的字段就无须建立索引。建立索引后不但不会提高查询效率，反而会严重降低更新速度。</li><li><b>为经常需要进行排序、分组和连接查询的字段建立索引</b><br>在关系数据中进行排序、分组和连接查询时，需要进行大量的查找比较运算，所以应该为频繁进行排序或分组的字段和经常进行连接查询的字段创建索引。</li></ol><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><div class="tip info"><ul><li>视图是一个虚拟表（逻辑表）；</li><li>视图中的行和列的数据来自一到多张物理表，也可以来源自其他视图；</li><li>可以通过视图进行增删改查；</li><li>如果通过视图进行增删改，那么物理表的数据也会随之做出同样的增删改；反之亦然。</li><li>视图的使用比较少，起码相对于一般SQL来说，不在一个数量级上；</li><li>视图是一种”虚表”，所以不能与已经存在的表重</li></ul></div><p>视图通常用来实现以下三种功能：</p><ol><li>筛选出基表中的频繁操作的数据供用户简单地按视图名访问</li><li>只提供必要的数据视图，防止未经许可的用户访问敏感数据</li><li>将多个物理数据表抽象为一个逻辑数据表</li></ol><p>视图的主要功能：</p><ol><li><b>视图能够简化用户的操作。</b><br>视图使用户可以将注意力集中在自己关心的数据上如果这些数据不是直接来自于基表，则可以通过定义视图，使得用户眼中的数据结构简单、清晰，并且可以简化用户的数据查询操作。例如，那些来源于若干张表连接查询的视图，就将表与表之间的连接操作对用户隐藏了起来。换句话说，用户所做的只是对一个虚表的简单查询，而这个虚表是怎样得到的，用户无需了解。</li><li><b>视图使用户能从多种角度看待同一数据。</b><br>视图机制使不同的用户能以不同的方式看待同一组数据。当不同用户使用同一个数据库时，这种灵活性是非常重要的。</li><li><b>视图能够实现数据库的逻辑独立性。</b><br>数据的逻辑独立性是指当数据库的逻辑结构改变时(如给基表增加了新的字段)，用户和应用程序可以不受影响地继续使用数据。</li><li><b>视图能够对机密数据提供安全保护。</b><br>有了视图机制，就可以在设计数据库应用系统时，对不同的用户定义不同的视图，并设置不同的权限，使机密数据不出现在不应看到这些数据的用户视图上。</li></ol><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><div class="tip info"><p>在大型数据库系统中，一组为了完成特定功能的SQL语句集，存储在数据库中，经过第一次编译后再次调用不需要再次编译，用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来调用存储过程。</p></div><p>存储过程的作用主要有以下几方面：</p><ol><li><b>存储过程提高了程序设计的灵活性。</b><br>存储过程可以使用流程控制语句组织程序结构，方便实现结构较复杂的程序的编写，使设计过程具有很强的灵活性。</li><li><b>存储过程实现了程序的模块化。</b><br>存储过程作为一个整体被创建后，可以被其他程序多次反复调用。对于数据库设计人员，可以根据实际情况，对存储过程进行维护，不会对调用程序产生不必要的影响。</li><li><b>存储过程有利于提高程序的执行速度。</b><br>存储过程中包含的大量 SQL 代码或者要被反复执行的代码段在执行之前已经被预编译，所以不会像批处理那样在每次运行之前都要进行编译，从而提高了这些代码段的执行速度。</li><li><b>使用存储过程能减少网络访问的负荷。</b><br>在访问网络数据库的过程中，当调用存储过程时，仅需在网络中传输调用语句及其必要的参数即可，而不需要传输大量的语句，从而大大减少了网络的流量和负载。</li><li><b>存储过程可被作为一种安全机制来充分利用。</b><br>系统管理员可以充分利用存储过程对相应数据的访问权限进行限制，从而避免非授权用户的非法访问，进一步保证数据访问的安全性。</li></ol><h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据库中的对象&quot;&gt;&lt;a href=&quot;#数据库中的对象&quot; class=&quot;headerlink&quot; title=&quot;数据库中的对象&quot;&gt;&lt;/a&gt;数据库中的对象&lt;/h1&gt;&lt;h2 id=&quot;索引&quot;&gt;&lt;a href=&quot;#索引&quot; class=&quot;headerlink&quot; title=&quot;索</summary>
      
    
    
    
    <category term="笔记" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>mysql笔记一</title>
    <link href="http://example.com/2022/11/21/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B01/"/>
    <id>http://example.com/2022/11/21/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B01/</id>
    <published>2022-11-20T16:00:00.000Z</published>
    <updated>2022-12-15T13:25:35.654Z</updated>
    
    <content type="html"><![CDATA[<h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><ol><li><p><b>信息( Information)</b><br> 信息是现实世界中各种事物的存在方式、运动形态以及它们之间的相互联系等诸要素在人脑中的反映，通过人脑的抽象后形成概念。</p></li><li><p><b>数据（Data）</b><br> 数据是数据库中存储的基本对象。定义为描述事务的符号记录。数据的含义称为语义，数据与其语义是不可分的。</p></li><li><p><b>数据库（DataBase，DB）</b><br> 长期存储在计算机内，有组织的，可共享的大量数据的集合。<br> 数据库基本特征：1.永久存储  2.有组织  3.可共享 4.冗余度小 5.易扩展</p></li><li><p><b>数据库管理系统（DataBase Management System,DBMS）</b><br> 位于用户与操作系统之间的一层数据管理软件<br> 数据库管理系统和操作系统一样是计算机的基础软件。<br> DBMS 的主要任务是按一定格式组织数据，将其存人数据库并进行高效处理，同时负责对数据库进行维护。<br> DBMS 的主要功能包括使用户能方便地定义和操纵数据，保证数据的完整性、安全性，多用户的并发使用和故障后的系统恢复。</p></li><li><p><b>数据库系统管理员(DataBase Administator，DBA)</b><br> 负责数据库的建立、使用和维护的专业人员</p></li><li><p><b>数据库系统（DataBase System,DBS）</b><br> 数据库系统由数据库（DB），数据库管理系统(DBMS)，应用程序和数据库管理员(DBA)组成的存储、管理、处理和维护数据的系统。</p></li></ol><h2 id="数据库管理技术的发展过程（三个阶段）"><a href="#数据库管理技术的发展过程（三个阶段）" class="headerlink" title="数据库管理技术的发展过程（三个阶段）"></a>数据库管理技术的发展过程（三个阶段）</h2><h3 id="人工管理阶段："><a href="#人工管理阶段：" class="headerlink" title="人工管理阶段："></a>人工管理阶段：</h3><div class="tip info"><p>在计算机出现之前，人们运用常规的手段从事记录、存储和对数据加工，也就是利用纸张来记录和利用计算工具（算盘、计算尺）来进行计算，并主要使用人的大脑来管理和利用这些数据。</p></div><p>特点:</p><ol><li>计算机系统不提供对用户数据的管理功能；</li><li>数据不能共享；</li><li>不保存数据。</li></ol><h3 id="文件系统阶段："><a href="#文件系统阶段：" class="headerlink" title="文件系统阶段："></a>文件系统阶段：</h3><div class="tip info"><p>在这一阶段（20世纪50年代后期至60年代中期）计算机不仅用于科学计算，还利用在信息管理方面。随着数据量的增加，数据的存储、检索和维护问题成为紧迫的需要，数据结构和数据管理技术迅速发展起来。此时，外部存储器已有磁盘、磁鼓等直接存取的存储设备。软件领域出现了操作系统和高级软件。操作系统中的文件系统是专门管理外存的数据管理软件，文件是操作系统管理的重要资源之一。</p></div><p>特点:<br>数据以“文件”形式可长期保存在外部存储器的磁盘上。由于计算机的应用转向信息管理，因此对文件要进行大量的查询、修改和插入等操作，这些操作由文件系统提供。   </p><p>缺点:<br>数据冗余;不一致性;数据独立性差。</p><h3 id="数据库系统阶段："><a href="#数据库系统阶段：" class="headerlink" title="数据库系统阶段："></a>数据库系统阶段：</h3><div class="tip info"><p>20世纪60年代后期以来 ，计算机性能得到进一步提高，更重要的是出现了大容量磁盘，存储容量大大增加且价格下降。在此基础上，才有可能克服文件 系统管理数据时的不足，而满足和解决实际应用中多个用户、多个 应用程序共享数据的要求，从而使数据能为尽可能多的 应用程序服务，这就出现了数据库这样的数据管理技术。</p></div><p>特点:</p><ol><li>数据结构化。</li><li>数据共享性高、冗余少且易扩充。</li><li>数据独立性高。</li><li>数据由DBMS统一管理和控制。</li></ol><h2 id="数据模型（Data-Model）"><a href="#数据模型（Data-Model）" class="headerlink" title="数据模型（Data Model）"></a>数据模型（Data Model）</h2><h3 id="数据模型的分层"><a href="#数据模型的分层" class="headerlink" title="数据模型的分层"></a>数据模型的分层</h3><h4 id="概念数据模型-Conceptual-Data-Model"><a href="#概念数据模型-Conceptual-Data-Model" class="headerlink" title="概念数据模型(Conceptual Data Model)"></a>概念数据模型(Conceptual Data Model)</h4><div class="tip info"><p>它是独立于计算机系统的模型，只是用来描述某个特定组织所关心的信息结构，按用户的观点对数据和信息建模，是对数据对象的基本表达和概括性描述。<br>它是面向数据库用户的实现世界的模型，主要用来描述世界的概念化结构，它使数据库的设计人员在设计的初始阶段，摆脱计算机系统及 DBMS 的具体技术问题，集中精力分析数据以及数据之间的联系等。<br>概念模型与具体的数据库管理系统(Dalabase Management Sysem，简称DBMS)无关。概念数据模型必须换成逻辑数据模型，才能在 DBMS 中实现，主要用于数据库设计初期。它是数据库设计人员与用户交流的工具。<br>概念模型用于信息世界的建模，一方面应该具有较强的语义表达能力，能够方便直接表达应用中的各种语义知识，另一方面它还应该简单、清晰、易于用户理解。<br>在概念数据模型中最常用的是 E-R 模型、扩充的 E-R 模型、面向对象模型及谓词模型。</p></div><h4 id="逻辑数据模型-Logical-Data-Model"><a href="#逻辑数据模型-Logical-Data-Model" class="headerlink" title="逻辑数据模型(Logical Data Model)"></a>逻辑数据模型(Logical Data Model)</h4><div class="tip info"><p>逻辑数据模型是用户从数据库所看到的数据模型，是具体的 DBMS 所支持的数据模型。<br>它是直接面向数据库的逻辑结构，通常有一组严格定义的、无二义性的语法和语义的数据库语言。人们可以用这种语言来定义、操纵数据库中的数据。<br>此模型既要面向用户，又要面向系统，主要用于数据库管理系统(DBMS)的实现，与具体的 DBMS有关(DBMS 按所支持的逻辑数据模型分类，如: 层次模型、网状模型和关系模型)<br>概念模型表示的数据必须转化为逻辑模型表示的数据，才能在 DBMS 中实现。</p></div><h4 id="物理数据模型-Physical-Data-Model"><a href="#物理数据模型-Physical-Data-Model" class="headerlink" title="物理数据模型(Physical Data Model)"></a>物理数据模型(Physical Data Model)</h4><div class="tip info"><p>它是对数据最低层的抽象，描述数据在储存介质上的组织结构、存储方式和存取方法<br>它是面向计算机物理表示的模型，不但与具体的 DBMS 有关，而且还与操作系统和硬件有关。<br>每一种逻辑数据模型在实现时都有与其对应的物理数据模型。<br>DBMS 为了保证其独立性与可移植性，大部分物理数据模型的实现工作由 DBMS 系统自动完成，设计者只设计索引、聚集等特殊结构。</p></div><h3 id="数据模型的组成要素"><a href="#数据模型的组成要素" class="headerlink" title="数据模型的组成要素"></a>数据模型的组成要素</h3><p>数据模型通常由数据结构、数据操作和完整性约束三个部分组成。</p><ol><li><p>数据结构描述数据库的组成对象以及对象之间的联系，通常按其数据结构的类型来命名数据模型，例如层次结构、网状结构和关系结构的数据模型分别命名为层次模型、网状模型、关系模型。</p></li><li><p>数据操作是指对数据库中各种对象的实例允许执行的操作的集合，包括操作及其有关的规则，主要分为查询和更新（插入、删除、修改）两大类操作。</p></li><li><p>整性约束条件是给定的数据模型中数据及其联系所具有的制约和依存规则，在关系模型中体现为实体完整性和参照完整性。例如，某大学的数据库中规定学生成绩如果有6门以上不及格则不能授予学士学位，教授的退休年龄是65周岁等。</p></li></ol><h3 id="数据库系统结构"><a href="#数据库系统结构" class="headerlink" title="数据库系统结构"></a>数据库系统结构</h3><p>数据库系统的三级模式结构：模式（Schema）、外模式（External Schema）、内模式（Internal Schema）<br><div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/databases/1.png"/></div></div></p><p><b>模式（也称逻辑模式）</b>：<br>①数据库中全体数据的逻辑结构和特征的描述<br>②所有用户的公共数据视图，综合了所有用户的需求</p><p><b>模式的地位</b>：是数据库系统模式结构的中间层<br>①与数据的物理存储细节和硬件环境无关<br>②与具体的应用程序、开发工具及高级程序设计语言无关</p><p><b>外模式（也称子模式或用户模式）</b>：<br>①数据库用户（包括应用程序员和最终用户）使用的局部数据的逻辑结构和特征的描述<br>②数据库用户的数据视图，是与某一应用有关的数据的逻辑表示</p><p><b>外模式的用途</b>：①保证数据库安全性的一个有力措施 ②每个用户只能看见和访问所对应的外模式中的数据<br>内模式（也称存储模式）：<br>①是数据物理结构和存储方式的描述<br>②是数据在数据库内部的表示方式：</p><p>a. 记录的存储方式（顺序存储，按照B树结构存储，按hash方法存储）<br>b. 索引的组织方式<br>c. 数据是否压缩存储<br>d. 数据是否加密<br>e. 数据存储记录结构的规定</p><h1 id="E-R模型"><a href="#E-R模型" class="headerlink" title="E-R模型"></a>E-R模型</h1><div class="tip info"><p>实体-联系方法（Entity-Relationship Approach）是概念模型的一种表示方法，其提供了表示实体型、属性和联系的方法。</p></div><ol><li><p><b>实体型</b>：用矩形表示，矩形框内写明实体名</p></li><li><p><b>属性</b>：用椭圆表示，并用无向边将其与相应的实体型连接起来</p></li><li><p><b>联系</b>：用菱形表示，菱形框内写明联系名，并用无向边分别与有关实体型连接起来，同时标明联系的类型（1:1， 1：n， m：n）<br> 比如有两个简单实体，分别是单位和职员，它们的关系就是1:m，一个单位可以有多个职员；<br> 再比如有两个实体，分别是学生和图书，它们的关系就是m:n，从而形成中间表学生借阅的图书，结果是1本图书可以被多人借阅，1个人也可以借多本图书。</p></li></ol><h1 id="关系数据模型与关系运算"><a href="#关系数据模型与关系运算" class="headerlink" title="关系数据模型与关系运算"></a>关系数据模型与关系运算</h1><h2 id="关系模型的基本概念"><a href="#关系模型的基本概念" class="headerlink" title="关系模型的基本概念"></a>关系模型的基本概念</h2><div class="tip info"><p>关系模型是建立在集合代数的基础上的，因此从集合论角度给出关系数据结构的形式化定义。</p></div><ol><li><p><b>域（Domain）</b>：域是一组具有相同数据类型的值的集合，例如整数、自然数都是域</p></li><li><p><b>笛卡尔积（Cartesian Product）</b>：笛卡尔积是域上面的一种集合运算。<br> 笛卡尔积中每个元素(d1,d2,…dn)称为一个n元组或简称元组<br> 笛卡尔积可表示为一个二维表，表中每行对应一个元组，表中每一列的值来自一个域</p></li><li><p><b>关系（Relation）</b></p><ul><li>D1×D2×…×Dn的子集叫作在域D1，D2，…，Dn上的关系，表示为R（D1，D2，…，Dn）</li><li>R：关系名； n：关系的目或度（Degree）</li><li>关系也是一个二维表，每行对应一个元组，每列对应一个域，每列称为属性</li><li>关系的性质：<br>  （1）唯一性<br>  （2）无序性</li><li>关系模型<br>  关系数据结构、关系操作集合和关系完整性约束三部分是关系模型的三要素</li></ul></li></ol><h2 id="关系的键与关系的完整性"><a href="#关系的键与关系的完整性" class="headerlink" title="关系的键与关系的完整性"></a>关系的键与关系的完整性</h2><ol><li><b>候选键</b>：若关系中某一属性或最小属性组的值能够唯一标识一个元组，则称该属性或属性组为关系的候选键( Candidate Key)。一个关系中至少含有一个候选键。</li><li><b>主键</b>：若一个关系有多个候选键时，我们从候选关系键中选择一个作为主键(Primary Key,也称主码、主关键字）。</li><li><b>外键</b>：在一个表中存在的另一个表的主键称此表的外键。</li></ol><h2 id="关系的完整性约束"><a href="#关系的完整性约束" class="headerlink" title="关系的完整性约束"></a>关系的完整性约束</h2><ol><li><b>实体完整性</b></li><li><b>参数完整性</b></li><li><b>用户定义完整性</b></li></ol><h2 id="关系代数"><a href="#关系代数" class="headerlink" title="关系代数"></a>关系代数</h2><div class="tip info"><p>关系代数的运算对象是关系，运算结果也是关系。关系代数中的运算符包括四类:集合运算符、专门的关系运算符、比较运算符和逻辑运算符。其中，比较运算符和逻辑运算符使用来辅助专门的关系运算符进行操作的</p></div><ul><li>集合运算符：∪（并），-（差），∩（交），X（广义笛卡尔积）；</li><li>专门的关系运算符：σ（选择），∏（投影），∞（连接），*（自然连接），÷（除）；</li><li>算术比较运算符：＞（大于），≥（大于等于），＜（小于），≤（小于等于），＝（等于），≠（不等于）；</li><li>逻辑运算符：∧（与），∨（或），┒（非）</li></ul><h3 id="传统的集合运算"><a href="#传统的集合运算" class="headerlink" title="传统的集合运算"></a>传统的集合运算</h3><ol><li><b>并（Union）</b></li></ol><ul><li>关系R和关系S的并，是由属于R或属于S的元组组成，即R和S的所有元组合并，删去重复元组，组成一个新关系，其结果仍为n目关系。记作：R∪S={t|t∈R∨t∈S}</li><li>对于关系数据库，记录的插入和添加可通过并运算实现</li><li>一个元素在并集中只出现一次<br>R和S必须同类型（属性集相同、次序相同，但属性名可以不同）<div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/databases/2.png"/></div></div></li></ul><ol><li><b>差（Difference）</b><br>关系R与关系S的差由属于R而不属于S的所有元组组成，即R中删去与S中相同的元组，组成一个新关系，其结果仍为n目关系。记作：R-S={t|t∈R ∧ ┒t∈S}<br>通过差运算，可以实现关系数据库记录的删除。<div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/databases/3.png"/></div></div></li><li><b>交（Intersection）</b><br>关系R与关系S的交由既属于R又属于S的元组组成，即R与S中相同的元组，组成一个新关系，其结果仍为n目关系。记作：R∩S={t|t∈R t∈S}<br>如果两个关系没有相同的元组，那么它们的交为空<br>两个关系的并和差运算为基本运算（即不能用其它运算表达的运算），而交运算为非基本运算，交运算可以用差运算来表示 R∩S=R-(R-S)<div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/databases/4.png"/></div></div></li><li><b>广义笛卡尔积（Extended Cartesian Product）</b><br>两个分别为n目和m目关系R和S的广义笛卡尔积是一个 (n+m)列的元组的集合，元组的前n列是关系R的一个元组，后m列是关系S的一个元组。若R有k1个元组，S有k2个元组，则关系R和关系S的广义笛卡尔积有k1*k2个元组。记作：R×S={tr⌒ts| tr∈R ts∈S}<br>关系的广义笛卡尔积可用于两关系的连接操作<br>例如，下图关系R(a)和S(b)为相容关系，©为R与S的并，(d)为R与S的交，(e)为R与S的差，(f)为R与S的广义笛卡尔积<div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/databases/5.png"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/databases/6.png"/></div></div></li></ol><h3 id="专门的关系运算"><a href="#专门的关系运算" class="headerlink" title="专门的关系运算"></a>专门的关系运算</h3><p>由于传统的集合运算，只是从行的角度进行，而要灵活地实现关系数据库多样的查询操作，必须引入专门的关系运算<br>为叙述上的方便先引入几个概念：<br>（1）设关系模式为R(A1,A2,…,An)，它的一个关系为R，t∈R表示t是R的一个元组，t[Ai]则表示元组t中相应于属性Ai的一个分量👇<br>    <div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/databases/7.png"/></div></div><br>（2）若A={Ai1，Ai2，…，Aik}，其中Ai1，Ai2，…，Aik是A1,A2,…,An中的一部分，则A称为属性列或域列，Ã则表示{A1,A2,…,An}中去掉{Ai1，Ai2，…，Aik}后剩余的属性组。t[A]=(t[Ai1],t[Ai2],…,t[Aik])表示元组t在属性列A上诸分量的集合👇<br>    <div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/databases/8.png"/></div></div><br>（3）元组的连接tr⌒ts：R为n目关系，S为m目关系，tr∈R，ts∈S，tr⌒ts称为元组的连接（concatenation），它是一个n+m列的元组，前n个分量为R的一个n元组，后m个分量为S中的一个m元组，例如👇<br>    <div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/databases/9.png"/></div></div><br>（4）给定一个关系R（X，Z），X和Z为属性组，定义当t[X]=x时，x在R中的象集（Image Set）为Zx={t[Z] | t∈R,t[X]=x}，它表示R中的属性组X上值为x的诸元组在Z上分量的集合👇<br>    <div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/databases/10.png"/></div></div></p><ol><li><p><b>选择（Selection）</b></p><ul><li>选择又称限制（Restriction）</li><li>选择运算是单目运算，是根据一定的条件在给定的关系R中选取若干个元组，组成一个新关系，记作：σF(R )={t|t∈R∧F(t)为真}<br>🔹 σ为选取运算符；<br>🔹 F表示选取的条件，是一个由运算对象（属性名、常数、简单函数）、算术比较运算符（&gt; ，≥，&lt;，≤，=，≠）和逻辑运算符（∨ ,∧, ┐）连接起来的 逻辑 - 表达式，结果为逻辑值“真”或“假”；</li><li>选择运算实际上是从关系R中选取使逻辑表达式为真的元组，是从行的角度进行的运算</li></ul></li><li><p><b>投影（Projection）</b></p><ul><li>投影运算也是单目运算，关系R上的投影是从R中选择出若干属性列，组成新的关系，即对关系在垂直方向进行的运算，从左到右按照指定的若干属性及顺序取出相应列，应删去重复元组。记作：ΠA(R )={t[A] | t∈R}<br>🔹 A为R中的属性列，Π为投影运算符</li><li>从其定义可看出，投影运算是从列的角度进行的运算，这正是选取运算与投影运算的区别所在。选取运算是从关系的水平方向上进行运算的，而投影运算则是从关系的垂直方向上进行的</li><li>投影之后，新关系与原关系可能不相容</li><li><span class='p red'>投影运算可以改变关系的属性次序</span></li></ul></li><li><p><b>连接（Join）</b></p><ul><li><p>连接运算是二目运算，是从两个关系的笛卡尔积中选取满足连接条件的元组，组成新的关系</p></li><li><p>设关系R(A1，A2，…，An)及S(B1，B2，…，Bm)，连接属性集X包含于{A1，A2，…，An}，及Y包含于{B1，B2，…，Bm}，X与Y中属性列数目相同，且相对应属性有共同的域。【若Z={A1，A2，…，An}/X（/X：去掉X之外的属性）及W={B1，B2，…，Bm}/Y，则R及S可表示为R(Z，X)，S(W，Y)】关系R和S在连接属性X和Y上的连接，就是在R×S笛卡尔积中，选取X属性列上的分量与Y属性列上的分量满足给定θ比较条件的那些元组，也就是在R×S上选取在连接属性X,Y上满足θ条件的子集，组成新的关系，新关系的度为n+m。记作：(R∞S)XθY={tr⌒ts |tr∈R∧ts∈S∧tr[X] θ ts[Y]为真}<br>🔹 ∞是连接运算符<br>🔹 θ为算术比较运算符，也称θ连接<br>🔹 XθY为连接条件<br>θ为“=”时，称为等值连接；<br>θ为“&lt;”时，称为小于连接；<br>θ为“&gt;”时，称为大于连接</p></li><li><p>连接运算为非基本运算，可以用选取运算和广义笛卡尔积运算来表示：R∞S=σxθy(R×S)</p></li><li><p>在连接运算中，一种最常用的连接是自然连接，所谓自然连接是一种特殊的等值连接，它要求两个关系中进行比较的分量必须是相同的属性组，并且在连接结果中把重复的属性列去掉。即如果R与S具有相同的属性组Y，则自然连接可记作：R∞S={tr⌒ts |tr∈R∧ts∈S∧tr[Y]=ts[Y]}</p></li><li><p>自然连接是在广义笛卡尔积R×S中选出同名属性上符合相等条件的元组，再进行投影，去掉重复的同名属性，组成新的关系</p></li></ul></li><li><p><b>除法（Division）</b></p><ul><li>除法运算是二目运算</li><li>前提：设有关系R(X，Y)与关系S(Y，Z)，其中X，Y，Z为属性集合，R中的Y与S中的Y可以有不同的属性名，但对应属性必须出自相同的域</li><li>关系R除以关系S所得的商是一个新关系P(X)，P是R中满足下列条件的元组在X上的投影：元组在X上分量值x的象级Yx包含S在Y上投影的集合。记作：R÷S={tr[X]|tr∈R∧Πy(S)⊆Yx}<br>🔹 Yx为x在R中的象集，x= tr[X]</li><li>除法是既从列的角度又从行的角度对关系R进行运算。首先，新关系P中只保留属性列X；其次，新关系P中只保留这样的X值x：S在Y上投影的集合是x的象集Yx的子集</li><li>除法运算为非基本运算，可以表示为：R÷S=Πx(R )－Πx(Πx(R )× ΠY(S)－R)</li></ul></li><li><p><b>左连接（Left Outer Join）</b><br>在自然连接的基础上加上左边表上不包含自然连接中所含元组（行）的元组。</p></li><li><p><b>右连接（Right Outer Join）</b><br>在自然连接的基础上加上右边表上不包含自然连接中所含元组（行）的元组。</p></li><li><p><b>全外连接（Full Outer Join）</b><br>左连接+右连接</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;绪论&quot;&gt;&lt;a href=&quot;#绪论&quot; class=&quot;headerlink&quot; title=&quot;绪论&quot;&gt;&lt;/a&gt;绪论&lt;/h1&gt;&lt;h2 id=&quot;术语&quot;&gt;&lt;a href=&quot;#术语&quot; class=&quot;headerlink&quot; title=&quot;术语&quot;&gt;&lt;/a&gt;术语&lt;/h2&gt;&lt;ol&gt;
&lt;</summary>
      
    
    
    
    <category term="笔记" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>node.js</title>
    <link href="http://example.com/2022/09/25/node.js/"/>
    <id>http://example.com/2022/09/25/node.js/</id>
    <published>2022-09-24T16:00:00.000Z</published>
    <updated>2022-12-15T13:28:49.152Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初识node-js与内置模块"><a href="#初识node-js与内置模块" class="headerlink" title="初识node.js与内置模块"></a>初识node.js与内置模块</h1><h2 id="回顾与思考"><a href="#回顾与思考" class="headerlink" title="回顾与思考"></a>回顾与思考</h2><ol><li>为什么JavaScript可以再浏览器中被执行？<br> 待执行的JS代码<br> JS解析引擎<br> 不同的浏览器使用不同的JS解析引擎</li><li>为什么JS可以操作DOM还有BOM?<br> 每个浏览器中内置了DOM，BOM这样的API函数，因此浏览器中的javaScript才可以调用它们</li><li>浏览器中JS的运行环境<br> 运行环境是指代码正常运行所需要的必要环境<br>Chrome浏览器运行环境： <span class="bubble-content">V8引擎</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#71a4e3;">v8引擎负责解析和执行js代码</span></span>和 <span class="bubble-content">内置API函数</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#1db675;">内置API是由运行环境提供的特殊接口，只能在所属的运行环境中被调用</span></span></li></ol><h2 id="Node-js简介"><a href="#Node-js简介" class="headerlink" title="Node.js简介"></a>Node.js简介</h2><ol><li>什么是Node.js?<br> Node.js是一个基于Chrome V8引擎的JS运行环境</li><li><p>Node.js中的JS运行环境<br> V8引擎和内置API函数</p><div class="note info simple"><p>浏览器是JS的前端运行环境<br>Node.js是Js的后端运行环境<br>Node.js中无法调用DOM和BOM等浏览器内置API</p></div></li><li><p>Node.js可以做什么？</p><div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/node.js/1.jpg"/></div></div></li></ol><h2 id="终端中的快捷键"><a href="#终端中的快捷键" class="headerlink" title="终端中的快捷键"></a>终端中的快捷键</h2><div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/node.js/2.jpg"/></div></div><h1 id="fs文件系统模块"><a href="#fs文件系统模块" class="headerlink" title="fs文件系统模块"></a>fs文件系统模块</h1><h2 id="什么是文件系统模块"><a href="#什么是文件系统模块" class="headerlink" title="什么是文件系统模块"></a>什么是文件系统模块</h2><p>fs模块是Node.js官方提供的、用来操作文件的模块，它提供了一系列的方法和属性，用来满足用户对文件的操作需求</p><h2 id="读取指定文件中的内容"><a href="#读取指定文件中的内容" class="headerlink" title="读取指定文件中的内容"></a>读取指定文件中的内容</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.readFile(path[,options],callback)</span><br></pre></td></tr></table></figure><ol><li>参数1：必选参数，字符串，表示文件的路径</li><li>参数2：可选参数，表示以什么编码格式来读取文件</li><li>参数3：必选参数，文件读取完成后，通过回调函数拿到读取的结果。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 1.导入fs模块,来操作文件</span><br><span class="line">const fs = require(&#x27;fs&#x27;)</span><br><span class="line">// 2.调用fs.readFile()方法读取文件</span><br><span class="line">fs.readFile(&#x27;./file/1.txt&#x27;, &#x27;utf8&#x27;, function (err, dataStr) &#123;</span><br><span class="line">    // 打印失败的结果，如果读取成功，则err的值为null</span><br><span class="line">    // 如果读取失败，则err的值为错误对象，dataStr的值为undefined</span><br><span class="line">    console.log(err)</span><br><span class="line">    // 打印成功的结果</span><br><span class="line">    console.log(dataStr)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="判断文件是否读取成功"><a href="#判断文件是否读取成功" class="headerlink" title="判断文件是否读取成功"></a>判断文件是否读取成功</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 1.导入fs模块,来操作文件</span><br><span class="line">const fs = require(&#x27;fs&#x27;)</span><br><span class="line">// 2.调用fs.readFile()方法读取文件</span><br><span class="line">fs.readFile(&#x27;./file/1.txt&#x27;, &#x27;utf8&#x27;, function (err, dataStr) &#123;</span><br><span class="line">    // 打印失败的结果，如果读取成功，则err的值为null</span><br><span class="line">    // 如果读取失败，则err的值为错误对象，dataStr的值为undefined</span><br><span class="line">    if (err) &#123;</span><br><span class="line">        return console.log(&#x27;读取文件失败&#x27; + err.message)</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(&#x27;读取文件成功&#x27; + dataStr)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="向指定的文件中写入内容"><a href="#向指定的文件中写入内容" class="headerlink" title="向指定的文件中写入内容"></a>向指定的文件中写入内容</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.writeFile(file, data[, options], callback)</span><br></pre></td></tr></table></figure><ol><li>参数1：必选参数，字符串，表示文件的存放路径</li><li>参数2：必选参数，表示要写入的内容</li><li>参数3：可选参数，表示以什么编码格式来读取文件，默认值是utf8</li><li>参数4：必选参数，文件写入完成后的回调函数。</li></ol><h3 id="判断文件是否读取成功-1"><a href="#判断文件是否读取成功-1" class="headerlink" title="判断文件是否读取成功"></a>判断文件是否读取成功</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 1.导入fs模块,来操作文件</span><br><span class="line">const fs = require(&#x27;fs&#x27;)</span><br><span class="line">// 2.调用fs.readFile()方法读取文件</span><br><span class="line">fs.writeFile(&#x27;./file/1.txt&#x27;, &#x27;utf8&#x27;, function (err, dataStr) &#123;</span><br><span class="line">    // 打印失败的结果，如果读取成功，则err的值为null</span><br><span class="line">    // 如果读取失败，则err的值为错误对象，dataStr的值为undefined</span><br><span class="line">    if (err) &#123;</span><br><span class="line">        return console.log(&#x27;读取文件失败&#x27; + err.message)</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(&#x27;读取文件成功&#x27; + dataStr)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="案例：考试成绩整理"><a href="#案例：考试成绩整理" class="headerlink" title="案例：考试成绩整理"></a>案例：考试成绩整理</h2><div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/node.js/3.jpg"/></div></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// 导入fs模块</span><br><span class="line">const fs = require(&#x27;fs&#x27;)</span><br><span class="line">// 2.调用fs.readFile()方法读取文件</span><br><span class="line">fs.readFile(&#x27;./file/2.txt&#x27;, &#x27;utf8&#x27;, function (err, dataStr) &#123;</span><br><span class="line">    // 打印失败的结果，如果读取成功，则err的值为null</span><br><span class="line">    // 如果读取失败，则err的值为错误对象，dataStr的值为undefined</span><br><span class="line">    // 3.判断文件是否读取成功</span><br><span class="line">    if (err) &#123;</span><br><span class="line">        return console.log(&#x27;读取文件失败&#x27; + err.message)</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(&#x27;读取文件成功&#x27; + dataStr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 4.1先把成绩的数据，按照空格进行分割</span><br><span class="line">    const arrOld = dataStr.split(&#x27; &#x27;)</span><br><span class="line">    // 4.2循环分割后的数组，对每一项的数据，进行字符串的替换操作</span><br><span class="line">    const arrNew = []</span><br><span class="line">    arrOld.forEach(item =&gt; &#123;</span><br><span class="line">        arrNew.push(item.replace(&#x27;=&#x27;, &#x27;:&#x27;))</span><br><span class="line">    &#125;)</span><br><span class="line">    console.log(arrNew)</span><br><span class="line">    // 4.3把新数组中的每一项，进行合并，得到新的字符串</span><br><span class="line">    const newStr = arrNew.join(&#x27;\n\r&#x27;)</span><br><span class="line">    console.log(newStr)</span><br><span class="line">    // 5.调用fs.writeFile()方法，把处理完毕的成绩，写入到新文件中</span><br><span class="line">    fs.writeFile(&#x27;./file/成绩ok.txt&#x27;, newStr, function (err) &#123;</span><br><span class="line">        if (err) &#123;</span><br><span class="line">            return console.log(&#x27;写入文件失败！&#x27; + err.message)</span><br><span class="line">        &#125;</span><br><span class="line">        console.log(&#x27;写入文件成功！&#x27;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="path路径模块"><a href="#path路径模块" class="headerlink" title="path路径模块"></a>path路径模块</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const path=require(&#x27;path&#x27;)</span><br></pre></td></tr></table></figure><h2 id="路径问题"><a href="#路径问题" class="headerlink" title="路径问题"></a>路径问题</h2><div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/node.js/4.jpg"/></div></div><h2 id="path-join-语法格式"><a href="#path-join-语法格式" class="headerlink" title="path.join()语法格式"></a>path.join()语法格式</h2><p>使用path.join方法，可以把多个路径片段拼接为较为完整的路径字符串<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path.join([...paths])</span><br><span class="line">path.join(__dirname,[...paths])</span><br></pre></td></tr></table></figure></p><h2 id="path-basename"><a href="#path-basename" class="headerlink" title="path.basename()"></a>path.basename()</h2><p>使用该方法可以获取路径中的最后一部分，经常通过这个方法获取路径中的文件名，语法格式如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.basename(path[,ext])</span><br></pre></td></tr></table></figure><br>参数：path:必选参数，表示一个路径的字符串<br>    ext可选参数，表示文件拓展名<br>返回：表示路径中的最后一部分</p><h2 id="path-extname"><a href="#path-extname" class="headerlink" title="path.extname()"></a>path.extname()</h2><p>使用该方法可以获取路径中的拓展名部分，语法格式如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.extname(path)</span><br></pre></td></tr></table></figure></p><h2 id="案例：模块化html"><a href="#案例：模块化html" class="headerlink" title="案例：模块化html"></a>案例：模块化html</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line"></span><br><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line"></span><br><span class="line">const regStyle = /&lt;style&gt;[\s\S]*&lt;\/style&gt;/</span><br><span class="line">const regScript = /&lt;script&gt;[\s\S]*&lt;\/script&gt;/</span><br><span class="line"></span><br><span class="line">fs.readFile(path.join(__dirname,&#x27;./login.html&#x27;),&#x27;utf8&#x27;,(err,dataStr) =&gt; &#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        return console.log(&#x27;读取文件失败&#x27;+err.message);</span><br><span class="line">    &#125;</span><br><span class="line">    resolveCSS(dataStr);</span><br><span class="line">    resolveScript(dataStr);</span><br><span class="line">    resolveHTML(dataStr)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 处理css样式</span><br><span class="line">function resolveCSS(htmlStr)&#123;</span><br><span class="line">    //使用正则表达式提取&lt;style&gt;</span><br><span class="line">    const r1 = regStyle.exec(htmlStr);</span><br><span class="line">    //将提取出来的字符串进行字符串的replace替换操作</span><br><span class="line">    const newcss = r1[0].replace(&#x27;&lt;style&gt;&#x27;,&#x27;&#x27;).replace(&#x27;&lt;/style&gt;&#x27;,&#x27;&#x27;);</span><br><span class="line">    //将提取的样式写入login.css中</span><br><span class="line">    fs.writeFile(path.join(__dirname,&#x27;./login/login.css&#x27;),newcss,(err) =&gt; &#123;</span><br><span class="line">        if(err)&#123;</span><br><span class="line">            return console.log(&#x27;css文件写入失败&#x27;+err.message);</span><br><span class="line">        &#125;</span><br><span class="line">        console.log(&#x27;css文件写入成功&#x27;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 处理script样式</span><br><span class="line">function resolveScript(htmlStr)&#123;</span><br><span class="line">    //使用正则表达式提取&lt;script&gt;</span><br><span class="line">    const r1 = regScript.exec(htmlStr);</span><br><span class="line">    //将提取出来的字符串进行字符串的replace替换操作</span><br><span class="line">    const newscript = r1[0].replace(&#x27;&lt;script&gt;&#x27;,&#x27;&#x27;).replace(&#x27;&lt;/script&gt;&#x27;,&#x27;&#x27;);</span><br><span class="line">    //将提取的样式写入login.js中</span><br><span class="line">    fs.writeFile(path.join(__dirname,&#x27;./login/login.js&#x27;),newscript,(err) =&gt; &#123;</span><br><span class="line">        if(err)&#123;</span><br><span class="line">            return console.log(&#x27;js文件写入失败&#x27;+err.message);</span><br><span class="line">        &#125;</span><br><span class="line">        console.log(&#x27;js文件写入成功&#x27;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 处理html样式</span><br><span class="line">function resolveHTML(htmlStr)&#123;</span><br><span class="line">    //将提取出来的字符串进行字符串的replace替换操作</span><br><span class="line">    const newhtml = htmlStr.replace(regStyle,&#x27;&lt;link rel=&quot;stylesheet&quot; href=&quot;./login.css&quot;&gt;&#x27;).replace(regScript,&#x27;&lt;script src=&quot;./login.js&quot;&gt;&lt;/script&gt;&#x27;);</span><br><span class="line">    //将提取的样式写入login.html中</span><br><span class="line">    fs.writeFile(path.join(__dirname,&#x27;./login/login.html&#x27;),newhtml,(err) =&gt; &#123;</span><br><span class="line">        if(err)&#123;</span><br><span class="line">            return console.log(&#x27;html文件写入失败&#x27;+err.message);</span><br><span class="line">        &#125;</span><br><span class="line">        console.log(&#x27;html文件写入成功&#x27;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="http模块"><a href="#http模块" class="headerlink" title="http模块"></a>http模块</h1><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><div class="tip info"><p>什么是客户端，什么是服务器？<br>在网络节点中，负责消费资源的电脑，叫做客户端。<br>负责对外提供网络资源的电脑，叫做服务器。<br>Http模块是Node.js官方提供的，用来创建web服务器的模块。通过http模块提供的Http.createServer()方法，就能方便的把一台普通电脑，变成一台web服务器，从而对外提供Web资源服务。</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const http=require(&#x27;http&#x27;)</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/node.js/5.jpg"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/node.js/6.jpg"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/node.js/7.jpg"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/node.js/8.jpg"/></div></div><h2 id="创建最基本的web服务器"><a href="#创建最基本的web服务器" class="headerlink" title="创建最基本的web服务器"></a>创建最基本的web服务器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">const http = require(&#x27;http&#x27;);</span><br><span class="line">const server = http.createServer();</span><br><span class="line"></span><br><span class="line">server.on(&#x27;request&#x27;,(req,res) =&gt; &#123;</span><br><span class="line">    //获取请求的url地址</span><br><span class="line">    const url = req.url;</span><br><span class="line">    //设置默认的响应内容为404 Not found</span><br><span class="line">    let content = &#x27;&lt;h1&gt;404 Not found&lt;/h1&gt;&#x27;;</span><br><span class="line">    //判断用户请求的是否为/或/index.html首页</span><br><span class="line">    //判断用户请求去的是否为/about.html关于页面</span><br><span class="line">    if(url === &#x27;/&#x27; || url === &#x27;/index.html&#x27;)&#123;</span><br><span class="line">        content = &#x27;&lt;h1&gt;首页&lt;/h1&gt;&#x27;</span><br><span class="line">    &#125;else if(url === &#x27;about.html&#x27;)&#123;</span><br><span class="line">        content = &#x27;&lt;h1&gt;关于页面&lt;/h1&gt;&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    // 设置Content-Type响应头，解决中文乱码问题</span><br><span class="line">    res.setHeader(&#x27;Content-Type&#x27;,&#x27;text/html;charset=utf-8&#x27;)</span><br><span class="line">    // 将内容相应给客户端</span><br><span class="line">    res.end(content);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(80,() =&gt; &#123;</span><br><span class="line">    console.log(&#x27;server run at http://192.168.43.169&#x27;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h1><h2 id="模块化的基本概念"><a href="#模块化的基本概念" class="headerlink" title="模块化的基本概念"></a>模块化的基本概念</h2><div class="tip info"><p>什么是模块化？<br>模块化是指解决一个复杂问题时，自顶向下逐层把系统划分为若干模块的过程。对于整个系统来说，模块是可组合、分解和变换的单元<br>编程领域中的模块化：就是遵守固定的规则，把一个大文件拆成独立并且互相依赖的多个小模块。<br>模块化规范<br>就是对代码进行模块化的拆分与组合时，需要遵守的规则<br>使用什么样的语法格式来引用模块<br>在模块中使用什么样的语法格式向外暴露成员</p></div><h2 id="Node-js中的模块化"><a href="#Node-js中的模块化" class="headerlink" title="Node.js中的模块化"></a>Node.js中的模块化</h2><p>根据模块来源的不同，将模块分为了三大类，分别是：</p><ol><li>内置模块（fs，path，http）</li><li>自定义模块（用户创建的每个Js文件）</li><li>第三方模块（由第三方开发出来的模块）</li></ol><div class="tip info"><p>什么是模块作用域？<br>和函数作用域类似，在自定义模块中定义的变量、方法等成员，只能在当前模块内被访问，这种模块级别的访问限制，叫做模块作用域<br>防止了全局变量污染的问题<br>向外共享模块作用域中的成员<br>module对象<br>在每个js自定义模块中都有一个module对象，它里面存储了和当前模块有关的信息<br>module.export对象<br>可以使用该对象将模块内的成员共享出去，供外界使用。外界用require方法导入自定义模块时，得到的就是Module.exports所指的对象<br>exports对象<br>由于module.exports单词写起来比较复杂，为了简化向外共享成员的代码，Node提供了exports对象。默认情况下，exports和module.exports指向同一个对象，最终共享的结果，还是以module.exports指向的结果为准<br>exports和module.exports的使用误区</p></div><h2 id="模块化规范"><a href="#模块化规范" class="headerlink" title="模块化规范"></a>模块化规范</h2><div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/node.js/9.jpg"/></div></div><h2 id="npm与包"><a href="#npm与包" class="headerlink" title="npm与包"></a>npm与包</h2><h3 id="包的基本概念"><a href="#包的基本概念" class="headerlink" title="包的基本概念"></a>包的基本概念</h3><p>Node.js中的第三方模块又叫做包<br>从哪里搜索包：全球最大的包共享平台<br>从哪里下载包：下载包的服务器<br>如何下载包？npm包管理工具</p><h3 id="包的命令"><a href="#包的命令" class="headerlink" title="包的命令"></a>包的命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">//安装包</span><br><span class="line">npm i 包的完整名称</span><br><span class="line"></span><br><span class="line">//安装指定版本的包</span><br><span class="line">npm i 包的完整名称@2.22.2</span><br><span class="line"></span><br><span class="line">//npm包管理工具提供了一个快捷命令，可以在执行命令时所处的目录中，快速创建package.json这个包管理配置文件</span><br><span class="line">npm init -y</span><br><span class="line"></span><br><span class="line">//执行npm install 命令时，npm 包管理工具会先读取package.json中的dependencies节点</span><br><span class="line">//读取到记录的所有依赖包名称和版本号之后，包管理工具会把这些包一次性的下载到项目中去</span><br><span class="line">npm install </span><br><span class="line"></span><br><span class="line">//卸载包</span><br><span class="line">npm uninstall 包的完整名称</span><br><span class="line"></span><br><span class="line">//解决下包速度慢的问题</span><br><span class="line">//淘宝NPM镜像服务器</span><br><span class="line">//镜像：是一种文件存储形式每一个磁盘上的数据在另一个磁盘上存在完全相同的副本即为镜像</span><br><span class="line">//切换npm的下包镜像源。下包的镜像源，指的就是下包的服务器地址</span><br><span class="line">npm config get registry</span><br><span class="line">npm config set registry=https://registry.npm.taobao.org/</span><br><span class="line"></span><br><span class="line">//包的分类</span><br><span class="line">npm i 包名-D //开发依赖包（会被记录到devDependencies节点下）</span><br><span class="line">npm i 包名//核心依赖包（会被记录到）</span><br><span class="line"></span><br><span class="line">//全局包</span><br><span class="line">npm i包名-g //全局安装指定的包</span><br><span class="line">npm uninstall 包名-g//卸载全局安装的包</span><br><span class="line"></span><br><span class="line">//i5ting_toc是一个可以把md文档转为Html页面的小工具</span><br><span class="line">//将i5ting_toc安装为全局包</span><br><span class="line">npm install -g i5ting_toc</span><br><span class="line">//调用,轻松实现md转换为html的功能</span><br><span class="line">i5ting_toc -f 要转换的md文件路径 -o</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="tip bell"><ol><li>初次装包完成后，在项目文件夹下多一个叫做node_modules的文件夹和package-lock.json的配置文件，其中node_modules文件夹用来存放所有已安装到项目中的包。require（）导入第三方包时，就是从这个目录中查找并加载包<br>package-lock.json配置文件用来记录node_modules目录下的每一个包的下载信息，例如包的版本号，下载地址等</li><li>安装指定版本的包：<br>默认情况下，会自定安装最新版本的包，如果需要安装指定版本的包，可以在包名之后，通过@符号指定具体的版本</li><li>包的语义化版本规范<br>包的版本号是以“点分十进制”形式进行定义的，总共有三位数字，例如2.24.0<br>其中每一位数字所代表的含义如下：第一位:大版本<br>第二位：功能版本 第三位：bug修复版本<br>只要前面的版本号增长了，则后面的版本号归零</li></ol></div><h3 id="规范的包结构"><a href="#规范的包结构" class="headerlink" title="规范的包结构"></a>规范的包结构</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/node.js/10.jpg"/></div></div><h2 id="模块的加载机制"><a href="#模块的加载机制" class="headerlink" title="模块的加载机制"></a>模块的加载机制</h2><p>优先从缓存中加载<br>模块在第一次被加载后会被缓存。这也意味着多次调用require()不会导致模块的代码被多次执行。注意：不论是内置模块，自定义模块，还是第三方模块，它们都会优先从缓存中加载，从而提高模块的加载效率。</p><div class="tabs" id="加载机制"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#加载机制-1">内置模块的加载机制</button></li><li class="tab"><button type="button" data-href="#加载机制-2">自定义模块的加载机制</button></li><li class="tab"><button type="button" data-href="#加载机制-3">第三方模块的加载机制</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="加载机制-1"><p>内置模块加载优先级最高。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="加载机制-2"><p>使用require（）加载自定义模块时，必须指定以./或…/开头的路径标识符。在加载自定义模块时，如果没有指定的话，则node模块就会把他当成内置模块或者第三方模块进行加载<br>同时，在使用require（）导入自定义模块时，如果省略了文件的拓展名，则node.js就会按顺序分别尝试加载以下的文件</p><ol><li>按照确切的文件名进行加载</li><li>补全.js拓展名进行加载</li><li>补全.json拓展名进行加载</li><li>补全.node拓展名进行加载</li><li>加载失败，终端报错</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="加载机制-3"><p>如果传递给require()的模块标识符不是一个内置模块，也没有./等等开题，则Node.js会从当前模块的父目录开始，尝试从.node_modules文件夹中加载第三方模块。如果没有找到第三方模块，则移动到再上一层父目录中，进行加载，直到文件系统的根目录</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="目录作为模块"><a href="#目录作为模块" class="headerlink" title="目录作为模块"></a>目录作为模块</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/node.js/11.jpg"/></div></div><h1 id="express"><a href="#express" class="headerlink" title="express"></a>express</h1><h2 id="express简介"><a href="#express简介" class="headerlink" title="express简介"></a>express简介</h2><div class="tip info"><p>Express是基于Node.js平台，快速，开放，极简的Web开发框架<br>使用Express,我们可以方便、快速地创建web网站的服务器和api接口的服务器</p></div><h2 id="express的使用"><a href="#express的使用" class="headerlink" title="express的使用"></a>express的使用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">//1.导入express</span><br><span class="line">const express = require(&#x27;express&#x27;)</span><br><span class="line">const res = require(&#x27;express/lib/response&#x27;)</span><br><span class="line">//2.创建web服务器</span><br><span class="line">const app = express()</span><br><span class="line">//4.监听客户端的GET和POST请求，并向客户端响应具体的内容</span><br><span class="line">app.get(&#x27;/user&#x27;, () =&gt; &#123;</span><br><span class="line">    //调用express提高的res.send()方法，向客户端响应一个json对象</span><br><span class="line">    res.send(&#123; name: &#x27;zs&#x27;, age: 20, gender: &#x27;男&#x27; &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">app.post(&#x27;/user&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">    //调用express提供的res.send()方法，向客户端响应一个文本字符串</span><br><span class="line">    res.send(&#x27;请求成功&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line">app.get(&#x27;/&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">    //通过req.query可以获取到客户端发送过来的查询参数</span><br><span class="line">    //注意：在默认情况下，req.query是一个空对象</span><br><span class="line">    console.log(req.query)</span><br><span class="line">    res.send(req.query)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">//url地址中，我们开业通过：参数名的形式，匹配动态参数值</span><br><span class="line">app.get(&#x27;/user/:id&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">    //req.params默认是一个空对象</span><br><span class="line">    //里面存放这通过：动态匹配到的参数值</span><br><span class="line">    console.log(req.params)</span><br><span class="line">    res.send(req.params)</span><br><span class="line">&#125;)</span><br><span class="line">//3.启动web服务器</span><br><span class="line">app.listen(80, () =&gt; &#123;</span><br><span class="line">    console.log(&#x27;express server running at http://127.0.0.1&#x27;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="托管静态资源"><a href="#托管静态资源" class="headerlink" title="托管静态资源"></a>托管静态资源</h2><div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/node.js/12.jpg"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/node.js/13.jpg"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/node.js/14.jpg"/></div></div><h1 id="express-路由"><a href="#express-路由" class="headerlink" title="express 路由"></a>express 路由</h1><h2 id="路由的概念"><a href="#路由的概念" class="headerlink" title="路由的概念"></a>路由的概念</h2><div class="tip info"><p>广义上来讲，路由就是映射关系<br>在Express中，路由指的是客户端请求与服务器处理函数之间的映射关系<br>Express中的路由分三部分组成，分别是请求的类型，请求的URL地址，处理函数。</p></div><h3 id="express中路由的例子"><a href="#express中路由的例子" class="headerlink" title="express中路由的例子"></a>express中路由的例子</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//匹配GET请求，且请求URL为/</span><br><span class="line">app.get(&#x27;/&#x27;,function(req,res)&#123;</span><br><span class="line">res.send(&#x27;Hello World!&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line">//匹配post请求，且请求URL为/</span><br><span class="line">app.post(&#x27;/&#x27;,function(req,res)&#123;</span><br><span class="line">res.send(&#x27;Got a POST request&#x27;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;初识node-js与内置模块&quot;&gt;&lt;a href=&quot;#初识node-js与内置模块&quot; class=&quot;headerlink&quot; title=&quot;初识node.js与内置模块&quot;&gt;&lt;/a&gt;初识node.js与内置模块&lt;/h1&gt;&lt;h2 id=&quot;回顾与思考&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="笔记" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL</title>
    <link href="http://example.com/2022/09/22/MySQL/"/>
    <id>http://example.com/2022/09/22/MySQL/</id>
    <published>2022-09-21T16:00:00.000Z</published>
    <updated>2022-12-15T13:25:43.047Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><h2 id="通用语法及分类"><a href="#通用语法及分类" class="headerlink" title="通用语法及分类"></a>通用语法及分类</h2><ul><li>DDL: 数据定义语言，用来定义数据库对象（数据库、表、字段）</li><li>DML: 数据操作语言，用来对数据库表中的数据进行增删改</li><li>DQL: 数据查询语言，用来查询数据库中表的记录</li><li>DCL: 数据控制语言，用来创建数据库用户、控制数据库的控制权限</li></ul><h3 id="DDL（数据定义语言）"><a href="#DDL（数据定义语言）" class="headerlink" title="DDL（数据定义语言）"></a>DDL（数据定义语言）</h3><p>数据定义语言</p><h4 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h4><p>查询所有数据库：<br><code>SHOW DATABASES;</code><br>查询当前数据库：<br><code>SELECT DATABASE();</code><br>创建数据库：<br><code>CREATE DATABASE [ IF NOT EXISTS ] 数据库名 [ DEFAULT CHARSET 字符集] [COLLATE 排序规则 ];</code><br>删除数据库：<br><code>DROP DATABASE [ IF EXISTS ] 数据库名;</code><br>使用数据库：<br><code>USE 数据库名;</code></p><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>UTF8字符集长度为3字节，有些符号占4字节，所以推荐用utf8mb4字符集</li></ul><h4 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h4><p>查询当前数据库所有表：<br><code>SHOW TABLES;</code><br>查询表结构：<br><code>DESC 表名;</code><br>查询指定表的建表语句：<br><code>SHOW CREATE TABLE 表名;</code></p><p>创建表：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">字段1 字段1类型 [COMMENT 字段1注释],</span><br><span class="line">字段2 字段2类型 [COMMENT 字段2注释],</span><br><span class="line">字段3 字段3类型 [COMMENT 字段3注释],</span><br><span class="line">...</span><br><span class="line">字段n 字段n类型 [COMMENT 字段n注释]</span><br><span class="line">)[ COMMENT 表注释 ];</span><br></pre></td></tr></table></figure><br><strong>最后一个字段后面没有逗号</strong></p><p>添加字段：<br><code>ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];</code><br>例：<code>ALTER TABLE emp ADD nickname varchar(20) COMMENT &#39;昵称&#39;;</code></p><p>修改数据类型：<br><code>ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);</code><br>修改字段名和字段类型：<br><code>ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];</code><br>例：将emp表的nickname字段修改为username，类型为varchar(30)<br><code>ALTER TABLE emp CHANGE nickname username varchar(30) COMMENT &#39;昵称&#39;;</code></p><p>删除字段：<br><code>ALTER TABLE 表名 DROP 字段名;</code></p><p>修改表名：<br><code>ALTER TABLE 表名 RENAME TO 新表名</code></p><p>删除表：<br><code>DROP TABLE [IF EXISTS] 表名;</code><br>删除表，并重新创建该表：<br><code>TRUNCATE TABLE 表名;</code></p><h3 id="DML（数据操作语言）"><a href="#DML（数据操作语言）" class="headerlink" title="DML（数据操作语言）"></a>DML（数据操作语言）</h3><h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h4><p>指定字段：<br><code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...);</code><br>全部字段：<br><code>INSERT INTO 表名 VALUES (值1, 值2, ...);</code></p><p>批量添加数据：<br><code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code><br><code>INSERT INTO 表名 VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code></p><h5 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>字符串和日期类型数据应该包含在引号中</li><li>插入的数据大小应该在字段的规定范围内</li></ul><h4 id="更新和删除数据"><a href="#更新和删除数据" class="headerlink" title="更新和删除数据"></a>更新和删除数据</h4><p>修改数据：<br><code>UPDATE 表名 SET 字段名1 = 值1, 字段名2 = 值2, ... [ WHERE 条件 ];</code><br>例：<br><code>UPDATE emp SET name = &#39;Jack&#39; WHERE id = 1;</code></p><p>删除数据：<br><code>DELETE FROM 表名 [ WHERE 条件 ];</code></p><h3 id="DQL（数据查询语言）"><a href="#DQL（数据查询语言）" class="headerlink" title="DQL（数据查询语言）"></a>DQL（数据查询语言）</h3><p>语法：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">字段列表</span><br><span class="line">FROM</span><br><span class="line">表名字段</span><br><span class="line">WHERE</span><br><span class="line">条件列表</span><br><span class="line">GROUP BY</span><br><span class="line">分组字段列表</span><br><span class="line">HAVING</span><br><span class="line">分组后的条件列表</span><br><span class="line">ORDER BY</span><br><span class="line">排序字段列表</span><br><span class="line">LIMIT</span><br><span class="line">分页参数</span><br></pre></td></tr></table></figure></p><h4 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h4><p>查询多个字段：<br><code>SELECT 字段1, 字段2, 字段3, ... FROM 表名;</code><br><code>SELECT * FROM 表名;</code></p><p>设置别名：<br><code>SELECT 字段1 [ AS 别名1 ], 字段2 [ AS 别名2 ], 字段3 [ AS 别名3 ], ... FROM 表名;</code><br><code>SELECT 字段1 [ 别名1 ], 字段2 [ 别名2 ], 字段3 [ 别名3 ], ... FROM 表名;</code></p><p>去除重复记录：<br><code>SELECT DISTINCT 字段列表 FROM 表名;</code></p><p>转义：<br><code>SELECT * FROM 表名 WHERE name LIKE &#39;/_张三&#39; ESCAPE &#39;/&#39;</code><br>/ 之后的_不作为通配符</p><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 WHERE 条件列表;</code></p><p>条件：</p><div class="table-container"><table><thead><tr><th>比较运算符</th><th>功能</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt; 或 !=</td><td>不等于</td></tr><tr><td>BETWEEN … AND …</td><td>在某个范围内（含最小、最大值）</td></tr><tr><td>IN(…)</td><td>在in之后的列表中的值，多选一</td></tr><tr><td>LIKE 占位符</td><td>模糊匹配（_匹配单个字符，%匹配任意个字符）</td></tr><tr><td>IS NULL</td><td>是NULL</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>逻辑运算符</th><th>功能</th></tr></thead><tbody><tr><td>AND 或 &amp;&amp;</td><td>并且（多个条件同时成立）</td></tr><tr><td>OR 或 &#124;&#124;</td><td>或者（多个条件任意一个成立）</td></tr><tr><td>NOT 或 !</td><td>非，不是</td></tr></tbody></table></div><p>例子：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">-- 年龄等于30</span><br><span class="line">select * from employee where age = 30;</span><br><span class="line">-- 年龄小于30</span><br><span class="line">select * from employee where age &lt; 30;</span><br><span class="line">-- 小于等于</span><br><span class="line">select * from employee where age &lt;= 30;</span><br><span class="line">-- 没有身份证</span><br><span class="line">select * from employee where idcard is null or idcard = &#x27;&#x27;;</span><br><span class="line">-- 有身份证</span><br><span class="line">select * from employee where idcard;</span><br><span class="line">select * from employee where idcard is not null;</span><br><span class="line">-- 不等于</span><br><span class="line">select * from employee where age != 30;</span><br><span class="line">-- 年龄在20到30之间</span><br><span class="line">select * from employee where age between 20 and 30;</span><br><span class="line">select * from employee where age &gt;= 20 and age &lt;= 30;</span><br><span class="line">-- 下面语句不报错，但查不到任何信息</span><br><span class="line">select * from employee where age between 30 and 20;</span><br><span class="line">-- 性别为女且年龄小于30</span><br><span class="line">select * from employee where age &lt; 30 and gender = &#x27;女&#x27;;</span><br><span class="line">-- 年龄等于25或30或35</span><br><span class="line">select * from employee where age = 25 or age = 30 or age = 35;</span><br><span class="line">select * from employee where age in (25, 30, 35);</span><br><span class="line">-- 姓名为两个字</span><br><span class="line">select * from employee where name like &#x27;__&#x27;;</span><br><span class="line">-- 身份证最后为X</span><br><span class="line">select * from employee where idcard like &#x27;%X&#x27;;</span><br></pre></td></tr></table></figure></p><h4 id="聚合查询（聚合函数）"><a href="#聚合查询（聚合函数）" class="headerlink" title="聚合查询（聚合函数）"></a>聚合查询（聚合函数）</h4><p>常见聚合函数：</p><div class="table-container"><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>count</td><td>统计数量</td></tr><tr><td>max</td><td>最大值</td></tr><tr><td>min</td><td>最小值</td></tr><tr><td>avg</td><td>平均值</td></tr><tr><td>sum</td><td>求和</td></tr></tbody></table></div><p>语法：<br><code>SELECT 聚合函数(字段列表) FROM 表名;</code><br>例：<br><code>SELECT count(id) from employee where workaddress = &quot;广东省&quot;;</code></p><h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 [ WHERE 条件 ] GROUP BY 分组字段名 [ HAVING 分组后的过滤条件 ];</code></p><p>where 和 having 的区别：</p><ul><li>执行时机不同：where是分组之前进行过滤，不满足where条件不参与分组；having是分组后对结果进行过滤。</li><li>判断条件不同：where不能对聚合函数进行判断，而having可以。</li></ul><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 根据性别分组，统计男性和女性数量（只显示分组数量，不显示哪个是男哪个是女）</span><br><span class="line">select count(*) from employee group by gender;</span><br><span class="line">-- 根据性别分组，统计男性和女性数量</span><br><span class="line">select gender, count(*) from employee group by gender;</span><br><span class="line">-- 根据性别分组，统计男性和女性的平均年龄</span><br><span class="line">select gender, avg(age) from employee group by gender;</span><br><span class="line">-- 年龄小于45，并根据工作地址分组</span><br><span class="line">select workaddress, count(*) from employee where age &lt; 45 group by workaddress;</span><br><span class="line">-- 年龄小于45，并根据工作地址分组，获取员工数量大于等于3的工作地址</span><br><span class="line">select workaddress, count(*) address_count from employee where age &lt; 45 group by workaddress having address_count &gt;= 3;</span><br></pre></td></tr></table></figure><h5 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>执行顺序：where &gt; 聚合函数 &gt; having</li><li>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义</li></ul><h4 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1, 字段2 排序方式2;</code></p><p>排序方式：</p><ul><li>ASC: 升序（默认）</li><li>DESC: 降序</li></ul><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 根据年龄升序排序</span><br><span class="line">SELECT * FROM employee ORDER BY age ASC;</span><br><span class="line">SELECT * FROM employee ORDER BY age;</span><br><span class="line">-- 两字段排序，根据年龄升序排序，入职时间降序排序</span><br><span class="line">SELECT * FROM employee ORDER BY age ASC, entrydate DESC;</span><br></pre></td></tr></table></figure><h5 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h5><p>如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序</p><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 LIMIT 起始索引, 查询记录数;</code></p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 查询第一页数据，展示10条</span><br><span class="line">SELECT * FROM employee LIMIT 0, 10;</span><br><span class="line">-- 查询第二页</span><br><span class="line">SELECT * FROM employee LIMIT 10, 10;</span><br></pre></td></tr></table></figure><h5 id="注意事项-4"><a href="#注意事项-4" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>起始索引从0开始，起始索引 = （查询页码 - 1） * 每页显示记录数</li><li>分页查询是数据库的方言，不同数据库有不同实现，MySQL是LIMIT</li><li>如果查询的是第一页数据，起始索引可以省略，直接简写 LIMIT 10</li></ul><h4 id="DQL执行顺序"><a href="#DQL执行顺序" class="headerlink" title="DQL执行顺序"></a>DQL执行顺序</h4><p>FROM -&gt; WHERE -&gt; GROUP BY -&gt; SELECT -&gt; ORDER BY -&gt; LIMIT</p><h3 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h3><h4 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h4><p>查询用户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USE mysql;</span><br><span class="line">SELECT * FROM user;</span><br></pre></td></tr></table></figure><p>创建用户:<br><code>CREATE USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED BY &#39;密码&#39;;</code></p><p>修改用户密码：<br><code>ALTER USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED WITH mysql_native_password BY &#39;新密码&#39;;</code></p><p>删除用户：<br><code>DROP USER &#39;用户名&#39;@&#39;主机名&#39;;</code></p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 创建用户test，只能在当前主机localhost访问</span><br><span class="line">create user &#x27;test&#x27;@&#x27;localhost&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">-- 创建用户test，能在任意主机访问</span><br><span class="line">create user &#x27;test&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">create user &#x27;test&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">-- 修改密码</span><br><span class="line">alter user &#x27;test&#x27;@&#x27;localhost&#x27; identified with mysql_native_password by &#x27;1234&#x27;;</span><br><span class="line">-- 删除用户</span><br><span class="line">drop user &#x27;test&#x27;@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure><h5 id="注意事项-5"><a href="#注意事项-5" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>主机名可以使用 % 通配</li></ul><h4 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h4><p>常用权限：</p><div class="table-container"><table><thead><tr><th>权限</th><th>说明</th></tr></thead><tbody><tr><td>ALL, ALL PRIVILEGES</td><td>所有权限</td></tr><tr><td>SELECT</td><td>查询数据</td></tr><tr><td>INSERT</td><td>插入数据</td></tr><tr><td>UPDATE</td><td>修改数据</td></tr><tr><td>DELETE</td><td>删除数据</td></tr><tr><td>ALTER</td><td>修改表</td></tr><tr><td>DROP</td><td>删除数据库/表/视图</td></tr><tr><td>CREATE</td><td>创建数据库/表</td></tr></tbody></table></div><p>更多权限请看<a href="#权限一览表" title="权限一览表">权限一览表</a></p><p>查询权限：<br><code>SHOW GRANTS FOR &#39;用户名&#39;@&#39;主机名&#39;;</code></p><p>授予权限：<br><code>GRANT 权限列表 ON 数据库名.表名 TO &#39;用户名&#39;@&#39;主机名&#39;;</code></p><p>撤销权限：<br><code>REVOKE 权限列表 ON 数据库名.表名 FROM &#39;用户名&#39;@&#39;主机名&#39;;</code></p><h5 id="注意事项-6"><a href="#注意事项-6" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>多个权限用逗号分隔</li><li>授权时，数据库名和表名可以用 * 进行通配，代表所有</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li>字符串函数</li><li>数值函数</li><li>日期函数</li><li>流程函数</li></ul><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><p>常用函数：</p><div class="table-container"><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CONCAT(s1, s2, …, sn)</td><td>字符串拼接，将s1, s2, …, sn拼接成一个字符串</td></tr><tr><td>LOWER(str)</td><td>将字符串全部转为小写</td></tr><tr><td>UPPER(str)</td><td>将字符串全部转为大写</td></tr><tr><td>LPAD(str, n, pad)</td><td>左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</td></tr><tr><td>RPAD(str, n, pad)</td><td>右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</td></tr><tr><td>TRIM(str)</td><td>去掉字符串头部和尾部的空格</td></tr><tr><td>SUBSTRING(str, start, len)</td><td>返回从字符串str从start位置起的len个长度的字符串</td></tr></tbody></table></div><p>使用示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-- 拼接</span><br><span class="line">SELECT CONCAT(&#x27;Hello&#x27;, &#x27;World&#x27;);</span><br><span class="line">-- 小写</span><br><span class="line">SELECT LOWER(&#x27;Hello&#x27;);</span><br><span class="line">-- 大写</span><br><span class="line">SELECT UPPER(&#x27;Hello&#x27;);</span><br><span class="line">-- 左填充</span><br><span class="line">SELECT LPAD(&#x27;01&#x27;, 5, &#x27;-&#x27;);</span><br><span class="line">-- 右填充</span><br><span class="line">SELECT RPAD(&#x27;01&#x27;, 5, &#x27;-&#x27;);</span><br><span class="line">-- 去除空格</span><br><span class="line">SELECT TRIM(&#x27; Hello World &#x27;);</span><br><span class="line">-- 切片（起始索引为1）</span><br><span class="line">SELECT SUBSTRING(&#x27;Hello World&#x27;, 1, 5);</span><br></pre></td></tr></table></figure><h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><p>常见函数：</p><div class="table-container"><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CEIL(x)</td><td>向上取整</td></tr><tr><td>FLOOR(x)</td><td>向下取整</td></tr><tr><td>MOD(x, y)</td><td>返回x/y的模</td></tr><tr><td>RAND()</td><td>返回0~1内的随机数</td></tr><tr><td>ROUND(x, y)</td><td>求参数x的四舍五入值，保留y位小数</td></tr></tbody></table></div><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><p>常用函数：</p><div class="table-container"><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CURDATE()</td><td>返回当前日期</td></tr><tr><td>CURTIME()</td><td>返回当前时间</td></tr><tr><td>NOW()</td><td>返回当前日期和时间</td></tr><tr><td>YEAR(date)</td><td>获取指定date的年份</td></tr><tr><td>MONTH(date)</td><td>获取指定date的月份</td></tr><tr><td>DAY(date)</td><td>获取指定date的日期</td></tr><tr><td>DATE_ADD(date, INTERVAL expr type)</td><td>返回一个日期/时间值加上一个时间间隔expr后的时间值</td></tr><tr><td>DATEDIFF(date1, date2)</td><td>返回起始时间date1和结束时间date2之间的天数</td></tr></tbody></table></div><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- DATE_ADD</span><br><span class="line">SELECT DATE_ADD(NOW(), INTERVAL 70 YEAR);</span><br></pre></td></tr></table></figure><h3 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h3><p>常用函数：</p><div class="table-container"><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>IF(value, t, f)</td><td>如果value为true，则返回t，否则返回f</td></tr><tr><td>IFNULL(value1, value2)</td><td>如果value1不为空，返回value1，否则返回value2</td></tr><tr><td>CASE WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td><td>如果val1为true，返回res1，… 否则返回default默认值</td></tr><tr><td>CASE [ expr ] WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td><td>如果expr的值等于val1，返回res1，… 否则返回default默认值</td></tr></tbody></table></div><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">name,</span><br><span class="line">(case when age &gt; 30 then &#x27;中年&#x27; else &#x27;青年&#x27; end)</span><br><span class="line">from employee;</span><br><span class="line">select</span><br><span class="line">name,</span><br><span class="line">(case workaddress when &#x27;北京市&#x27; then &#x27;一线城市&#x27; when &#x27;上海市&#x27; then &#x27;一线城市&#x27; else &#x27;二线城市&#x27; end) as &#x27;工作地址&#x27;</span><br><span class="line">from employee;</span><br></pre></td></tr></table></figure><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>分类：</p><div class="table-container"><table><thead><tr><th>约束</th><th>描述</th><th>关键字</th></tr></thead><tbody><tr><td>非空约束</td><td>限制该字段的数据不能为null</td><td>NOT NULL</td></tr><tr><td>唯一约束</td><td>保证该字段的所有数据都是唯一、不重复的</td><td>UNIQUE</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一标识，要求非空且唯一</td><td>PRIMARY KEY</td></tr><tr><td>默认约束</td><td>保存数据时，如果未指定该字段的值，则采用默认值</td><td>DEFAULT</td></tr><tr><td>检查约束（8.0.1版本后）</td><td>保证字段值满足某一个条件</td><td>CHECK</td></tr><tr><td>外键约束</td><td>用来让两张图的数据之间建立连接，保证数据的一致性和完整性</td><td>FOREIGN KEY</td></tr></tbody></table></div><p>约束是作用于表中字段上的，可以再创建表/修改表的时候添加约束。</p><h3 id="常用约束"><a href="#常用约束" class="headerlink" title="常用约束"></a>常用约束</h3><div class="table-container"><table><thead><tr><th>约束条件</th><th>关键字</th></tr></thead><tbody><tr><td>主键</td><td>PRIMARY KEY</td></tr><tr><td>自动增长</td><td>AUTO_INCREMENT</td></tr><tr><td>不为空</td><td>NOT NULL</td></tr><tr><td>唯一</td><td>UNIQUE</td></tr><tr><td>逻辑条件</td><td>CHECK</td></tr><tr><td>默认值</td><td>DEFAULT</td></tr></tbody></table></div><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table user(</span><br><span class="line">id int primary key auto_increment,</span><br><span class="line">name varchar(10) not null unique,</span><br><span class="line">age int check(age &gt; 0 and age &lt; 120),</span><br><span class="line">status char(1) default &#x27;1&#x27;,</span><br><span class="line">gender char(1)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p>添加外键：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">字段名 字段类型,</span><br><span class="line">...</span><br><span class="line">[CONSTRAINT] [外键名称] FOREIGN KEY(外键字段名) REFERENCES 主表(主表列名)</span><br><span class="line">);</span><br><span class="line">ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名) REFERENCES 主表(主表列名);</span><br><span class="line"></span><br><span class="line">-- 例子</span><br><span class="line">alter table emp add constraint fk_emp_dept_id foreign key(dept_id) references dept(id);</span><br></pre></td></tr></table></figure><p>删除外键：<br><code>ALTER TABLE 表名 DROP FOREIGN KEY 外键名;</code></p><h4 id="删除-更新行为"><a href="#删除-更新行为" class="headerlink" title="删除/更新行为"></a>删除/更新行为</h4><div class="table-container"><table><thead><tr><th>行为</th><th>说明</th></tr></thead><tbody><tr><td>NO ACTION</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与RESTRICT一致）</td></tr><tr><td>RESTRICT</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与NO ACTION一致）</td></tr><tr><td>CASCADE</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则也删除/更新外键在子表中的记录</td></tr><tr><td>SET NULL</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null（要求该外键允许为null）</td></tr><tr><td>SET DEFAULT</td><td>父表有变更时，子表将外键设为一个默认值（Innodb不支持）</td></tr></tbody></table></div><p>更改删除/更新行为：<br><code>ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段) REFERENCES 主表名(主表字段名) ON UPDATE 行为 ON DELETE 行为;</code></p><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h3><ul><li>一对多（多对一）</li><li>多对多</li><li>一对一</li></ul><h4 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h4><p>案例：部门与员工<br>关系：一个部门对应多个员工，一个员工对应一个部门<br>实现：在多的一方建立外键，指向一的一方的主键</p><h4 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h4><p>案例：学生与课程<br>关系：一个学生可以选多门课程，一门课程也可以供多个学生选修<br>实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</p><h4 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h4><p>案例：用户与用户详情<br>关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率<br>实现：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的（UNIQUE）</p><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>合并查询（笛卡尔积，会展示所有组合结果）：<br><code>select * from employee, dept;</code></p><blockquote><p>笛卡尔积：两个集合A集合和B集合的所有组合情况（在多表查询时，需要消除无效的笛卡尔积）</p></blockquote><p>消除无效笛卡尔积：<br><code>select * from employee, dept where employee.dept = dept.id;</code></p><h3 id="内连接查询"><a href="#内连接查询" class="headerlink" title="内连接查询"></a>内连接查询</h3><p>内连接查询的是两张表交集的部分</p><p>隐式内连接：<br><code>SELECT 字段列表 FROM 表1, 表2 WHERE 条件 ...;</code></p><p>显式内连接：<br><code>SELECT 字段列表 FROM 表1 [ INNER ] JOIN 表2 ON 连接条件 ...;</code></p><p>显式性能比隐式高</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 查询员工姓名，及关联的部门的名称</span><br><span class="line">-- 隐式</span><br><span class="line">select e.name, d.name from employee as e, dept as d where e.dept = d.id;</span><br><span class="line">-- 显式</span><br><span class="line">select e.name, d.name from employee as e inner join dept as d on e.dept = d.id;</span><br></pre></td></tr></table></figure><h3 id="外连接查询"><a href="#外连接查询" class="headerlink" title="外连接查询"></a>外连接查询</h3><p>左外连接：<br>查询左表所有数据，以及两张表交集部分数据<br><code>SELECT 字段列表 FROM 表1 LEFT [ OUTER ] JOIN 表2 ON 条件 ...;</code><br>相当于查询表1的所有数据，包含表1和表2交集部分数据</p><p>右外连接：<br>查询右表所有数据，以及两张表交集部分数据<br><code>SELECT 字段列表 FROM 表1 RIGHT [ OUTER ] JOIN 表2 ON 条件 ...;</code></p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 左</span><br><span class="line">select e.*, d.name from employee as e left outer join dept as d on e.dept = d.id;</span><br><span class="line">select d.name, e.* from dept d left outer join emp e on e.dept = d.id;  -- 这条语句与下面的语句效果一样</span><br><span class="line">-- 右</span><br><span class="line">select d.name, e.* from employee as e right outer join dept as d on e.dept = d.id;</span><br></pre></td></tr></table></figure><p>左连接可以查询到没有dept的employee，右连接可以查询到没有employee的dept</p><h3 id="自连接查询"><a href="#自连接查询" class="headerlink" title="自连接查询"></a>自连接查询</h3><p>当前表与自身的连接查询，自连接必须使用表别名</p><p>语法：<br><code>SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件 ...;</code></p><p>自连接查询，可以是内连接查询，也可以是外连接查询</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 查询员工及其所属领导的名字</span><br><span class="line">select a.name, b.name from employee a, employee b where a.manager = b.id;</span><br><span class="line">-- 没有领导的也查询出来</span><br><span class="line">select a.name, b.name from employee a left join employee b on a.manager = b.id;</span><br></pre></td></tr></table></figure><h3 id="联合查询-union-union-all"><a href="#联合查询-union-union-all" class="headerlink" title="联合查询 union, union all"></a>联合查询 union, union all</h3><p>把多次查询的结果合并，形成一个新的查询集</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表A ...</span><br><span class="line">UNION [ALL]</span><br><span class="line">SELECT 字段列表 FROM 表B ...</span><br></pre></td></tr></table></figure><h4 id="注意事项-7"><a href="#注意事项-7" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>UNION ALL 会有重复结果，UNION 不会</li><li>联合查询比使用or效率高，不会使索引失效</li></ul><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>SQL语句中嵌套SELECT语句，称谓嵌套查询，又称子查询。<br><code>SELECT * FROM t1 WHERE column1 = ( SELECT column1 FROM t2);</code><br><strong>子查询外部的语句可以是 INSERT / UPDATE / DELETE / SELECT 的任何一个</strong></p><p>根据子查询结果可以分为：</p><ul><li>标量子查询（子查询结果为单个值）</li><li>列子查询（子查询结果为一列）</li><li>行子查询（子查询结果为一行）</li><li>表子查询（子查询结果为多行多列）</li></ul><p>根据子查询位置可分为：</p><ul><li>WHERE 之后</li><li>FROM 之后</li><li>SELECT 之后</li></ul><h4 id="标量子查询"><a href="#标量子查询" class="headerlink" title="标量子查询"></a>标量子查询</h4><p>子查询返回的结果是单个值（数字、字符串、日期等）。<br>常用操作符：- &lt; &gt; &gt; &gt;= &lt; &lt;=</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 查询销售部所有员工</span><br><span class="line">select id from dept where name = &#x27;销售部&#x27;;</span><br><span class="line">-- 根据销售部部门ID，查询员工信息</span><br><span class="line">select * from employee where dept = 4;</span><br><span class="line">-- 合并（子查询）</span><br><span class="line">select * from employee where dept = (select id from dept where name = &#x27;销售部&#x27;);</span><br><span class="line"></span><br><span class="line">-- 查询xxx入职之后的员工信息</span><br><span class="line">select * from employee where entrydate &gt; (select entrydate from employee where name = &#x27;xxx&#x27;);</span><br></pre></td></tr></table></figure><h4 id="列子查询"><a href="#列子查询" class="headerlink" title="列子查询"></a>列子查询</h4><p>返回的结果是一列（可以是多行）。</p><p>常用操作符：</p><div class="table-container"><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>IN</td><td>在指定的集合范围内，多选一</td></tr><tr><td>NOT IN</td><td>不在指定的集合范围内</td></tr><tr><td>ANY</td><td>子查询返回列表中，有任意一个满足即可</td></tr><tr><td>SOME</td><td>与ANY等同，使用SOME的地方都可以使用ANY</td></tr><tr><td>ALL</td><td>子查询返回列表的所有值都必须满足</td></tr></tbody></table></div><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 查询销售部和市场部的所有员工信息</span><br><span class="line">select * from employee where dept in (select id from dept where name = &#x27;销售部&#x27; or name = &#x27;市场部&#x27;);</span><br><span class="line">-- 查询比财务部所有人工资都高的员工信息</span><br><span class="line">select * from employee where salary &gt; all(select salary from employee where dept = (select id from dept where name = &#x27;财务部&#x27;));</span><br><span class="line">-- 查询比研发部任意一人工资高的员工信息</span><br><span class="line">select * from employee where salary &gt; any (select salary from employee where dept = (select id from dept where name = &#x27;研发部&#x27;));</span><br></pre></td></tr></table></figure><h4 id="行子查询"><a href="#行子查询" class="headerlink" title="行子查询"></a>行子查询</h4><p>返回的结果是一行（可以是多列）。<br>常用操作符：=, &lt;, &gt;, IN, NOT IN</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 查询与xxx的薪资及直属领导相同的员工信息</span><br><span class="line">select * from employee where (salary, manager) = (12500, 1);</span><br><span class="line">select * from employee where (salary, manager) = (select salary, manager from employee where name = &#x27;xxx&#x27;);</span><br></pre></td></tr></table></figure><h4 id="表子查询"><a href="#表子查询" class="headerlink" title="表子查询"></a>表子查询</h4><p>返回的结果是多行多列<br>常用操作符：IN</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 查询与xxx1，xxx2的职位和薪资相同的员工</span><br><span class="line">select * from employee where (job, salary) in (select job, salary from employee where name = &#x27;xxx1&#x27; or name = &#x27;xxx2&#x27;);</span><br><span class="line">-- 查询入职日期是2006-01-01之后的员工，及其部门信息</span><br><span class="line">select e.*, d.* from (select * from employee where entrydate &gt; &#x27;2006-01-01&#x27;) as e left join dept as d on e.dept = d.id;</span><br></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务是一组操作的集合，事务会把所有操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p><p>基本操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">-- 1. 查询张三账户余额</span><br><span class="line">select * from account where name = &#x27;张三&#x27;;</span><br><span class="line">-- 2. 将张三账户余额-1000</span><br><span class="line">update account set money = money - 1000 where name = &#x27;张三&#x27;;</span><br><span class="line">-- 此语句出错后张三钱减少但是李四钱没有增加</span><br><span class="line">模拟sql语句错误</span><br><span class="line">-- 3. 将李四账户余额+1000</span><br><span class="line">update account set money = money + 1000 where name = &#x27;李四&#x27;;</span><br><span class="line"></span><br><span class="line">-- 查看事务提交方式</span><br><span class="line">SELECT @@AUTOCOMMIT;</span><br><span class="line">-- 设置事务提交方式，1为自动提交，0为手动提交，该设置只对当前会话有效</span><br><span class="line">SET @@AUTOCOMMIT = 0;</span><br><span class="line">-- 提交事务</span><br><span class="line">COMMIT;</span><br><span class="line">-- 回滚事务</span><br><span class="line">ROLLBACK;</span><br><span class="line"></span><br><span class="line">-- 设置手动提交后上面代码改为：</span><br><span class="line">select * from account where name = &#x27;张三&#x27;;</span><br><span class="line">update account set money = money - 1000 where name = &#x27;张三&#x27;;</span><br><span class="line">update account set money = money + 1000 where name = &#x27;李四&#x27;;</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><p>操作方式二：</p><p>开启事务：<br><code>START TRANSACTION 或 BEGIN TRANSACTION;</code><br>提交事务：<br><code>COMMIT;</code><br>回滚事务：<br><code>ROLLBACK;</code></p><p>操作实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">start transaction;</span><br><span class="line">select * from account where name = &#x27;张三&#x27;;</span><br><span class="line">update account set money = money - 1000 where name = &#x27;张三&#x27;;</span><br><span class="line">update account set money = money + 1000 where name = &#x27;李四&#x27;;</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><h3 id="四大特性ACID"><a href="#四大特性ACID" class="headerlink" title="四大特性ACID"></a>四大特性ACID</h3><ul><li>原子性(Atomicity)：事务是不可分割的最小操作但愿，要么全部成功，要么全部失败</li><li>一致性(Consistency)：事务完成时，必须使所有数据都保持一致状态</li><li>隔离性(Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li><li>持久性(Durability)：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</li></ul><h3 id="并发事务"><a href="#并发事务" class="headerlink" title="并发事务"></a>并发事务</h3><div class="table-container"><table><thead><tr><th>问题</th><th>描述</th></tr></thead><tbody><tr><td>脏读</td><td>一个事务读到另一个事务还没提交的数据</td></tr><tr><td>不可重复读</td><td>一个事务先后读取同一条记录，但两次读取的数据不同</td></tr><tr><td>幻读</td><td>一个事务按照条件查询数据时，没有对应的数据行，但是再插入数据时，又发现这行数据已经存在</td></tr></tbody></table></div><blockquote><p>这三个问题的详细演示：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd</a> </p></blockquote><p>并发事务隔离级别：</p><div class="table-container"><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>Read uncommitted</td><td>√</td><td>√</td><td>√</td></tr><tr><td>Read committed</td><td>×</td><td>√</td><td>√</td></tr><tr><td>Repeatable Read(默认)</td><td>×</td><td>×</td><td>√</td></tr><tr><td>Serializable</td><td>×</td><td>×</td><td>×</td></tr></tbody></table></div><ul><li>√表示在当前隔离级别下该问题会出现</li><li>Serializable 性能最低；Read uncommitted 性能最高，数据安全性最差</li></ul><p>查看事务隔离级别：<br><code>SELECT @@TRANSACTION_ISOLATION;</code><br>设置事务隔离级别：<br><code>SET [ SESSION | GLOBAL ] TRANSACTION ISOLATION LEVEL &#123;READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE &#125;;</code><br>SESSION 是会话级别，表示只针对当前会话有效，GLOBAL 表示对所有会话有效</p><h1 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h1><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><p>MySQL体系结构：</p><p><img src="https://dhc.pythonanywhere.com/media/editor/MySQL体系结构_20220315034329549927.png" alt="结构图" title="结构图"><br><img src="https://dhc.pythonanywhere.com/media/editor/MySQL体系结构层级含义_20220315034359342837.png" alt="层级描述" title="层级描述"></p><p>存储引擎就是存储数据、建立索引、更新/查询数据等技术的实现方式。存储引擎是基于表而不是基于库的，所以存储引擎也可以被称为表引擎。<br>默认存储引擎是InnoDB。</p><p>相关操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 查询建表语句</span><br><span class="line">show create table account;</span><br><span class="line">-- 建表时指定存储引擎</span><br><span class="line">CREATE TABLE 表名(</span><br><span class="line">...</span><br><span class="line">) ENGINE=INNODB;</span><br><span class="line">-- 查看当前数据库支持的存储引擎</span><br><span class="line">show engines;</span><br></pre></td></tr></table></figure><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><p>InnoDB 是一种兼顾高可靠性和高性能的通用存储引擎，在 MySQL 5.5 之后，InnoDB 是默认的 MySQL 引擎。</p><p>特点：</p><ul><li>DML 操作遵循 ACID 模型，支持<strong>事务</strong></li><li><strong>行级锁</strong>，提高并发访问性能</li><li>支持<strong>外键</strong>约束，保证数据的完整性和正确性</li></ul><p>文件：</p><ul><li>xxx.ibd: xxx代表表名，InnoDB 引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm、sdi）、数据和索引。</li></ul><p>参数：innodb_file_per_table，决定多张表共享一个表空间还是每张表对应一个表空间</p><p>知识点：</p><p>查看 Mysql 变量：<br><code>show variables like &#39;innodb_file_per_table&#39;;</code></p><p>从idb文件提取表结构数据：<br>（在cmd运行）<br><code>ibd2sdi xxx.ibd</code></p><p>InnoDB 逻辑存储结构：<br><img src="https://dhc.pythonanywhere.com/media/editor/逻辑存储结构_20220316030616590001.png" alt="InnoDB逻辑存储结构" title="InnoDB逻辑存储结构"></p><h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><p>MyISAM 是 MySQL 早期的默认存储引擎。</p><p>特点：</p><ul><li>不支持事务，不支持外键</li><li>支持表锁，不支持行锁</li><li>访问速度快</li></ul><p>文件：</p><ul><li>xxx.sdi: 存储表结构信息</li><li>xxx.MYD: 存储数据</li><li>xxx.MYI: 存储索引</li></ul><h3 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h3><p>Memory 引擎的表数据是存储在内存中的，受硬件问题、断电问题的影响，只能将这些表作为临时表或缓存使用。</p><p>特点：</p><ul><li>存放在内存中，速度快</li><li>hash索引（默认）</li></ul><p>文件：</p><ul><li>xxx.sdi: 存储表结构信息</li></ul><h3 id="存储引擎特点"><a href="#存储引擎特点" class="headerlink" title="存储引擎特点"></a>存储引擎特点</h3><div class="table-container"><table><thead><tr><th>特点</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>存储限制</td><td>64TB</td><td>有</td><td>有</td></tr><tr><td>事务安全</td><td>支持</td><td>-</td><td>-</td></tr><tr><td>锁机制</td><td>行锁</td><td>表锁</td><td>表锁</td></tr><tr><td>B+tree索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Hash索引</td><td>-</td><td>-</td><td>支持</td></tr><tr><td>全文索引</td><td>支持（5.6版本之后）</td><td>支持</td><td>-</td></tr><tr><td>空间使用</td><td>高</td><td>低</td><td>N/A</td></tr><tr><td>内存使用</td><td>高</td><td>低</td><td>中等</td></tr><tr><td>批量插入速度</td><td>低</td><td>高</td><td>高</td></tr><tr><td>支持外键</td><td>支持</td><td>-</td><td>-</td></tr></tbody></table></div><h3 id="存储引擎的选择"><a href="#存储引擎的选择" class="headerlink" title="存储引擎的选择"></a>存储引擎的选择</h3><p>在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。</p><ul><li>InnoDB: 如果应用对事物的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，则 InnoDB 是比较合适的选择</li><li>MyISAM: 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不高，那这个存储引擎是非常合适的。</li><li>Memory: 将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。Memory 的缺陷是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性</li></ul><p>电商中的足迹和评论适合使用 MyISAM 引擎，缓存适合使用 Memory 引擎。</p><h2 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h2><h3 id="查看执行频次"><a href="#查看执行频次" class="headerlink" title="查看执行频次"></a>查看执行频次</h3><p>查看当前数据库的 INSERT, UPDATE, DELETE, SELECT 访问频次：<br><code>SHOW GLOBAL STATUS LIKE &#39;Com_______&#39;;</code> 或者 <code>SHOW SESSION STATUS LIKE &#39;Com_______&#39;;</code><br>例：<code>show global status like &#39;Com_______&#39;</code></p><h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h3><p>慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认10秒）的所有SQL语句的日志。<br>MySQL的慢查询日志默认没有开启，需要在MySQL的配置文件（/etc/my.cnf）中配置如下信息：</p><pre><code># 开启慢查询日志开关slow_query_log=1# 设置慢查询日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志long_query_time=2</code></pre><p>更改后记得重启MySQL服务，日志文件位置：/var/lib/mysql/localhost-slow.log</p><p>查看慢查询日志开关状态：<br><code>show variables like &#39;slow_query_log&#39;;</code></p><h3 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h3><p>show profile 能在做SQL优化时帮我们了解时间都耗费在哪里。通过 have_profiling 参数，能看到当前 MySQL 是否支持 profile 操作：<br><code>SELECT @@have_profiling;</code><br>profiling 默认关闭，可以通过set语句在session/global级别开启 profiling：<br><code>SET profiling = 1;</code><br>查看所有语句的耗时：<br><code>show profiles;</code><br>查看指定query_id的SQL语句各个阶段的耗时：<br><code>show profile for query query_id;</code><br>查看指定query_id的SQL语句CPU的使用情况<br><code>show profile cpu for query query_id;</code></p><h3 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h3><p>EXPLAIN 或者 DESC 命令获取 MySQL 如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。<br>语法：</p><pre><code># 直接在select语句之前加上关键字 explain / descEXPLAIN SELECT 字段列表 FROM 表名 HWERE 条件;</code></pre><p>EXPLAIN 各字段含义：</p><ul><li>id：select 查询的序列号，表示查询中执行 select 子句或者操作表的顺序（id相同，执行顺序从上到下；id不同，值越大越先执行）</li><li>select_type：表示 SELECT 的类型，常见取值有 SIMPLE（简单表，即不适用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION中的第二个或者后面的查询语句）、SUBQUERY（SELECT/WHERE之后包含了子查询）等</li><li>type：表示连接类型，性能由好到差的连接类型为 NULL、system、const、eq_ref、ref、range、index、all</li><li>possible_key：可能应用在这张表上的索引，一个或多个</li><li>Key：实际使用的索引，如果为 NULL，则没有使用索引</li><li>Key_len：表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好</li><li>rows：MySQL认为必须要执行的行数，在InnoDB引擎的表中，是一个估计值，可能并不总是准确的</li><li>filtered：表示返回结果的行数占需读取行数的百分比，filtered的值越大越好</li></ul><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>索引是帮助 MySQL <strong>高效获取数据</strong>的<strong>数据结构（有序）</strong>。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查询算法，这种数据结构就是索引。</p><p>优缺点：</p><p>优点：</p><ul><li>提高数据检索效率，降低数据库的IO成本</li><li>通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗</li></ul><p>缺点：</p><ul><li>索引列也是要占用空间的</li><li>索引大大提高了查询效率，但降低了更新的速度，比如 INSERT、UPDATE、DELETE</li></ul><h3 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h3><div class="table-container"><table><thead><tr><th>索引结构</th><th>描述</th></tr></thead><tbody><tr><td>B+Tree</td><td>最常见的索引类型，大部分引擎都支持B+树索引</td></tr><tr><td>Hash</td><td>底层数据结构是用哈希表实现，只有精确匹配索引列的查询才有效，不支持范围查询</td></tr><tr><td>R-Tree(空间索引)</td><td>空间索引是 MyISAM 引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少</td></tr><tr><td>Full-Text(全文索引)</td><td>是一种通过建立倒排索引，快速匹配文档的方式，类似于 Lucene, Solr, ES</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>索引</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>B+Tree索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Hash索引</td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td>R-Tree索引</td><td>不支持</td><td>支持</td><td>不支持</td></tr><tr><td>Full-text</td><td>5.6版本后支持</td><td>支持</td><td>不支持</td></tr></tbody></table></div><h4 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B-Tree"></a>B-Tree</h4><p><img src="https://dhc.pythonanywhere.com/media/editor/二叉树_20220316153214227108.png" alt="二叉树" title="二叉树"></p><p>二叉树的缺点可以用红黑树来解决：<br><img src="https://dhc.pythonanywhere.com/media/editor/红黑树_20220316163142686602.png" alt="红黑树" title="红黑树"><br>红黑树也存在大数据量情况下，层级较深，检索速度慢的问题。</p><p>为了解决上述问题，可以使用 B-Tree 结构。<br>B-Tree (多路平衡查找树) 以一棵最大度数（max-degree，指一个节点的子节点个数）为5（5阶）的 b-tree 为例（每个节点最多存储4个key，5个指针）</p><p><img src="https://dhc.pythonanywhere.com/media/editor/B-Tree结构_20220316163813441163.png" alt="B-Tree结构" title="B-Tree结构"></p><blockquote><p>B-Tree 的数据插入过程动画参照：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68</a><br>演示地址：<a href="https://www.cs.usfca.edu/~galles/visualization/BTree.html">https://www.cs.usfca.edu/~galles/visualization/BTree.html</a></p></blockquote><h4 id="B-Tree-1"><a href="#B-Tree-1" class="headerlink" title="B+Tree"></a>B+Tree</h4><p>结构图：</p><p><img src="https://dhc.pythonanywhere.com/media/editor/B+Tree结构图_20220316170700591277.png" alt="B+Tree结构图" title="B+Tree结构图"></p><blockquote><p>演示地址：<a href="https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html">https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html</a></p></blockquote><p>与 B-Tree 的区别：</p><ul><li>所有的数据都会出现在叶子节点</li><li>叶子节点形成一个单向链表</li></ul><p>MySQL 索引数据结构对经典的 B+Tree 进行了优化。在原 B+Tree 的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的 B+Tree，提高区间访问的性能。</p><p><img src="https://dhc.pythonanywhere.com/media/editor/结构图_20220316171730865611.png" alt="MySQL B+Tree 结构图" title="MySQL B+Tree 结构图"></p><h4 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h4><p>哈希索引就是采用一定的hash算法，将键值换算成新的hash值，映射到对应的槽位上，然后存储在hash表中。<br>如果两个（或多个）键值，映射到一个相同的槽位上，他们就产生了hash冲突（也称为hash碰撞），可以通过链表来解决。</p><p><img src="https://dhc.pythonanywhere.com/media/editor/Hash索引原理图_20220317143226150679.png" alt="Hash索引原理图" title="Hash索引原理图"></p><p>特点：</p><ul><li>Hash索引只能用于对等比较（=、in），不支持范围查询（betwwn、&gt;、&lt;、…）</li><li>无法利用索引完成排序操作</li><li>查询效率高，通常只需要一次检索就可以了，效率通常要高于 B+Tree 索引</li></ul><p>存储引擎支持：</p><ul><li>Memory</li><li>InnoDB: 具有自适应hash功能，hash索引是存储引擎根据 B+Tree 索引在指定条件下自动构建的</li></ul><h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><ol><li>为什么 InnoDB 存储引擎选择使用 B+Tree 索引结构？</li></ol><ul><li>相对于二叉树，层级更少，搜索效率高</li><li>对于 B-Tree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储的键值减少，指针也跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低</li><li>相对于 Hash 索引，B+Tree 支持范围匹配及排序操作</li></ul><h3 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h3><div class="table-container"><table><thead><tr><th>分类</th><th>含义</th><th>特点</th><th>关键字</th></tr></thead><tbody><tr><td>主键索引</td><td>针对于表中主键创建的索引</td><td>默认自动创建，只能有一个</td><td>PRIMARY</td></tr><tr><td>唯一索引</td><td>避免同一个表中某数据列中的值重复</td><td>可以有多个</td><td>UNIQUE</td></tr><tr><td>常规索引</td><td>快速定位特定数据</td><td>可以有多个</td><td></td></tr><tr><td>全文索引</td><td>全文索引查找的是文本中的关键词，而不是比较索引中的值</td><td>可以有多个</td><td>FULLTEXT</td></tr></tbody></table></div><p>在 InnoDB 存储引擎中，根据索引的存储形式，又可以分为以下两种：</p><div class="table-container"><table><thead><tr><th>分类</th><th>含义</th><th>特点</th></tr></thead><tbody><tr><td>聚集索引(Clustered Index)</td><td>将数据存储与索引放一块，索引结构的叶子节点保存了行数据</td><td>必须有，而且只有一个</td></tr><tr><td>二级索引(Secondary Index)</td><td>将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键</td><td>可以存在多个</td></tr></tbody></table></div><p>演示图：</p><p><img src="https://dhc.pythonanywhere.com/media/editor/原理图_20220318194454880073.png" alt="大致原理" title="大致原理"><br><img src="https://dhc.pythonanywhere.com/media/editor/演示图_20220319215403721066.png" alt="演示图" title="演示图"></p><p>聚集索引选取规则：</p><ul><li>如果存在主键，主键索引就是聚集索引</li><li>如果不存在主键，将使用第一个唯一(UNIQUE)索引作为聚集索引</li><li>如果表没有主键或没有合适的唯一索引，则 InnoDB 会自动生成一个 rowid 作为隐藏的聚集索引</li></ul><h4 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h4><p>1. 以下 SQL 语句，哪个执行效率高？为什么？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from user where id = 10;</span><br><span class="line">select * from user where name = &#x27;Arm&#x27;;</span><br><span class="line">-- 备注：id为主键，name字段创建的有索引</span><br></pre></td></tr></table></figure><p>答：第一条语句，因为第二条需要回表查询，相当于两个步骤。</p><p>2. InnoDB 主键索引的 B+Tree 高度为多少？</p><p>答：假设一行数据大小为1k，一页中可以存储16行这样的数据。InnoDB 的指针占用6个字节的空间，主键假设为bigint，占用字节数为8.<br>可得公式：<code>n * 8 + (n + 1) * 6 = 16 * 1024</code>，其中 8 表示 bigint 占用的字节数，n 表示当前节点存储的key的数量，(n + 1) 表示指针数量（比key多一个）。算出n约为1170。</p><p>如果树的高度为2，那么他能存储的数据量大概为：<code>1171 * 16 = 18736</code>；<br>如果树的高度为3，那么他能存储的数据量大概为：<code>1171 * 1171 * 16 = 21939856</code>。</p><p>另外，如果有成千上万的数据，那么就要考虑分表，涉及运维篇知识。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>创建索引：<br><code>CREATE [ UNIQUE | FULLTEXT ] INDEX index_name ON table_name (index_col_name, ...);</code><br>如果不加 CREATE 后面不加索引类型参数，则创建的是常规索引</p><p>查看索引：<br><code>SHOW INDEX FROM table_name;</code></p><p>删除索引：<br><code>DROP INDEX index_name ON table_name;</code></p><p>案例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- name字段为姓名字段，该字段的值可能会重复，为该字段创建索引</span><br><span class="line">create index idx_user_name on tb_user(name);</span><br><span class="line">-- phone手机号字段的值非空，且唯一，为该字段创建唯一索引</span><br><span class="line">create unique index idx_user_phone on tb_user (phone);</span><br><span class="line">-- 为profession, age, status创建联合索引</span><br><span class="line">create index idx_user_pro_age_stat on tb_user(profession, age, status);</span><br><span class="line">-- 为email建立合适的索引来提升查询效率</span><br><span class="line">create index idx_user_email on tb_user(email);</span><br><span class="line"></span><br><span class="line">-- 删除索引</span><br><span class="line">drop index idx_user_email on tb_user;</span><br></pre></td></tr></table></figure><h3 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h3><h4 id="最左前缀法则"><a href="#最左前缀法则" class="headerlink" title="最左前缀法则"></a>最左前缀法则</h4><p>如果索引关联了多列（联合索引），要遵守最左前缀法则，最左前缀法则指的是查询从索引的最左列开始，并且不跳过索引中的列。<br>如果跳跃某一列，索引将部分失效（后面的字段索引失效）。</p><p>联合索引中，出现范围查询（&lt;, &gt;），范围查询右侧的列索引失效。可以用&gt;=或者&lt;=来规避索引失效问题。</p><h4 id="索引失效情况"><a href="#索引失效情况" class="headerlink" title="索引失效情况"></a>索引失效情况</h4><ol><li>在索引列上进行运算操作，索引将失效。如：<code>explain select * from tb_user where substring(phone, 10, 2) = &#39;15&#39;;</code></li><li>字符串类型字段使用时，不加引号，索引将失效。如：<code>explain select * from tb_user where phone = 17799990015;</code>，此处phone的值没有加引号</li><li>模糊查询中，如果仅仅是尾部模糊匹配，索引不会是失效；如果是头部模糊匹配，索引失效。如：<code>explain select * from tb_user where profession like &#39;%工程&#39;;</code>，前后都有 % 也会失效。</li><li>用 or 分割开的条件，如果 or 其中一个条件的列没有索引，那么涉及的索引都不会被用到。</li><li>如果 MySQL 评估使用索引比全表更慢，则不使用索引。</li></ol><h4 id="SQL-提示"><a href="#SQL-提示" class="headerlink" title="SQL 提示"></a>SQL 提示</h4><p>是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的。</p><p>例如，使用索引：<br><code>explain select * from tb_user use index(idx_user_pro) where profession=&quot;软件工程&quot;;</code><br>不使用哪个索引：<br><code>explain select * from tb_user ignore index(idx_user_pro) where profession=&quot;软件工程&quot;;</code><br>必须使用哪个索引：<br><code>explain select * from tb_user force index(idx_user_pro) where profession=&quot;软件工程&quot;;</code></p><p>use 是建议，实际使用哪个索引 MySQL 还会自己权衡运行速度去更改，force就是无论如何都强制使用该索引。</p><h4 id="覆盖索引-amp-回表查询"><a href="#覆盖索引-amp-回表查询" class="headerlink" title="覆盖索引&amp;回表查询"></a>覆盖索引&amp;回表查询</h4><p>尽量使用覆盖索引（查询使用了索引，并且需要返回的列，在该索引中已经全部能找到），减少 select *。</p><p>explain 中 extra 字段含义：<br><code>using index condition</code>：查找使用了索引，但是需要回表查询数据<br><code>using where; using index;</code>：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询</p><p>如果在聚集索引中直接能找到对应的行，则直接返回行数据，只需要一次查询，哪怕是select *；如果在辅助索引中找聚集索引，如<code>select id, name from xxx where name=&#39;xxx&#39;;</code>，也只需要通过辅助索引(name)查找到对应的id，返回name和name索引对应的id即可，只需要一次查询；如果是通过辅助索引查找其他字段，则需要回表查询，如<code>select id, name, gender from xxx where name=&#39;xxx&#39;;</code></p><p>所以尽量不要用<code>select *</code>，容易出现回表查询，降低效率，除非有联合索引包含了所有字段</p><p>面试题：一张表，有四个字段（id, username, password, status），由于数据量大，需要对以下SQL语句进行优化，该如何进行才是最优方案：<br><code>select id, username, password from tb_user where username=&#39;itcast&#39;;</code></p><p>解：给username和password字段建立联合索引，则不需要回表查询，直接覆盖索引</p><h4 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h4><p>当字段类型为字符串（varchar, text等）时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘IO，影响查询效率，此时可以只降字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率。</p><p>语法：<code>create index idx_xxxx on table_name(columnn(n));</code><br>前缀长度：可以根据索引的选择性来决定，而选择性是指不重复的索引值（基数）和数据表的记录总数的比值，索引选择性越高则查询效率越高，唯一索引的选择性是1，这是最好的索引选择性，性能也是最好的。<br>求选择性公式：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select count(distinct email) / count(*) from tb_user;</span><br><span class="line">select count(distinct substring(email, 1, 5)) / count(*) from tb_user;</span><br></pre></td></tr></table></figure></p><p>show index 里面的sub_part可以看到接取的长度</p><h4 id="单列索引-amp-联合索引"><a href="#单列索引-amp-联合索引" class="headerlink" title="单列索引&amp;联合索引"></a>单列索引&amp;联合索引</h4><p>单列索引：即一个索引只包含单个列<br>联合索引：即一个索引包含了多个列<br>在业务场景中，如果存在多个查询条件，考虑针对于查询字段建立索引时，建议建立联合索引，而非单列索引。</p><p>单列索引情况：<br><code>explain select id, phone, name from tb_user where phone = &#39;17799990010&#39; and name = &#39;韩信&#39;;</code><br>这句只会用到phone索引字段</p><h5 id="注意事项-8"><a href="#注意事项-8" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>多条件联合查询时，MySQL优化器会评估哪个字段的索引效率更高，会选择该索引完成本次查询</li></ul><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><ol><li>针对于数据量较大，且查询比较频繁的表建立索引</li><li>针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引</li><li>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高</li><li>如果是字符串类型的字段，字段长度较长，可以针对于字段的特点，建立前缀索引</li><li>尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率</li><li>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价就越大，会影响增删改的效率</li><li>如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询</li></ol><h2 id="SQL-优化"><a href="#SQL-优化" class="headerlink" title="SQL 优化"></a>SQL 优化</h2><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p>普通插入：</p><ol><li>采用批量插入（一次插入的数据不建议超过1000条）</li><li>手动提交事务</li><li>主键顺序插入</li></ol><p>大批量插入：<br>如果一次性需要插入大批量数据，使用insert语句插入性能较低，此时可以使用MySQL数据库提供的load指令插入。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 客户端连接服务端时，加上参数 --local-infile（这一行在bash/cmd界面输入）</span><br><span class="line">mysql --local-infile -u root -p</span><br><span class="line"># 设置全局参数local_infile为1，开启从本地加载文件导入数据的开关</span><br><span class="line">set global local_infile = 1;</span><br><span class="line">select @@local_infile;</span><br><span class="line"># 执行load指令将准备好的数据，加载到表结构中</span><br><span class="line">load data local infile &#x27;/root/sql1.log&#x27; into table &#x27;tb_user&#x27; fields terminated by &#x27;,&#x27; lines terminated by &#x27;\n&#x27;;</span><br></pre></td></tr></table></figure><h3 id="主键优化"><a href="#主键优化" class="headerlink" title="主键优化"></a>主键优化</h3><p>数据组织方式：在InnoDB存储引擎中，表数据都是根据主键顺序组织存放的，这种存储方式的表称为索引组织表（Index organized table, IOT）</p><p>页分裂：页可以为空，也可以填充一般，也可以填充100%，每个页包含了2-N行数据（如果一行数据过大，会行溢出），根据主键排列。<br>页合并：当删除一行记录时，实际上记录并没有被物理删除，只是记录被标记（flaged）为删除并且它的空间变得允许被其他记录声明使用。当页中删除的记录到达 MERGE_THRESHOLD（默认为页的50%），InnoDB会开始寻找最靠近的页（前后）看看是否可以将这两个页合并以优化空间使用。</p><p>MERGE_THRESHOLD：合并页的阈值，可以自己设置，在创建表或创建索引时指定</p><blockquote><p>文字说明不够清晰明了，具体可以看视频里的PPT演示过程：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=90">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=90</a></p></blockquote><p>主键设计原则：</p><ul><li>满足业务需求的情况下，尽量降低主键的长度</li><li>插入数据时，尽量选择顺序插入，选择使用 AUTO_INCREMENT 自增主键</li><li>尽量不要使用 UUID 做主键或者是其他的自然主键，如身份证号</li><li>业务操作时，避免对主键的修改</li></ul><h3 id="order-by优化"><a href="#order-by优化" class="headerlink" title="order by优化"></a>order by优化</h3><ol><li>Using filesort：通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区 sort buffer 中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序</li><li>Using index：通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高</li></ol><p>如果order by字段全部使用升序排序或者降序排序，则都会走索引，但是如果一个字段升序排序，另一个字段降序排序，则不会走索引，explain的extra信息显示的是<code>Using index, Using filesort</code>，如果要优化掉Using filesort，则需要另外再创建一个索引，如：<code>create index idx_user_age_phone_ad on tb_user(age asc, phone desc);</code>，此时使用<code>select id, age, phone from tb_user order by age asc, phone desc;</code>会全部走索引</p><p>总结：</p><ul><li>根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则</li><li>尽量使用覆盖索引</li><li>多字段排序，一个升序一个降序，此时需要注意联合索引在创建时的规则（ASC/DESC）</li><li>如果不可避免出现filesort，大数据量排序时，可以适当增大排序缓冲区大小 sort_buffer_size（默认256k）</li></ul><h3 id="group-by优化"><a href="#group-by优化" class="headerlink" title="group by优化"></a>group by优化</h3><ul><li>在分组操作时，可以通过索引来提高效率</li><li>分组操作时，索引的使用也是满足最左前缀法则的</li></ul><p>如索引为<code>idx_user_pro_age_stat</code>，则句式可以是<code>select ... where profession order by age</code>，这样也符合最左前缀法则</p><h3 id="limit优化"><a href="#limit优化" class="headerlink" title="limit优化"></a>limit优化</h3><p>常见的问题如<code>limit 2000000, 10</code>，此时需要 MySQL 排序前2000000条记录，但仅仅返回2000000 - 2000010的记录，其他记录丢弃，查询排序的代价非常大。<br>优化方案：一般分页查询时，通过创建覆盖索引能够比较好地提高性能，可以通过覆盖索引加子查询形式进行优化</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 此语句耗时很长</span><br><span class="line">select * from tb_sku limit 9000000, 10;</span><br><span class="line">-- 通过覆盖索引加快速度，直接通过主键索引进行排序及查询</span><br><span class="line">select id from tb_sku order by id limit 9000000, 10;</span><br><span class="line">-- 下面的语句是错误的，因为 MySQL 不支持 in 里面使用 limit</span><br><span class="line">-- select * from tb_sku where id in (select id from tb_sku order by id limit 9000000, 10);</span><br><span class="line">-- 通过连表查询即可实现第一句的效果，并且能达到第二句的速度</span><br><span class="line">select * from tb_sku as s, (select id from tb_sku order by id limit 9000000, 10) as a where s.id = a.id;</span><br></pre></td></tr></table></figure><h3 id="count优化"><a href="#count优化" class="headerlink" title="count优化"></a>count优化</h3><p>MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count(*) 的时候会直接返回这个数，效率很高（前提是不适用where）；<br>InnoDB 在执行 count(*) 时，需要把数据一行一行地从引擎里面读出来，然后累计计数。<br>优化方案：自己计数，如创建key-value表存储在内存或硬盘，或者是用redis</p><p>count的几种用法：</p><ul><li>如果count函数的参数（count里面写的那个字段）不是NULL（字段值不为NULL），累计值就加一，最后返回累计值</li><li>用法：count(*)、count(主键)、count(字段)、count(1)</li><li>count(主键)跟count(*)一样，因为主键不能为空；count(字段)只计算字段值不为NULL的行；count(1)引擎会为每行添加一个1，然后就count这个1，返回结果也跟count(*)一样；count(null)返回0</li></ul><p>各种用法的性能：</p><ul><li>count(主键)：InnoDB引擎会遍历整张表，把每行的主键id值都取出来，返回给服务层，服务层拿到主键后，直接按行进行累加（主键不可能为空）</li><li>count(字段)：没有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，服务层判断是否为null，不为null，计数累加；有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，直接按行进行累加</li><li>count(1)：InnoDB 引擎遍历整张表，但不取值。服务层对于返回的每一层，放一个数字 1 进去，直接按行进行累加</li><li>count(*)：InnoDB 引擎并不会把全部字段取出来，而是专门做了优化，不取值，服务层直接按行进行累加</li></ul><p>按效率排序：count(字段) &lt; count(主键) &lt; count(1) &lt; count(*)，所以尽量使用 count(*)</p><h3 id="update优化（避免行锁升级为表锁）"><a href="#update优化（避免行锁升级为表锁）" class="headerlink" title="update优化（避免行锁升级为表锁）"></a>update优化（避免行锁升级为表锁）</h3><p>InnoDB 的行锁是针对索引加的锁，不是针对记录加的锁，并且该索引不能失效，否则会从行锁升级为表锁。</p><p>如以下两条语句：<br><code>update student set no = &#39;123&#39; where id = 1;</code>，这句由于id有主键索引，所以只会锁这一行；<br><code>update student set no = &#39;123&#39; where name = &#39;test&#39;;</code>，这句由于name没有索引，所以会把整张表都锁住进行数据更新，解决方法是给name字段添加索引</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><div class="table-container"><table><thead><tr><th>类型名称</th><th>取值范围</th><th>大小</th></tr></thead><tbody><tr><td>TINYINT</td><td>-128〜127</td><td>1个字节</td></tr><tr><td>SMALLINT</td><td>-32768〜32767</td><td>2个宇节</td></tr><tr><td>MEDIUMINT</td><td>-8388608〜8388607</td><td>3个字节</td></tr><tr><td>INT (INTEGHR)</td><td>-2147483648〜2147483647</td><td>4个字节</td></tr><tr><td>BIGINT</td><td>-9223372036854775808〜9223372036854775807</td><td>8个字节</td></tr></tbody></table></div><p>无符号在数据类型后加 unsigned 关键字。</p><h2 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h2><div class="table-container"><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td>FLOAT</td><td>单精度浮点数</td><td>4 个字节</td></tr><tr><td>DOUBLE</td><td>双精度浮点数</td><td>8 个字节</td></tr><tr><td>DECIMAL (M, D)，DEC</td><td>压缩的“严格”定点数</td><td>M+2 个字节</td></tr></tbody></table></div><h2 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h2><div class="table-container"><table><thead><tr><th>类型名称</th><th>日期格式</th><th>日期范围</th><th>存储需求</th></tr></thead><tbody><tr><td>YEAR</td><td>YYYY</td><td>1901 ~ 2155</td><td>1 个字节</td></tr><tr><td>TIME</td><td>HH:MM:SS</td><td>-838:59:59 ~ 838:59:59</td><td>3 个字节</td></tr><tr><td>DATE</td><td>YYYY-MM-DD</td><td>1000-01-01 ~ 9999-12-3</td><td>3 个字节</td></tr><tr><td>DATETIME</td><td>YYYY-MM-DD HH:MM:SS</td><td>1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</td><td>8 个字节</td></tr><tr><td>TIMESTAMP</td><td>YYYY-MM-DD HH:MM:SS</td><td>1980-01-01 00:00:01 UTC ~ 2040-01-19 03:14:07 UTC</td><td>4 个字节</td></tr></tbody></table></div><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><div class="table-container"><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td>CHAR(M)</td><td>固定长度非二进制字符串</td><td>M 字节，1&lt;=M&lt;=255</td></tr><tr><td>VARCHAR(M)</td><td>变长非二进制字符串</td><td>L+1字节，在此，L&lt; = M和 1&lt;=M&lt;=255</td></tr><tr><td>TINYTEXT</td><td>非常小的非二进制字符串</td><td>L+1字节，在此，L&lt;2^8</td></tr><tr><td>TEXT</td><td>小的非二进制字符串</td><td>L+2字节，在此，L&lt;2^16</td></tr><tr><td>MEDIUMTEXT</td><td>中等大小的非二进制字符串</td><td>L+3字节，在此，L&lt;2^24</td></tr><tr><td>LONGTEXT</td><td>大的非二进制字符串</td><td>L+4字节，在此，L&lt;2^32</td></tr><tr><td>ENUM</td><td>枚举类型，只能有一个枚举字符串值</td><td>1或2个字节，取决于枚举值的数目 (最大值为65535)</td></tr><tr><td>SET</td><td>一个设置，字符串对象可以有零个或 多个SET成员</td><td>1、2、3、4或8个字节，取决于集合 成员的数量（最多64个成员）</td></tr></tbody></table></div><h2 id="二进制类型"><a href="#二进制类型" class="headerlink" title="二进制类型"></a>二进制类型</h2><div class="table-container"><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td>BIT(M)</td><td>位字段类型</td><td>大约 (M+7)/8 字节</td></tr><tr><td>BINARY(M)</td><td>固定长度二进制字符串</td><td>M 字节</td></tr><tr><td>VARBINARY (M)</td><td>可变长度二进制字符串</td><td>M+1 字节</td></tr><tr><td>TINYBLOB (M)</td><td>非常小的BLOB</td><td>L+1 字节，在此，L&lt;2^8</td></tr><tr><td>BLOB (M)</td><td>小 BLOB</td><td>L+2 字节，在此，L&lt;2^16</td></tr><tr><td>MEDIUMBLOB (M)</td><td>中等大小的BLOB</td><td>L+3 字节，在此，L&lt;2^24</td></tr><tr><td>LONGBLOB (M)</td><td>非常大的BLOB</td><td>L+4 字节，在此，L&lt;2^32</td></tr></tbody></table></div><h1 id="权限一览表"><a href="#权限一览表" class="headerlink" title="权限一览表"></a>权限一览表</h1><blockquote><p>具体权限的作用详见<a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html" title="官方文档">官方文档</a></p></blockquote><p>GRANT 和 REVOKE 允许的静态权限</p><div class="table-container"><table><thead><tr><th style="text-align:left">Privilege</th><th style="text-align:left">Grant Table Column</th><th style="text-align:left">Context</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_all"><code>ALL [PRIVILEGES]</code></a></td><td style="text-align:left">Synonym for “all privileges”</td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter"><code>ALTER</code></a></td><td style="text-align:left"><code>Alter_priv</code></td><td style="text-align:left">Tables</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter-routine"><code>ALTER ROUTINE</code></a></td><td style="text-align:left"><code>Alter_routine_priv</code></td><td style="text-align:left">Stored routines</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create"><code>CREATE</code></a></td><td style="text-align:left"><code>Create_priv</code></td><td style="text-align:left">Databases, tables, or indexes</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-role"><code>CREATE ROLE</code></a></td><td style="text-align:left"><code>Create_role_priv</code></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-routine"><code>CREATE ROUTINE</code></a></td><td style="text-align:left"><code>Create_routine_priv</code></td><td style="text-align:left">Stored routines</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-tablespace"><code>CREATE TABLESPACE</code></a></td><td style="text-align:left"><code>Create_tablespace_priv</code></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-temporary-tables"><code>CREATE TEMPORARY TABLES</code></a></td><td style="text-align:left"><code>Create_tmp_table_priv</code></td><td style="text-align:left">Tables</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-user"><code>CREATE USER</code></a></td><td style="text-align:left"><code>Create_user_priv</code></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-view"><code>CREATE VIEW</code></a></td><td style="text-align:left"><code>Create_view_priv</code></td><td style="text-align:left">Views</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_delete"><code>DELETE</code></a></td><td style="text-align:left"><code>Delete_priv</code></td><td style="text-align:left">Tables</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop"><code>DROP</code></a></td><td style="text-align:left"><code>Drop_priv</code></td><td style="text-align:left">Databases, tables, or views</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop-role"><code>DROP ROLE</code></a></td><td style="text-align:left"><code>Drop_role_priv</code></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_event"><code>EVENT</code></a></td><td style="text-align:left"><code>Event_priv</code></td><td style="text-align:left">Databases</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_execute"><code>EXECUTE</code></a></td><td style="text-align:left"><code>Execute_priv</code></td><td style="text-align:left">Stored routines</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_file"><code>FILE</code></a></td><td style="text-align:left"><code>File_priv</code></td><td style="text-align:left">File access on server host</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_grant-option"><code>GRANT OPTION</code></a></td><td style="text-align:left"><code>Grant_priv</code></td><td style="text-align:left">Databases, tables, or stored routines</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_index"><code>INDEX</code></a></td><td style="text-align:left"><code>Index_priv</code></td><td style="text-align:left">Tables</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_insert"><code>INSERT</code></a></td><td style="text-align:left"><code>Insert_priv</code></td><td style="text-align:left">Tables or columns</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_lock-tables"><code>LOCK TABLES</code></a></td><td style="text-align:left"><code>Lock_tables_priv</code></td><td style="text-align:left">Databases</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_process"><code>PROCESS</code></a></td><td style="text-align:left"><code>Process_priv</code></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_proxy"><code>PROXY</code></a></td><td style="text-align:left">See <code>proxies_priv</code> table</td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_references"><code>REFERENCES</code></a></td><td style="text-align:left"><code>References_priv</code></td><td style="text-align:left">Databases or tables</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_reload"><code>RELOAD</code></a></td><td style="text-align:left"><code>Reload_priv</code></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-client"><code>REPLICATION CLIENT</code></a></td><td style="text-align:left"><code>Repl_client_priv</code></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave"><code>REPLICATION SLAVE</code></a></td><td style="text-align:left"><code>Repl_slave_priv</code></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_select"><code>SELECT</code></a></td><td style="text-align:left"><code>Select_priv</code></td><td style="text-align:left">Tables or columns</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-databases"><code>SHOW DATABASES</code></a></td><td style="text-align:left"><code>Show_db_priv</code></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-view"><code>SHOW VIEW</code></a></td><td style="text-align:left"><code>Show_view_priv</code></td><td style="text-align:left">Views</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_shutdown"><code>SHUTDOWN</code></a></td><td style="text-align:left"><code>Shutdown_priv</code></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_super"><code>SUPER</code></a></td><td style="text-align:left"><code>Super_priv</code></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_trigger"><code>TRIGGER</code></a></td><td style="text-align:left"><code>Trigger_priv</code></td><td style="text-align:left">Tables</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_update"><code>UPDATE</code></a></td><td style="text-align:left"><code>Update_priv</code></td><td style="text-align:left">Tables or columns</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_usage"><code>USAGE</code></a></td><td style="text-align:left">Synonym for “no privileges”</td><td style="text-align:left">Server administration</td></tr></tbody></table></div><p>GRANT 和 REVOKE 允许的动态权限</p><div class="table-container"><table><thead><tr><th style="text-align:left">Privilege</th><th style="text-align:left">Context</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_application-password-admin"><code>APPLICATION_PASSWORD_ADMIN</code></a></td><td style="text-align:left">Dual password administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-abort-exempt"><code>AUDIT_ABORT_EXEMPT</code></a></td><td style="text-align:left">Allow queries blocked by audit log filter</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-admin"><code>AUDIT_ADMIN</code></a></td><td style="text-align:left">Audit log administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_authentication-policy-admin"><code>AUTHENTICATION_POLICY_ADMIN</code></a></td><td style="text-align:left">Authentication administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_backup-admin"><code>BACKUP_ADMIN</code></a></td><td style="text-align:left">Backup administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-admin"><code>BINLOG_ADMIN</code></a></td><td style="text-align:left">Backup and Replication administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-encryption-admin"><code>BINLOG_ENCRYPTION_ADMIN</code></a></td><td style="text-align:left">Backup and Replication administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_clone-admin"><code>CLONE_ADMIN</code></a></td><td style="text-align:left">Clone administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_connection-admin"><code>CONNECTION_ADMIN</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_encryption-key-admin"><code>ENCRYPTION_KEY_ADMIN</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-admin"><code>FIREWALL_ADMIN</code></a></td><td style="text-align:left">Firewall administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-exempt"><code>FIREWALL_EXEMPT</code></a></td><td style="text-align:left">Firewall administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-user"><code>FIREWALL_USER</code></a></td><td style="text-align:left">Firewall administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-optimizer-costs"><code>FLUSH_OPTIMIZER_COSTS</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-status"><code>FLUSH_STATUS</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-tables"><code>FLUSH_TABLES</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-user-resources"><code>FLUSH_USER_RESOURCES</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-admin"><code>GROUP_REPLICATION_ADMIN</code></a></td><td style="text-align:left">Replication administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-stream"><code>GROUP_REPLICATION_STREAM</code></a></td><td style="text-align:left">Replication administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_innodb-redo-log-archive"><code>INNODB_REDO_LOG_ARCHIVE</code></a></td><td style="text-align:left">Redo log archiving administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_ndb-stored-user"><code>NDB_STORED_USER</code></a></td><td style="text-align:left">NDB Cluster</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_passwordless-user-admin"><code>PASSWORDLESS_USER_ADMIN</code></a></td><td style="text-align:left">Authentication administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_persist-ro-variables-admin"><code>PERSIST_RO_VARIABLES_ADMIN</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-applier"><code>REPLICATION_APPLIER</code></a></td><td style="text-align:left"><code>PRIVILEGE_CHECKS_USER</code> for a replication channel</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave-admin"><code>REPLICATION_SLAVE_ADMIN</code></a></td><td style="text-align:left">Replication administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-admin"><code>RESOURCE_GROUP_ADMIN</code></a></td><td style="text-align:left">Resource group administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-user"><code>RESOURCE_GROUP_USER</code></a></td><td style="text-align:left">Resource group administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_role-admin"><code>ROLE_ADMIN</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_session-variables-admin"><code>SESSION_VARIABLES_ADMIN</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_set-user-id"><code>SET_USER_ID</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-routine"><code>SHOW_ROUTINE</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-user"><code>SYSTEM_USER</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-variables-admin"><code>SYSTEM_VARIABLES_ADMIN</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_table-encryption-admin"><code>TABLE_ENCRYPTION_ADMIN</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_version-token-admin"><code>VERSION_TOKEN_ADMIN</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_xa-recover-admin"><code>XA_RECOVER_ADMIN</code></a></td><td style="text-align:left">Server administration</td></tr></tbody></table></div><h1 id="图形化界面工具"><a href="#图形化界面工具" class="headerlink" title="图形化界面工具"></a>图形化界面工具</h1><ul><li>Workbench(免费): <a href="http://dev.mysql.com/downloads/workbench/">http://dev.mysql.com/downloads/workbench/</a></li><li>navicat(收费，试用版30天): <a href="https://www.navicat.com/en/download/navicat-for-mysql">https://www.navicat.com/en/download/navicat-for-mysql</a></li><li>Sequel Pro(开源免费，仅支持Mac OS): <a href="http://www.sequelpro.com/">http://www.sequelpro.com/</a></li><li>HeidiSQL(免费): <a href="http://www.heidisql.com/">http://www.heidisql.com/</a></li><li>phpMyAdmin(免费): <a href="https://www.phpmyadmin.net/">https://www.phpmyadmin.net/</a></li><li>SQLyog: <a href="https://sqlyog.en.softonic.com/">https://sqlyog.en.softonic.com/</a></li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h1><ol><li>在SQL语句之后加上<code>\G</code>会将结果的表格形式转换成行文本形式</li><li>查看Mysql数据库占用空间：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT table_schema &quot;Database Name&quot;</span><br><span class="line">     , SUM(data_length + index_length) / (1024 * 1024) &quot;Database Size in MB&quot;</span><br><span class="line">FROM information_schema.TABLES</span><br><span class="line">GROUP BY table_schema;</span><br></pre></td></tr></table></figure></li></ol><h1 id="后续内容"><a href="#后续内容" class="headerlink" title="后续内容"></a>后续内容</h1><p>后续内容因为跟当前学习、工作计划有冲突，所以后续课程的学习计划会无限期推后。<br>目前的工作重点放在重做一个学习笔记网站，当然这是边做边学的，开发过程中遇到的难点和知识点我也会记录下来供大家学习。<br><strong>在此感谢B站同样爱学习的同学 @守心-人 提供的后续课程笔记，大家有条件一定要去给个star，你的每一个star和点赞都是我们前进的动力</strong><br><strong><a href="https://github.com/Buildings-Lei/mysql_note/blob/main/README.md">https://github.com/Buildings-Lei/mysql_note/blob/main/README.md</a></strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础篇&quot;&gt;&lt;a href=&quot;#基础篇&quot; class=&quot;headerlink&quot; title=&quot;基础篇&quot;&gt;&lt;/a&gt;基础篇&lt;/h1&gt;&lt;h2 id=&quot;通用语法及分类&quot;&gt;&lt;a href=&quot;#通用语法及分类&quot; class=&quot;headerlink&quot; title=&quot;通用语法及分类</summary>
      
    
    
    
    <category term="笔记" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Ajax</title>
    <link href="http://example.com/2022/07/07/Ajax/"/>
    <id>http://example.com/2022/07/07/Ajax/</id>
    <published>2022-07-06T16:00:00.000Z</published>
    <updated>2022-12-15T13:25:40.537Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ajax概述"><a href="#Ajax概述" class="headerlink" title="Ajax概述"></a>Ajax概述</h1><h2 id="AJAX-简介"><a href="#AJAX-简介" class="headerlink" title="AJAX 简介"></a>AJAX 简介</h2><div class="tip info"><p>AJAX 全称为Asynchronous JavaScript And XML，就是异步的JS 和XML<br>通过AJAX 可以在浏览器中向服务器发送异步请求，最大的优势：无刷新获取数据<br>AJAX 不是新的编程语言，而是一种将现有的标准组合在一起使用的新方式</p></div><h2 id="XML-简介"><a href="#XML-简介" class="headerlink" title="XML 简介"></a>XML 简介</h2><div class="tip info"><p>XML 可扩展标记语言。<br>XML 被设计用来传输和存储数据。<br>XML 和HTML 类似，不同的是HTML 中都是预定义标签，而XML 中没有预定义标签，<br>全都是自定义标签，用来表示一些数据。</p></div><p>比如说我有一个学生数据：<br>name = “孙悟空” ; age = 18 ; gender = “男” ;<br>用XML 表示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;student&gt;</span><br><span class="line">&lt;name&gt;孙悟空&lt;/name&gt;</span><br><span class="line">&lt;age&gt;18&lt;/age&gt;</span><br><span class="line">&lt;gender&gt;男&lt;/gender&gt;</span><br><span class="line">&lt;/student&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现在已经被<span class='p red'>JSON</span> 取代了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;name&quot;:&quot;孙悟空&quot;,&quot;age&quot;:18,&quot;gender&quot;:&quot;男&quot;&#125;</span><br></pre></td></tr></table></figure><h2 id="AJAX-的特点"><a href="#AJAX-的特点" class="headerlink" title="AJAX 的特点"></a>AJAX 的特点</h2><details class="folding-tag" green open><summary> 优点 </summary>              <div class='content'>              <p>可以无需刷新页面而与服务器端进行通信<br>允许你根据用户事件来更新部分页面内容</p>              </div>            </details><details class="folding-tag" green open><summary> 缺点 </summary>              <div class='content'>              <p>没有浏览历史，不能回退<br>存在跨域问题(同源)<br>SEO 不友好</p>              </div>            </details><h1 id="HTTP相关问题"><a href="#HTTP相关问题" class="headerlink" title="HTTP相关问题"></a>HTTP相关问题</h1><h2 id="MDN-文档"><a href="#MDN-文档" class="headerlink" title="MDN 文档"></a>MDN 文档</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Overview">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Overview</a></p><h2 id="HTTP-请求交互的基本过程"><a href="#HTTP-请求交互的基本过程" class="headerlink" title="HTTP 请求交互的基本过程"></a>HTTP 请求交互的基本过程</h2><div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/ajax/1.png"/></div></div><ol><li>前后应用从浏览器端向服务器发送HTTP 请求(请求报文)</li><li>后台服务器接收到请求后, 调度服务器应用处理请求, 向浏览器端返回HTTP响应(响应报文)</li><li>浏览器端接收到响应, 解析显示响应体/调用监视回调</li></ol><h2 id="HTTP-请求报文"><a href="#HTTP-请求报文" class="headerlink" title="HTTP 请求报文"></a>HTTP 请求报文</h2><ol><li><p>请求行<br>method url<br>GET /product_detail?id=2<br>POST /login</p></li><li><p>多个请求头<br>Host: www.baidu.com<br>Cookie: BAIDUID=AD3B0FA706E; BIDUPSID=AD3B0FA706;<br>Content-Type: application/x-www-form-urlencoded 或者application/json</p></li><li><p>空行</p></li><li><p>请求体<br>username=tom&amp;pwd=123<br>{“username”: “tom”, “pwd”: 123}</p></li></ol><h2 id="HTTP-响应报文"><a href="#HTTP-响应报文" class="headerlink" title="HTTP 响应报文"></a>HTTP 响应报文</h2><ol><li><p>响应状态行<br>status statusText</p></li><li><p>多个响应头<br>Content-Type: text/html;charset=utf-8<br>Set-Cookie: BD_CK_SAM=1;path=/</p></li><li><p>空行</p></li><li><p>响应体<br>html 文本/json 文本/js/css/图片…</p></li></ol><h2 id="post-请求体参数格式"><a href="#post-请求体参数格式" class="headerlink" title="post 请求体参数格式"></a>post 请求体参数格式</h2><ol><li><p>Content-Type: application/x-www-form-urlencoded;charset=utf-8<br>用于键值对参数，参数的键值用=连接, 参数之间用&amp;连接</p></li><li><p>例如: name=%E5%B0%8F%E6%98%8E&amp;age=12<br>Content-Type: application/json;charset=utf-8<br>用于 json 字符串参数</p></li><li><p>例如: {“name”: “%E5%B0%8F%E6%98%8E”, “age”: 12}<br>Content-Type: multipart/form-data<br>用于文件上传请求</p></li></ol><h2 id="常见的响应状态码"><a href="#常见的响应状态码" class="headerlink" title="常见的响应状态码"></a>常见的响应状态码</h2><ol><li>200 OK 请求成功。一般用于GET 与POST 请求</li><li>201 Created 已创建。成功请求并创建了新的资源</li><li>401 Unauthorized 未授权/请求要求用户的身份认证</li><li>404 Not Found 服务器无法根据客户端的请求找到资源</li><li>500 Internal Server Error 服务器内部错误，无法完成请求</li></ol><h2 id="不同类型的请求及其作用"><a href="#不同类型的请求及其作用" class="headerlink" title="不同类型的请求及其作用"></a>不同类型的请求及其作用</h2><ol><li>GET: 从服务器端读取数据（查）</li><li>POST: 向服务器端添加新数据 （增）</li><li>PUT: 更新服务器端已经数据 （改）</li><li>DELETE: 删除服务器端数据 （删）</li></ol><h2 id="API-的分类"><a href="#API-的分类" class="headerlink" title="API 的分类"></a>API 的分类</h2><ol><li>REST API: restful （Representational State Transfer (资源)表现层状态转化）<br>(1) 发送请求进行CRUD 哪个操作由请求方式来决定<br>(2) 同一个请求路径可以进行多个操作<br>(3) 请求方式会用到GET/POST/PUT/DELETE</li><li>非REST API: restless<br>(1) 请求方式不决定请求的CRUD 操作<br>(2) 一个请求路径只对应一个操作<br>(3) 一般只有GET/POST</li></ol><h2 id="区别-一般http请求-与-ajax请求"><a href="#区别-一般http请求-与-ajax请求" class="headerlink" title="区别 一般http请求 与 ajax请求"></a>区别 一般http请求 与 ajax请求</h2><p>ajax请求 是一种特别的 http请求<br>对服务器端来说, 没有任何区别, 区别在浏览器端<br>浏览器端发请求: 只有XHR 或fetch 发出的才是ajax 请求, 其它所有的都是非ajax 请求<br>浏览器端接收到响应<br>(1) 一般请求: 浏览器一般会直接显示响应体数据, 也就是我们常说的刷新/跳转页面<br>(2) ajax请求: 浏览器不会对界面进行任何更新操作, 只是调用监视的回调函数并传入响应相关数据</p><h1 id="原生AJAX-的基本使用-XHR"><a href="#原生AJAX-的基本使用-XHR" class="headerlink" title="原生AJAX 的基本使用 XHR"></a>原生AJAX 的基本使用 XHR</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><p><a href="http://nodejs.cn/">http://nodejs.cn/</a></p><h3 id="安装express（服务端框架）"><a href="#安装express（服务端框架）" class="headerlink" title="安装express（服务端框架）"></a>安装express（服务端框架）</h3><p><a href="https://www.expressjs.com.cn/">https://www.expressjs.com.cn/</a></p><ol><li><p>初始化环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init --yes</span><br></pre></td></tr></table></figure></li><li><p>下载express包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install express --save</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>编写js代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 1. 引入express</span><br><span class="line">const express = require(&#x27;express&#x27;);</span><br><span class="line"></span><br><span class="line">// 2. 创建应用对象</span><br><span class="line">const app = express();</span><br><span class="line"></span><br><span class="line">// 3. 创建路由规则</span><br><span class="line">// request 是对请求报文的封装</span><br><span class="line">// response 是对响应报文的封装</span><br><span class="line">app.get(&#x27;/&#x27;, (request, response) =&gt; &#123;</span><br><span class="line">  //  设置响应</span><br><span class="line">  response.send(&quot;Hello Express&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 4. 监听端口，启动服务</span><br><span class="line">app.listen(8000, () =&gt; &#123;</span><br><span class="line">  console.log(&quot;服务已经启动, 8000 端口监听中...&quot;);</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure></li><li><p>运行js程序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node .\01express使用.js</span><br></pre></td></tr></table></figure></li><li><p>打开网页显示页面</p><div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/ajax/2.png"/></div></div></li><li><p>调试程序可以查看请求和响应</p><div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/ajax/3.png"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/ajax/4.png"/></div></div></li></ol><h2 id="发送ajax-请求"><a href="#发送ajax-请求" class="headerlink" title="发送ajax 请求"></a>发送ajax 请求</h2><div class="tip info"><p>使用XMLHttpRequest (XHR)对象可以与服务器交互, 也就是发送ajax 请求<br>前端可以获取到数据，而无需让整个的页面刷新。<br>这使得Web 页面可以只更新页面的局部，而不影响用户的操作。</p></div><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest">https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest</a><br>XMLHttpRequest，AJAX 的所有操作都是通过该对象进行的</p><h2 id="核心对象使用步骤"><a href="#核心对象使用步骤" class="headerlink" title="核心对象使用步骤"></a>核心对象使用步骤</h2><h3 id="创建XMLHttpRequest-对象"><a href="#创建XMLHttpRequest-对象" class="headerlink" title="创建XMLHttpRequest 对象"></a>创建XMLHttpRequest 对象</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var xhr = new XMLHttpRequest();</span><br></pre></td></tr></table></figure><h3 id="设置请求信息（请求方法和url）"><a href="#设置请求信息（请求方法和url）" class="headerlink" title="设置请求信息（请求方法和url）"></a>设置请求信息（请求方法和url）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 请求方式</span><br><span class="line">xhr.open(method, url);</span><br><span class="line">//可以设置请求头，一般不设置</span><br><span class="line">xhr.setRequestHeader(&#x27;Content-Type&#x27;, &#x27;application/x-www-form-urlencoded&#x27;);</span><br></pre></td></tr></table></figure><h3 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.send(body) //get请求不传 body 参数，只有post请求使用</span><br></pre></td></tr></table></figure><h3 id="接收响应（事件绑定，处理服务端返回的结果）"><a href="#接收响应（事件绑定，处理服务端返回的结果）" class="headerlink" title="接收响应（事件绑定，处理服务端返回的结果）"></a>接收响应（事件绑定，处理服务端返回的结果）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//xhr.responseXML 接收 xml格式 的响应数据</span><br><span class="line">//xhr.responseText 接收 文本格式 的响应数据</span><br><span class="line">xhr.onreadystatechange = function ()&#123;</span><br><span class="line">// readyState 是 xhr对象中的属性, 表示状态 0 1 2 3 4</span><br><span class="line">if(xhr.readyState == 4 &amp;&amp; xhr.status == 200)&#123;</span><br><span class="line">var text = xhr.responseText;</span><br><span class="line">console.log(text);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h2><h3 id="GET-请求"><a href="#GET-请求" class="headerlink" title="GET 请求"></a>GET 请求</h3><p>点击返回响应信息<br><div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/ajax/5.gif"/></div></div></p><p>创建两个文件，浏览器端使用的html文件和服务器端使用的js文件</p><p>服务器端 server.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 1. 引入express</span><br><span class="line">const express = require(&#x27;express&#x27;);</span><br><span class="line"></span><br><span class="line">// 2. 创建应用对象</span><br><span class="line">const app = express();</span><br><span class="line"></span><br><span class="line">// 3. 创建路由规则</span><br><span class="line">app.get(&#x27;/server&#x27;, (request, response) =&gt; &#123;</span><br><span class="line">  // 设置响应头 设置允许跨域</span><br><span class="line">  response.setHeader(&#x27;Access-Control-Allow-Origin&#x27;, &#x27;*&#x27;);</span><br><span class="line">  // 设置响应体</span><br><span class="line">  response.send(&quot;Hello Ajax&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 4. 监听服务</span><br><span class="line">app.listen(8000, () =&gt; &#123;</span><br><span class="line">  console.log(&quot;服务已经启动, 8000 端口监听中...&quot;);</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node server.js</span><br></pre></td></tr></table></figure><p>前端页面 html</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Ajax GET 请求&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    #result &#123;</span><br><span class="line">      width: 200px;</span><br><span class="line">      height: 100px;</span><br><span class="line">      border: solid 1px #90b;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;button&gt;点击发送请求&lt;/button&gt;</span><br><span class="line">  &lt;div id=&quot;result&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    //获取button元素</span><br><span class="line">    const btn = document.getElementsByTagName(&#x27;button&#x27;)[0];</span><br><span class="line">    const result = document.getElementById(&#x27;result&#x27;);</span><br><span class="line">    //绑定事件</span><br><span class="line">    btn.onclick = function()&#123;</span><br><span class="line">      // 1. 创建对象 </span><br><span class="line">      const xhr = new XMLHttpRequest();</span><br><span class="line">      // 2. 初始化 设置请求方法和url</span><br><span class="line">      xhr.open(&#x27;GET&#x27;, &#x27;http://127.0.0.1:8000/server&#x27;)</span><br><span class="line">      // 3. 发送</span><br><span class="line">      xhr.send();</span><br><span class="line">      // 4. 事件绑定 处理服务端返回的结果</span><br><span class="line">      xhr.onreadystatechange = function()&#123;</span><br><span class="line">        // readyState 是 xhr 对象中的属性, 表示状态 0 1 2 3 4</span><br><span class="line">        //判断 (服务端返回了所有的结果)</span><br><span class="line">        if(xhr.readyState === 4)&#123;</span><br><span class="line">          //判断响应状态码 200  404  403 401 500</span><br><span class="line">          if(xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300)&#123;</span><br><span class="line">            // 处理结果 行 头 空行 体</span><br><span class="line">            // 响应</span><br><span class="line">            console.log(&#x27;状态码&#x27;, xhr.status); // 状态码</span><br><span class="line">            console.log(&#x27;状态字符串&#x27;, xhr.statusText); // 状态字符串</span><br><span class="line">            console.log(&#x27;所有响应头&#x27;, xhr.getAllResponseHeaders()); // 所有响应头</span><br><span class="line">            console.log(&#x27;响应体&#x27;, xhr.response); // 响应体</span><br><span class="line">            </span><br><span class="line">            //设置 result 的文本</span><br><span class="line">            result.innerHTML=xhr.response;</span><br><span class="line">          &#125;else&#123;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; </span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>GET 请求设置请求参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(&#x27;GET&#x27;, &#x27;http://127.0.0.1:8000/server?a=100&amp;b=200&amp;c=300&#x27;);</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/ajax/6.png"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/ajax/7.png"/></div></div><h3 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h3><p>鼠标放到div中，发post请求，将响应体放在div中呈现</p><p>server.js添加post</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.post(&#x27;/server&#x27;, (request, response) =&gt; &#123;</span><br><span class="line">  // 设置响应头, 设置允许跨域</span><br><span class="line">  response.setHeader(&#x27;Access-Control-Allow-Origin&#x27;, &#x27;*&#x27;);</span><br><span class="line">  // 设置响应体</span><br><span class="line">  response.send(&quot;Hello Ajax POST&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>post.html</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Ajax POST 请求&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    #result &#123;</span><br><span class="line">      width: 200px;</span><br><span class="line">      height: 100px;</span><br><span class="line">      border: solid 1px #903;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;result&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    // 获取元素对象</span><br><span class="line">    const result = document.getElementById(&#x27;result&#x27;);</span><br><span class="line">    // 绑定事件</span><br><span class="line">    result.addEventListener(&quot;mouseover&quot;, function()&#123;</span><br><span class="line">      // 1. 创建对象</span><br><span class="line">      const xhr = new XMLHttpRequest();</span><br><span class="line">      // 2. 初始化 设置类型（请求方式）与url</span><br><span class="line">      xhr.open(&#x27;POST&#x27;, &#x27;http://127.0.0.1:8000/server&#x27;);</span><br><span class="line">      // 3. 发送   设置请求参数（请求体）</span><br><span class="line">      xhr.send(&#x27;a=100&amp;b=200&amp;c=300&#x27;);</span><br><span class="line">      // 4. 事件绑定</span><br><span class="line">      xhr.onreadystatechange = function()&#123;</span><br><span class="line">        // 判断</span><br><span class="line">        if(xhr.readyState === 4)&#123;</span><br><span class="line">          if(xhr.status &gt;=200 &amp;&amp; xhr.status &lt; 300)&#123;</span><br><span class="line">            // 处理服务端返回的结果</span><br><span class="line">            result.innerHTML = xhr.response;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/ajax/8.gif"/></div></div><p>设置请求头信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 设置请求体内容的类型</span><br><span class="line">xhr.setRequesHeader(&#x27;Content-Type&#x27;,&#x27;application/x-www-from-urlencoded&#x27;);</span><br><span class="line">// 自定义头信息</span><br><span class="line">xhr.setRequesHeader(&#x27;name&#x27;, &#x27;ykyk&#x27;);</span><br></pre></td></tr></table></figure><p>server.js中设置响应头允许自定义请求头 post改成all<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setHeader(&#x27;Access-Control-Allow-Header&#x27;,&#x27;*&#x27;);</span><br></pre></td></tr></table></figure></p><h2 id="json数据请求"><a href="#json数据请求" class="headerlink" title="json数据请求"></a>json数据请求</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">app.all(&#x27;/json-server&#x27;, (request, response) =&gt; &#123;</span><br><span class="line">  // 设置响应头, 设置允许跨域</span><br><span class="line">  response.setHeader(&#x27;Access-Control-Allow-Origin&#x27;, &#x27;*&#x27;);</span><br><span class="line">  // 设置响应头, 设置允许自定义头信息</span><br><span class="line">  response.setHeader(&#x27;Access-Control-Allow-Headers&#x27;, &#x27;*&#x27;);</span><br><span class="line">  // 响应一个数据</span><br><span class="line">  const data = &#123;</span><br><span class="line">    name: &#x27;atguigu&#x27;</span><br><span class="line">  &#125;;</span><br><span class="line">  // 对 对象 进行 字符串 转换</span><br><span class="line">  let str = JSON.stringify(data)</span><br><span class="line">  // 设置响应体 </span><br><span class="line">  response.send(str);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;JSON&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    #result &#123;</span><br><span class="line">      width: 200px;</span><br><span class="line">      height: 100px;</span><br><span class="line">      border: solid 1px #89b;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;result&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    const result = document.getElementById(&#x27;result&#x27;);</span><br><span class="line">    // 绑定键盘按下事件</span><br><span class="line">    window.onkeydown = function()&#123;</span><br><span class="line">      // 发送请求</span><br><span class="line">      const xhr = new XMLHttpRequest();</span><br><span class="line">      // *2*.(自动转换) 设置响应体数据的类型(自动转换)</span><br><span class="line">      xhr.responseType = &#x27;json&#x27;;</span><br><span class="line">      // 初始化</span><br><span class="line">      xhr.open(&#x27;GET&#x27;, &#x27;http://127.0.0.1:8000/json-server&#x27;);</span><br><span class="line">      // 发送</span><br><span class="line">      xhr.send();</span><br><span class="line">      // 事件绑定</span><br><span class="line">      xhr.onreadystatechange = function()&#123;</span><br><span class="line">        if(xhr.readyState === 4)&#123;</span><br><span class="line">          if(xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300)&#123;</span><br><span class="line">            console.log(xhr.response);</span><br><span class="line">            // 1. 手动对数据转化 (字符串再转换成json)</span><br><span class="line">            // let data = JSON.parse(xhr.response); //转换成json</span><br><span class="line">            // result.innerHTML = data.name;</span><br><span class="line">            // *2*. (自动转换)自动转换(自动转换)</span><br><span class="line">            result.innerHTML = xhr.response.name; //已经自动变成json</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/ajax/9.gif"/></div></div><h2 id="请求超时与网络异常"><a href="#请求超时与网络异常" class="headerlink" title="请求超时与网络异常"></a>请求超时与网络异常</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 超时设置 （2秒）</span><br><span class="line">xhr.timeout = 2000;</span><br><span class="line">// 超时回调</span><br><span class="line">xhr.ontimeout = function()&#123;</span><br><span class="line">alert(&#x27;网络超时，请稍后重试&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">// 网络异常回调</span><br><span class="line">xhr.onerror = function()&#123;</span><br><span class="line">alert(&#x27;网络异常，请稍后重试&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="取消请求"><a href="#取消请求" class="headerlink" title="取消请求"></a>取消请求</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 手动取消</span><br><span class="line">xhr.abort()</span><br></pre></td></tr></table></figure><h2 id="请求重复发送问题"><a href="#请求重复发送问题" class="headerlink" title="请求重复发送问题"></a>请求重复发送问题</h2><h2 id="解决-IE-缓存问题"><a href="#解决-IE-缓存问题" class="headerlink" title="解决 IE 缓存问题"></a>解决 IE 缓存问题</h2><p>问题：在一些浏览器中(IE),由于缓存机制的存在，ajax 只会发送的第一次请求，剩余多次请求不会在发送给浏览器而是直接加载缓存中的数据。<br>解决方式：浏览器的缓存是根据url 地址来记录的，所以我们只需要修改url 地址即可避免缓存问题<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(&quot;get&quot;,&quot;/testAJAX?t=&quot;+Date.now());</span><br></pre></td></tr></table></figure></p><h2 id="AJAX-请求状态"><a href="#AJAX-请求状态" class="headerlink" title="AJAX 请求状态"></a>AJAX 请求状态</h2><p>xhr.readyState 可以用来查看请求当前的状态<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/readyState">https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/readyState</a><br><div class="img-wrap"><div class="img-bg"><img class="img" src="http://GitHubxxx17.github.io/img/ajax/10.png"/></div></div></p><details class="folding-tag" blue open><summary>  </summary>              <div class='content'>              <p>0: 表示XMLHttpRequest 实例已经生成，但是open()方法还没有被调用<br>1: 表示send()方法还没有被调用，仍然可以使用setRequestHeader()，设定HTTP请求的头信息<br>2: 表示send()方法已经执行，并且头信息和状态码已经收到<br>3: 表示正在接收服务器传来的body 部分的数据<br>4: 表示服务器数据已经完全接收，或者本次接收已经失败了</p>              </div>            </details><h2 id="API总结"><a href="#API总结" class="headerlink" title="API总结"></a>API总结</h2><div class="tip successful"><p>XMLHttpRequest()：创建 XHR 对象的构造函数<br>status：响应状态码值，如 200、404<br>statusText：响应状态文本，如 ’ok‘、‘not found’<br>readyState：标识请求状态的只读属性 0-1-2-3-4<br>onreadystatechange：绑定 readyState 改变的监听<br>responseType：指定响应数据类型，如果是 ‘json’，得到响应后自动解析响应<br>response：响应体数据，类型取决于 responseType 的指定<br>timeout：指定请求超时时间，默认为 0 代表没有限制<br>ontimeout：绑定超时的监听<br>onerror：绑定请求网络错误的监听<br>open()：初始化一个请求，参数为：(method, url[, async])<br>send(data)：发送请求<br>abort()：中断请求 （发出到返回之间）<br>getResponseHeader(name)：获取指定名称的响应头值<br>getAllResponseHeaders()：获取所有响应头组成的字符串<br>setRequestHeader(name, value)：设置请求头</p></div><h1 id="jQuery中的AJAX"><a href="#jQuery中的AJAX" class="headerlink" title="jQuery中的AJAX"></a>jQuery中的AJAX</h1><h2 id="get-请求"><a href="#get-请求" class="headerlink" title="get 请求"></a>get 请求</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.get(url, [data], [callback], [type])</span><br></pre></td></tr></table></figure><p>url:请求的URL 地址<br>data:请求携带的参数<br>callback:载入成功时回调函数<br>type:设置返回内容格式，xml, html, script, json, text, _default</p><h2 id="post-请求"><a href="#post-请求" class="headerlink" title="post 请求"></a>post 请求</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.post(url, [data], [callback], [type])</span><br></pre></td></tr></table></figure><p>url:请求的URL 地址<br>data:请求携带的参数<br>callback:载入成功时回调函数<br>type:设置返回内容格式，xml, html, script, json, text, _default</p><h2 id="通用方法"><a href="#通用方法" class="headerlink" title="通用方法"></a>通用方法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">// url</span><br><span class="line">url: &#x27;http://127.0.0.1:8000/jquery-server&#x27;,</span><br><span class="line">// 参数</span><br><span class="line">data: &#123;a:100, b:200&#125;,</span><br><span class="line">// 请求类型</span><br><span class="line">type: &#x27;GET&#x27;,</span><br><span class="line">// 响应体结果</span><br><span class="line">dataType: &#x27;json&#x27;,</span><br><span class="line">// 成功的回调</span><br><span class="line">success: function(data)&#123;console.log(data);&#125;,</span><br><span class="line">// 超时时间</span><br><span class="line">timeout: 2000,</span><br><span class="line">// 失败的回调</span><br><span class="line">error: function()&#123;console.log(&#x27;出错拉~&#x27;);&#125;,</span><br><span class="line">// 头信息</span><br><span class="line">headers: &#123;</span><br><span class="line">c: 300,</span><br><span class="line">d: 400</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h1><h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><div class="tip info"><p>同源策略(Same-Origin Policy)最早由Netscape 公司提出，是浏览器的一种安全策略<br>同源： 协议、域名、端口号必须完全相同<br>跨域： 违背同源策略就是跨域</p></div><h2 id="如何解决跨域"><a href="#如何解决跨域" class="headerlink" title="如何解决跨域"></a>如何解决跨域</h2><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><div class="tip info"><p>JSONP 是什么<br>JSONP(JSON with Padding)，是一个非官方的跨域解决方案，纯粹凭借程序员的聪明<br>才智开发出来，只支持get 请求。</p><p>JSONP 怎么工作的？<br>在网页有一些标签天生具有跨域能力，比如：img link iframe script。<br>JSONP 就是利用script 标签的跨域能力来发送请求的。</p></div><ul><li>JSONP 的使用</li></ul><p>动态的创建一个script 标签<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var script = document.createElement(&quot;script&quot;);</span><br></pre></td></tr></table></figure></p><p>设置script 的src，设置回调函数<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">script.src = &quot;http://localhost:3000/testAJAX?callback=abc&quot;;</span><br><span class="line">function abc(data) &#123;</span><br><span class="line">alert(data.name);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>将script 添加到body 中<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.body.appendChild(script);</span><br></pre></td></tr></table></figure></p><p>服务器中路由的处理<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">router.get(&quot;/testAJAX&quot; , function (req , res) &#123;</span><br><span class="line">console.log(&quot;收到请求&quot;);</span><br><span class="line">var callback = req.query.callback;</span><br><span class="line">var obj = &#123;</span><br><span class="line">name:&quot;孙悟空&quot;,</span><br><span class="line">age:18</span><br><span class="line">&#125;</span><br><span class="line">res.send(callback+&quot;(&quot;+JSON.stringify(obj)+&quot;)&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><ul><li>jQuery 中的JSONP</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button id=&quot;btn&quot;&gt;按钮&lt;/button&gt;</span><br><span class="line">&lt;ul id=&quot;list&quot;&gt;&lt;/ul&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;./jquery-1.12.3.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">window.onload = function () &#123;</span><br><span class="line">var btn = document.getElementById(&#x27;btn&#x27;)</span><br><span class="line">btn.onclick = function () &#123;</span><br><span class="line">$.getJSON(&quot;http://api.douban.com/v2/movie/in_theaters?callback=?&quot;,function(data) &#123;</span><br><span class="line">console.log(data);</span><br><span class="line">//获取所有的电影的条目</span><br><span class="line">var subjects = data.subjects;</span><br><span class="line">//遍历电影条目</span><br><span class="line">for(var i=0 ; i&lt;subjects.length ; i++)&#123;</span><br><span class="line">$(&quot;#list&quot;).append(&quot;&lt;li&gt;&quot;+</span><br><span class="line">subjects[i].title+&quot;&lt;br /&gt;&quot;+</span><br><span class="line">&quot;&lt;img src=\&quot;&quot;+subjects[i].images.large+&quot;\&quot; &gt;&quot;+</span><br><span class="line">&quot;&lt;/li&gt;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><div class="tip info"><p>CORS 是什么？<br>CORS（Cross-Origin Resource Sharing），跨域资源共享。CORS 是官方的跨域解决方案，它的特点不需要在客户端做任何特殊的操作，完全在服务器中进行处理，支持get 和post 请求。跨域资源共享标准新增了一组HTTP 首部字段，允许服务器声明哪些源站通过浏览器有权限访问哪些资源</p><p>CORS 怎么工作的？<br>CORS 是通过设置一个响应头来告诉浏览器，该请求允许跨域，浏览器收到该响应以后就会对响应放行。</p></div><ul><li>CORS 的使用</li></ul><p>主要是服务器端的设置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">router.get(&quot;/testAJAX&quot; , function (req , res) &#123;</span><br><span class="line">//通过res 来设置响应头，来允许跨域请求</span><br><span class="line">//res.set(&quot;Access-Control-Allow-Origin&quot;,&quot;http://127.0.0.1:3000&quot;);</span><br><span class="line">res.set(&quot;Access-Control-Allow-Origin&quot;,&quot;*&quot;);</span><br><span class="line">res.send(&quot;testAJAX 返回的响应&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Ajax概述&quot;&gt;&lt;a href=&quot;#Ajax概述&quot; class=&quot;headerlink&quot; title=&quot;Ajax概述&quot;&gt;&lt;/a&gt;Ajax概述&lt;/h1&gt;&lt;h2 id=&quot;AJAX-简介&quot;&gt;&lt;a href=&quot;#AJAX-简介&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="笔记" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>关于Butterfly主题</title>
    <link href="http://example.com/2022/07/01/butterfly%E4%B8%BB%E9%A2%98/"/>
    <id>http://example.com/2022/07/01/butterfly%E4%B8%BB%E9%A2%98/</id>
    <published>2022-06-30T16:00:00.000Z</published>
    <updated>2022-12-15T13:25:55.368Z</updated>
    
    <content type="html"><![CDATA[<div align="right">  語言:  中文  <a title="English" href="/README.md">英文</a></div><h1 id="hexo-theme-butterfly"><a href="#hexo-theme-butterfly" class="headerlink" title="hexo-theme-butterfly"></a>hexo-theme-butterfly</h1><p><img src="https://img.shields.io/github/package-json/v/jerryc127/hexo-theme-butterfly/master?color=%231ab1ad&amp;label=master" alt="master version"><br><img src="https://img.shields.io/github/package-json/v/jerryc127/hexo-theme-butterfly/dev?label=dev" alt="master version"><br><img src="https://img.shields.io/npm/v/hexo-theme-butterfly?color=%09%23bf00ff" alt="https://img.shields.io/npm/v/hexo-theme-butterfly?color=%09%23bf00ff"><br><img src="https://img.shields.io/badge/hexo-5.3.0+-0e83c" alt="hexo version"><br><img src="https://img.shields.io/github/license/jerryc127/hexo-theme-butterfly?color=FF5531" alt="license"></p><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@m2/img/theme-butterfly-readme.png" alt=""></p><p>預覽: 👍 <a href="https://butterfly.js.org/">Butterfly</a>  ||  🤞 <a href="https://crazywong.com/">CrazyWong</a></p><p>文檔: 📖 <a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly Docs</a></p><p>一款基於<a href="https://github.com/Molunerfinn/hexo-theme-melody">hexo-theme-melody</a>修改的主題</p><p><a href="https://butterfly.js.org/posts/21cfbf15/">详细教程</a></p><h2 id="💻-安裝"><a href="#💻-安裝" class="headerlink" title="💻 安裝"></a>💻 安裝</h2><h3 id="Git-安裝"><a href="#Git-安裝" class="headerlink" title="Git 安裝"></a>Git 安裝</h3><blockquote><p>本倉庫同時上傳到 <a href="https://gitee.com/immyw/hexo-theme-butterfly.git">Gitee</a>，如果你訪問 Github 緩慢，可從 Gitee 中下載。</p></blockquote><p>在博客根目錄裡安裝穩定版【推薦】</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone <span class="literal">-b</span> master https://github.com/jerryc127/hexo<span class="literal">-theme-butterfly</span>.git themes/butterfly</span><br></pre></td></tr></table></figure><p>如果想要安裝比較新的dev分支，可以</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone <span class="literal">-b</span> dev https://github.com/jerryc127/hexo<span class="literal">-theme-butterfly</span>.git themes/butterfly</span><br></pre></td></tr></table></figure><h3 id="npm-安裝"><a href="#npm-安裝" class="headerlink" title="npm 安裝"></a>npm 安裝</h3><blockquote><p>此方法只支持Hexo 5.0.0以上版本</p></blockquote><p>在博客根目錄裡</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo<span class="literal">-theme-butterfly</span></span><br></pre></td></tr></table></figure><h2 id="⚙-應用主題"><a href="#⚙-應用主題" class="headerlink" title="⚙ 應用主題"></a>⚙ 應用主題</h2><p>修改hexo配置文件<code>_config.yml</code>，把主題改為<code>Butterfly</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure><blockquote><p>如果你沒有pug以及stylus的渲染器，請下載安裝： npm install hexo-renderer-pug hexo-renderer-stylus —save</p></blockquote><h2 id="🎉-特色"><a href="#🎉-特色" class="headerlink" title="🎉 特色"></a>🎉 特色</h2><ul><li>[x] 卡片化設計</li><li>[X] 支持二級目錄</li><li>[x] 雙欄設計</li><li>[x] 響應式主題</li><li>[x] 夜間模式</li><li>[x] Pjax</li><li>[x] 文章閲讀模式</li><li>[x] 簡體和繁體轉換</li><li>[X] 電腦和手機都可查看TOC目錄</li><li>[X] 內置多種代碼配色（darker/pale night/light/ocean/mac/mac light），可自定義代碼配色</li><li>[X] 代碼塊顯示代碼語言/關閉或展開代碼塊/代碼複製/代碼自動換行</li><li>[X] 可關閉文字複製/可開啟內容複製增加版權信息）</li><li>[X] 兩種搜索（Algolia搜索和本地搜索）</li><li>[x] Mathjax 和 Katex</li><li>[x] 內置404頁面</li><li>[x] 顯示字數統計</li><li>[x] 顯示相關文章</li><li>[x] 過期文章提醒</li><li>[x] 多種分享系統（AddThis/Sharejs/Addtoany）</li><li>[X] 多種評論系統（Disqus/Disqusjs/Livere/Gitalk/Valine/Waline/Utterances/Facebook Comments/Twikoo/Giscus）</li><li>[x] 支持雙評論部署</li><li>[x] 多種在線聊天（Chatra/Tidio/Daovoice/Gitter/Crisp）</li><li>[x] 多種分析系統</li><li>[x] 谷歌廣告/手動廣告位置</li><li>[x] 各種站長驗證（Google/Bing/Baidu/360/Yandex）</li><li>[x] 修改網站配色</li><li>[x] 打字特效 activate_power_mode</li><li>[x] 多種背景特效（靜止彩帶/動態彩帶/Canvas Nest）</li><li>[x] 多種鼠標點擊特效（煙花/文字/愛心）</li><li>[x] 內置一種 Preloader 加載動畫</li><li>[x] 不蒜子訪問統計</li><li>[x] 兩種大圖模式（Medium Zoom/Fancybox）</li><li>[x] Mermaid 圖表顯示</li><li>[x] 照片牆</li><li>[x] 圖片懶加載</li><li>[x] Instantpage/Pangu/Snackbar彈窗/PWA……</li></ul><h2 id="✨-贡献者"><a href="#✨-贡献者" class="headerlink" title="✨ 贡献者"></a>✨ 贡献者</h2><p><a href="https://github.com/jerryc127/hexo-theme-butterfly/graphs/contributors"><br>  <img src="https://contrib.rocks/image?repo=jerryc127/hexo-theme-butterfly" /></a></p><h2 id="📷-截圖"><a href="#📷-截圖" class="headerlink" title="📷 截圖"></a>📷 截圖</h2><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@m2/img/butterfly-readme-screenshots-1.jpg" alt=""><br><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@m2/img/butterfly-readme-screenshots-2.jpg" alt=""><br><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@m2/img/butterfly-readme-screenshots-3.jpg" alt=""><br><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@m2/img/butterfly-readme-screenshots-4.jpg" alt=""><br><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/theme-butterfly-readme-homepage-1.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/theme-butterfly-readme-homepage-2.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;div align=&quot;right&quot;&gt;
  語言:
  中文
  &lt;a title=&quot;English&quot; href=&quot;/README.md&quot;&gt;英文&lt;/a&gt;
&lt;/div&gt;

&lt;h1 id=&quot;hexo-theme-butterfly&quot;&gt;&lt;a href=&quot;#hexo-theme-butt</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>markdown渲染插件</title>
    <link href="http://example.com/2022/07/01/markdown/"/>
    <id>http://example.com/2022/07/01/markdown/</id>
    <published>2022-06-30T16:00:00.000Z</published>
    <updated>2022-12-15T13:25:59.295Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo-renderer-kramed"><a href="#hexo-renderer-kramed" class="headerlink" title="hexo-renderer-kramed"></a>hexo-renderer-kramed</h1><p><a href="https://travis-ci.org/sun11/hexo-renderer-kramed"><img src="https://travis-ci.org/sun11/hexo-renderer-kramed.svg?branch=master" alt="Build Status"></a>  <a href="http://badge.fury.io/js/hexo-renderer-kramed"><img src="https://badge.fury.io/js/hexo-renderer-kramed.svg" alt="NPM version"></a></p><p>This plugin uses <a href="https://github.com/GitbookIO/kramed">kramed</a> but not <a href="https://github.com/chjj/marked">marked</a> as render engine, it is a fork of <a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked</a>. You need to uninstall hexo-renderer-marked to avoid conflicts.</p><h2 id="Why-use-kramed"><a href="#Why-use-kramed" class="headerlink" title="Why use kramed?"></a>Why use kramed?</h2><p>Just for the support of mathjax. I’ve modified the inline math format, like this example below:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`$\sigma$`</span><br></pre></td></tr></table></figure><p>But this renderer will only wrap your inline tex and display tex with a <code>&lt;script&gt;</code> tag, to fully enable mathjax, you need to add some js code in your theme, what I did in my theme <a href="https://github.com/sun11/hexo-theme-paperbox">hexo-theme-paperbox</a> is:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/x-mathjax-config&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">MathJax</span>.<span class="property">Hub</span>.<span class="title class_">Config</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">menuSettings</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">zoom</span>: <span class="string">&quot;None&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">showMathMenu</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">jax</span>: [<span class="string">&quot;input/TeX&quot;</span>,<span class="string">&quot;output/CommonHTML&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">extensions</span>: [<span class="string">&quot;tex2jax.js&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">TeX</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">extensions</span>: [<span class="string">&quot;AMSmath.js&quot;</span>,<span class="string">&quot;AMSsymbols.js&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">equationNumbers</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">autoNumber</span>: <span class="string">&quot;AMS&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">tex2jax</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">inlineMath</span>: [[<span class="string">&quot;\\(&quot;</span>, <span class="string">&quot;\\)&quot;</span>]],</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">displayMath</span>: [[<span class="string">&quot;\\[&quot;</span>, <span class="string">&quot;\\]&quot;</span>]]</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//cdnjs.cloudflare.com/ajax/libs/mathjax/2.6.1/MathJax.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>You can use the following formats for your equations:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">inlineMath: `$\sigma$`</span><br><span class="line"></span><br><span class="line">displayMath: $$\sigma$$</span><br></pre></td></tr></table></figure><p>If you need to contain <code>$</code> in \<code\> tag:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">` $some code$ `</span><br></pre></td></tr></table></figure><p>If you need to contain $$$$ in your text:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\$\$</span><br></pre></td></tr></table></figure><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm uninstall hexo-renderer-marked --save</span><br><span class="line">$ npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure><ul><li>Hexo 3: &gt;= 0.2</li><li>Hexo 2: 0.1.x</li></ul><h2 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h2><p>You can configure this plugin in <code>_config.yml</code>.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kramed:</span></span><br><span class="line">  <span class="attr">gfm:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">pedantic:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">sanitize:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tables:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">breaks:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">smartLists:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">smartypants:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li><strong>gfm</strong> - Enables <a href="https://help.github.com/articles/github-flavored-markdown">GitHub flavored markdown</a></li><li><strong>pedantic</strong> - Conform to obscure parts of <code>markdown.pl</code> as much as possible. Don’t fix any of the original markdown bugs or poor behavior.</li><li><strong>sanitize</strong> - Sanitize the output. Ignore any HTML that has been input.</li><li><strong>tables</strong> - Enable GFM <a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#wiki-tables">tables</a>. This option requires the <code>gfm</code> option to be true.</li><li><strong>breaks</strong> - Enable GFM <a href="https://help.github.com/articles/github-flavored-markdown#newlines">line breaks</a>. This option requires the <code>gfm</code> option to be true.</li><li><strong>smartLists</strong> - Use smarter list behavior than the original markdown.</li><li><strong>smartypants</strong> - Use “smart” typograhic punctuation for things like quotes and dashes.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hexo-renderer-kramed&quot;&gt;&lt;a href=&quot;#hexo-renderer-kramed&quot; class=&quot;headerlink&quot; title=&quot;hexo-renderer-kramed&quot;&gt;&lt;/a&gt;hexo-renderer-kramed&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="插件" scheme="http://example.com/categories/%E6%8F%92%E4%BB%B6/"/>
    
    
    <category term="插件" scheme="http://example.com/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>外挂标签</title>
    <link href="http://example.com/2022/07/01/%E5%A4%96%E6%8C%82%E6%A0%87%E7%AD%BE/"/>
    <id>http://example.com/2022/07/01/%E5%A4%96%E6%8C%82%E6%A0%87%E7%AD%BE/</id>
    <published>2022-06-30T16:00:00.000Z</published>
    <updated>2022-12-15T13:28:02.647Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo-butterfly-tag-plugins-plus"><a href="#hexo-butterfly-tag-plugins-plus" class="headerlink" title="hexo-butterfly-tag-plugins-plus"></a>hexo-butterfly-tag-plugins-plus</h1><p>给<code>hexo-theme-butterfly</code>添加 <a href="https://akilar.top/posts/615e2dec/">大量外挂标签</a></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol><li>安装插件,在博客根目录<code>[Blogroot]</code>下打开终端，运行以下指令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-butterfly-tag-plugins-plus --save</span><br></pre></td></tr></table></figure></li><li><p>考虑到hexo自带的markdown渲染插件<code>hexo-renderer-marked</code>与外挂标签语法的兼容性较差，建议您将其替换成<a href="https://www.npmjs.com/package/hexo-renderer-kramed">hexo-renderer-kramed</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure></li><li><p>添加配置信息，以下为写法示例<br>在站点配置文件<code>_config.yml</code>或者主题配置文件<code>_config.butterfly.yml</code>中添加</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tag-plugins-plus</span></span><br><span class="line"><span class="comment"># see https://akilar.top/posts/615e2dec/</span></span><br><span class="line"><span class="attr">tag_plugins:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">issues:</span> <span class="literal">false</span> <span class="comment">#issues标签开关</span></span><br><span class="line">  <span class="attr">link:</span></span><br><span class="line">    <span class="attr">placeholder:</span> <span class="string">/img/link.png</span> <span class="comment">#link_card标签默认的图标图片</span></span><br><span class="line">  <span class="attr">CDN:</span></span><br><span class="line">    <span class="attr">anima:</span> <span class="string">https://unpkg.zhimg.com/hexo-butterfly-tag-plugins-plus@latest/lib/assets/font-awesome-animation.min.css</span> <span class="comment">#动画标签anima的依赖</span></span><br><span class="line">    <span class="attr">jquery:</span> <span class="string">https://unpkg.zhimg.com/jquery@latest/dist/jquery.min.js</span> <span class="comment">#issues标签依赖</span></span><br><span class="line">    <span class="attr">issues:</span> <span class="string">https://unpkg.zhimg.com/hexo-butterfly-tag-plugins-plus@latest/lib/assets/issues.js</span> <span class="comment">#issues标签依赖</span></span><br><span class="line">    <span class="attr">iconfont:</span> <span class="string">//at.alicdn.com/t/font_2032782_8d5kxvn09md.js</span> <span class="comment">#参看https://akilar.top/posts/d2ebecef/</span></span><br><span class="line">    <span class="attr">carousel:</span> <span class="string">https://unpkg.zhimg.com/hexo-butterfly-tag-plugins-plus@latest/lib/assets/carousel-touch.js</span></span><br><span class="line">    <span class="attr">tag_plugins_css:</span> <span class="string">https://unpkg.zhimg.com/hexo-butterfly-tag-plugins-plus@latest/lib/tag_plugins.css</span></span><br></pre></td></tr></table></figure></li><li><p>参数释义</p><p>|参数|备选值/类型|释义|<br>|:—|:—|:—|<br>|enable|true/false|【必选】控制开关|<br>|priority|number|【可选】过滤器优先级，数值越小，执行越早，默认为10，选填|<br>|issues|true/false|【可选】issues标签控制开关，默认为false|<br>|link.placeholder|【必选】link卡片外挂标签的默认图标|<br>|CDN.anima|URL|【可选】动画标签anima的依赖|<br>|CDN.jquery|URL|【可选】issues标签依赖|<br>|CDN.issues|URL|【可选】issues标签依赖|<br>|CDN.iconfont|URL|【可选】iconfont标签symbol样式引入，如果不想引入，则设为false|<br>|CDN.carousel|URL|【可选】carousel旋转相册标签鼠标拖动依赖，如果不想引入则设为false|<br>|CDN.tag_plugins_css|URL|【可选】外挂标签样式的CSS依赖，为避免CDN缓存延迟，建议将@latest改为具体版本号|</p></li></ol><h1 id="外挂标签文档"><a href="#外挂标签文档" class="headerlink" title="外挂标签文档"></a>外挂标签文档</h1><p><a href="https://akilar.top/posts/615e2dec/">Tag Plugins Plus</a></p><h1 id="update-log"><a href="#update-log" class="headerlink" title="update-log"></a>update-log</h1><ul><li><code>2022-04-29：1.0.17</code><ol><li>在bubble气泡外挂标签基础上新增reference引用文献标签</li><li>修复了bubble气泡外挂标签层级过高遮挡提示框的bug</li></ol></li><li><code>2022-04-28：1.0.16</code><ol><li>移除timeline外挂标签，请使用butterfly新版自带的timeline标签，效果更好。</li><li>修复tip标签自定义图标无效的bug</li></ol></li><li><code>2022-04-07：1.0.15</code><ol><li>调整bubble气泡标签样式动画逻辑，避免透明度变化瞬间遮挡正文。</li></ol></li><li><code>2022-04-07：1.0.14</code><ol><li>新增气泡注释bubble标签样式。效果比nota标签更好。</li><li>支持自定义气泡背景色。</li></ol></li><li><code>2022-03-03：1.0.13</code><ol><li>新增开关逻辑，iconfont，carousel设为false则不引入。</li><li>site标签新增灯箱屏蔽，不再支持点击放大图片。</li></ol></li><li><code>2022-02-14：1.0.12</code><ol><li>剔除了link卡片的无效css属性。</li></ol></li><li><code>2022-01-26：1.0.11</code><ol><li>butterfly_v4.0新增了<code>timeline</code>标签，与本插件标签名冲突。可以选择改用标签文档中的源码配置方案或者删除主题原有的timeline标签文件<code>Blogroot\themes\butterfly\scripts\tag\timeline.js</code>和<code>Blogroot\themes\butterfly\source\css\_tags\timeline.styl</code>。</li><li>修复了carousel标签刷新后不加载的bug。</li></ol></li><li><code>2021-12-23：1.0.10</code><ol><li>将所有CDN链接迁移至<code>unpkg.zhimg.com</code>。</li><li>外露所有CDN配置项，支持读者自行更改CDN源。</li></ol></li><li><code>2021-12-09：1.0.9</code><ol><li>调整<code>link</code>标签的默认图片缺省值适配，新增<code>tag_plugins.link.placeholder</code>配置项。</li><li>因为新增了默认图片，新增配置项，所以需要更新版本。如果本身使用<code>link</code>标签就有自己加图片的习惯的，无需升级。</li><li>修复img-alt靠左的问题</li></ol></li><li><code>2021-12-07：1.0.5</code><ol><li>调整 <code>folding</code>标签，解决与 twikoo 设置面板样式的冲突问题</li><li>因为调整了 <code>folding</code> 标签的编译函数，低版本会出现 <code>folding</code> 样式失效的情况，请各位更新至最新版本。</li></ol></li><li><code>2021-12-01：1.0.4</code><ol><li>调整<code>tip</code>标签，字体垂直居中</li></ol></li><li><code>2021-08-06：1.0.3</code><ol><li>新增<code>carousel</code>旋转相册标签</li></ol></li><li><code>2021-07-07：1.0.0</code><ol><li>使用 npm 插件安装。</li><li>测试版本为 <code>butterfly_v3.1.0、3.3.0、3.7.8、3.8.0</code></li><li>插件写法调整为高内聚，理论上不受 butterfly 主题版本影响。<del>除非主题又整同名标签</del></li><li>为了获得完整效果，建议打开主题的<code>beautify</code>配置项和<code>theme_color</code>配置项。</li></ol></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hexo-butterfly-tag-plugins-plus&quot;&gt;&lt;a href=&quot;#hexo-butterfly-tag-plugins-plus&quot; class=&quot;headerlink&quot; title=&quot;hexo-butterfly-tag-plugins-plu</summary>
      
    
    
    
    <category term="插件" scheme="http://example.com/categories/%E6%8F%92%E4%BB%B6/"/>
    
    
    <category term="插件" scheme="http://example.com/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>标签插件样式</title>
    <link href="http://example.com/2022/07/01/%E6%A0%87%E7%AD%BE%E6%8F%92%E4%BB%B6%E6%A0%B7%E5%BC%8F/"/>
    <id>http://example.com/2022/07/01/%E6%A0%87%E7%AD%BE%E6%8F%92%E4%BB%B6%E6%A0%B7%E5%BC%8F/</id>
    <published>2022-06-30T16:00:00.000Z</published>
    <updated>2022-12-15T13:25:48.334Z</updated>
    
    <content type="html"><![CDATA[<h1 id="行内文本样式-text"><a href="#行内文本样式-text" class="headerlink" title="行内文本样式 text"></a>行内文本样式 text</h1><p><span style = "color:red">红色</span></p><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol><h1 id="行内文本-span"><a href="#行内文本-span" class="headerlink" title="行内文本 span"></a>行内文本 span</h1><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<span class='p center logo large'>Volantis</span><span class='p center small'>A Wonderful Theme for Hexo</span></li></ul><h1 id="引用-note"><a href="#引用-note" class="headerlink" title="引用 note"></a>引用 note</h1><div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div><h1 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h1><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>黄色 + 默认选中</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>青色 + 默认选中</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>蓝色 + 默认选中</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div><div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div><h1 id="单选列表-radio"><a href="#单选列表-radio" class="headerlink" title="单选列表 radio"></a>单选列表 radio</h1><div class='checkbox'><input type="radio" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="radio" />            <p>支持自定义颜色</p>            </div><div class='checkbox green'><input type="radio" />            <p>绿色</p>            </div><div class='checkbox yellow'><input type="radio" />            <p>黄色</p>            </div><div class='checkbox cyan'><input type="radio" />            <p>青色</p>            </div><div class='checkbox blue'><input type="radio" />            <p>蓝色</p>            </div><h1 id="分栏tab"><a href="#分栏tab" class="headerlink" title="分栏tab"></a>分栏tab</h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><details class="folding-tag" cyan open><summary> text </summary>              <div class='content'>              <p>hhhhhhhhh<br>hhhhhhhhh</p>              </div>            </details><p>臣亮言：<mark class="hl-label default">先帝</mark> 创业未半，而<mark class="hl-label blue">中道崩殂</mark> 。今天下三分，<mark class="hl-label pink">益州疲敝</mark> ，此诚<mark class="hl-label red">危急存亡之秋</mark> 也！然侍衞之臣，不懈于内；<mark class="hl-label purple">忠志之士</mark> ，忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。<br>宫中、府中，俱为一体；陟罚臧否，不宜异同。若有<mark class="hl-label orange">作奸</mark> 、<mark class="hl-label green">犯科</mark> ，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。</p><p>最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的<span class="bubble-content">兄弟相邻选择器</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#71a4e3;">例如 h1 + p {margin-top:50px;}</span></span>，<span class="bubble-content">flex布局</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">Flex 是 Flexible Box 的缩写，意为弹性布局"，用来为盒状模型提供最大的灵活性"</span></span>，<span class="bubble-content">transform变换</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#1db675;">transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。</span></span>，animation的<span class="bubble-content">贝塞尔速度曲线</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#de4489;">贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋</span></span>写法，还有今天刚看到的<span class="bubble-content">clip-path</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。</span></span>属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;行内文本样式-text&quot;&gt;&lt;a href=&quot;#行内文本样式-text&quot; class=&quot;headerlink&quot; title=&quot;行内文本样式 text&quot;&gt;&lt;/a&gt;行内文本样式 text&lt;/h1&gt;&lt;p&gt;&lt;span style = &quot;color:red&quot;&gt;红色&lt;/span</summary>
      
    
    
    
    <category term="插件" scheme="http://example.com/categories/%E6%8F%92%E4%BB%B6/"/>
    
    
    <category term="插件" scheme="http://example.com/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
</feed>
